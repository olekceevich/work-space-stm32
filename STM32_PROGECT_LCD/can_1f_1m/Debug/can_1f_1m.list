
can_1f_1m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003788  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec4  08003ec4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ec4  08003ec4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ec4  08003ec4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000005c  08003f28  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08003f28  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009117  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e7  00000000  00000000  000291df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  0002abc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000615  00000000  00000000  0002b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017376  00000000  00000000  0002b9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009787  00000000  00000000  00042d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084e9c  00000000  00000000  0004c4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024b4  00000000  00000000  000d1368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d381c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800387c 	.word	0x0800387c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800387c 	.word	0x0800387c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CAN_Init>:
static uint8_t send_command(uint8_t *data, uint8_t len);
void CAN_Init(void);
void LogMessage(const char *message);
void LogError(const char *message);

void CAN_Init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    CAN_ConfigFilter();
 8000160:	f000 fbf8 	bl	8000954 <CAN_ConfigFilter>
    if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000164:	480e      	ldr	r0, [pc, #56]	; (80001a0 <CAN_Init+0x44>)
 8000166:	f001 f927 	bl	80013b8 <HAL_CAN_Start>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d003      	beq.n	8000178 <CAN_Init+0x1c>
        LogError("CAN_Init: Error starting CAN");
 8000170:	480c      	ldr	r0, [pc, #48]	; (80001a4 <CAN_Init+0x48>)
 8000172:	f000 fc43 	bl	80009fc <LogError>
 8000176:	e002      	b.n	800017e <CAN_Init+0x22>
    } else {
        LogMessage("CAN_Init: CAN started successfully");
 8000178:	480b      	ldr	r0, [pc, #44]	; (80001a8 <CAN_Init+0x4c>)
 800017a:	f000 fc21 	bl	80009c0 <LogMessage>
    }
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800017e:	2102      	movs	r1, #2
 8000180:	4807      	ldr	r0, [pc, #28]	; (80001a0 <CAN_Init+0x44>)
 8000182:	f001 fb97 	bl	80018b4 <HAL_CAN_ActivateNotification>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d003      	beq.n	8000194 <CAN_Init+0x38>
        LogError("CAN_Init: Error activating CAN notifications");
 800018c:	4807      	ldr	r0, [pc, #28]	; (80001ac <CAN_Init+0x50>)
 800018e:	f000 fc35 	bl	80009fc <LogError>
    } else {
        LogMessage("CAN_Init: Notifications activated");
    }
}
 8000192:	e002      	b.n	800019a <CAN_Init+0x3e>
        LogMessage("CAN_Init: Notifications activated");
 8000194:	4806      	ldr	r0, [pc, #24]	; (80001b0 <CAN_Init+0x54>)
 8000196:	f000 fc13 	bl	80009c0 <LogMessage>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	20000084 	.word	0x20000084
 80001a4:	08003894 	.word	0x08003894
 80001a8:	080038b4 	.word	0x080038b4
 80001ac:	080038d8 	.word	0x080038d8
 80001b0:	08003908 	.word	0x08003908

080001b4 <StartActivationProcess>:

void StartActivationProcess(void) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
    // Переход в Operational Mode
    uint8_t set_operational[] = {0x01};  // Команда для Operational Mode
 80001ba:	2301      	movs	r3, #1
 80001bc:	713b      	strb	r3, [r7, #4]
    send_command(set_operational, sizeof(set_operational));
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	2101      	movs	r1, #1
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 fb34 	bl	8000830 <send_command>
    HAL_Delay(1000);  // Ожидание перехода
 80001c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001cc:	f000 ff0c 	bl	8000fe8 <HAL_Delay>

    currentState = STATE_WAIT_BOOTLOADER_HEARTBEAT;
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <StartActivationProcess+0x3c>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	701a      	strb	r2, [r3, #0]
    stateTimer = HAL_GetTick();
 80001d6:	f000 fefd 	bl	8000fd4 <HAL_GetTick>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <StartActivationProcess+0x40>)
 80001de:	6013      	str	r3, [r2, #0]
    LogMessage("Starting activation process...");
 80001e0:	4805      	ldr	r0, [pc, #20]	; (80001f8 <StartActivationProcess+0x44>)
 80001e2:	f000 fbed 	bl	80009c0 <LogMessage>
}
 80001e6:	bf00      	nop
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000078 	.word	0x20000078
 80001f4:	2000007c 	.word	0x2000007c
 80001f8:	0800392c 	.word	0x0800392c

080001fc <_get_sdo_uint16>:



static uint16_t _get_sdo_uint16(uint16_t index, uint8_t sub_index) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b096      	sub	sp, #88	; 0x58
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	460a      	mov	r2, r1
 8000206:	80fb      	strh	r3, [r7, #6]
 8000208:	4613      	mov	r3, r2
 800020a:	717b      	strb	r3, [r7, #5]
    // Буфер данных для передачи и приема
    uint8_t request[8] = {0x40, (uint8_t)(index & 0xFF), (uint8_t)((index >> 8) & 0xFF), sub_index, 0x00, 0x00, 0x00, 0x00};
 800020c:	2340      	movs	r3, #64	; 0x40
 800020e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8000212:	88fb      	ldrh	r3, [r7, #6]
 8000214:	b2db      	uxtb	r3, r3
 8000216:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800021a:	88fb      	ldrh	r3, [r7, #6]
 800021c:	0a1b      	lsrs	r3, r3, #8
 800021e:	b29b      	uxth	r3, r3
 8000220:	b2db      	uxtb	r3, r3
 8000222:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8000226:	797b      	ldrb	r3, [r7, #5]
 8000228:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800022c:	2300      	movs	r3, #0
 800022e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8000232:	2300      	movs	r3, #0
 8000234:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000238:	2300      	movs	r3, #0
 800023a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800023e:	2300      	movs	r3, #0
 8000240:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    uint16_t value = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    // Конфигурация заголовка CAN для запроса
    CAN_TxHeaderTypeDef TxHeader;
    TxHeader.StdId = LEFT_WHEEL_ID;  // Замените на ID устройства
 800024a:	2303      	movs	r3, #3
 800024c:	633b      	str	r3, [r7, #48]	; 0x30
    TxHeader.DLC = 8;                // Длина данных 8 байт
 800024e:	2308      	movs	r3, #8
 8000250:	643b      	str	r3, [r7, #64]	; 0x40
    TxHeader.RTR = CAN_RTR_DATA;
 8000252:	2300      	movs	r3, #0
 8000254:	63fb      	str	r3, [r7, #60]	; 0x3c
    TxHeader.IDE = CAN_ID_STD;
 8000256:	2300      	movs	r3, #0
 8000258:	63bb      	str	r3, [r7, #56]	; 0x38

    uint32_t TxMailbox;

    // Отправка запроса через CAN
    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, request, &TxMailbox) != HAL_OK) {
 800025a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800025e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000262:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000266:	4828      	ldr	r0, [pc, #160]	; (8000308 <_get_sdo_uint16+0x10c>)
 8000268:	f001 f8ea 	bl	8001440 <HAL_CAN_AddTxMessage>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d002      	beq.n	8000278 <_get_sdo_uint16+0x7c>
        // Обработка ошибки при отправке
        return 0xFFFF;  // Вернуть значение, указывающее на ошибку
 8000272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000276:	e043      	b.n	8000300 <_get_sdo_uint16+0x104>
    }

    // Ожидание ответа с тайм-аутом
    uint32_t start_time = HAL_GetTick();
 8000278:	f000 feac 	bl	8000fd4 <HAL_GetTick>
 800027c:	6538      	str	r0, [r7, #80]	; 0x50
    while ((HAL_GetTick() - start_time) < 1000) { // Тайм-аут 1 секунда
 800027e:	e035      	b.n	80002ec <_get_sdo_uint16+0xf0>
        CAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        // Проверяем, есть ли новые сообщения
        if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0) {
 8000280:	2100      	movs	r1, #0
 8000282:	4821      	ldr	r0, [pc, #132]	; (8000308 <_get_sdo_uint16+0x10c>)
 8000284:	f001 faef 	bl	8001866 <HAL_CAN_GetRxFifoFillLevel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d02b      	beq.n	80002e6 <_get_sdo_uint16+0xea>
            if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 800028e:	f107 0308 	add.w	r3, r7, #8
 8000292:	f107 0210 	add.w	r2, r7, #16
 8000296:	2100      	movs	r1, #0
 8000298:	481b      	ldr	r0, [pc, #108]	; (8000308 <_get_sdo_uint16+0x10c>)
 800029a:	f001 f9c3 	bl	8001624 <HAL_CAN_GetRxMessage>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d120      	bne.n	80002e6 <_get_sdo_uint16+0xea>
                // Проверяем, что ответ от нужного устройства и содержит данные SDO
                if (RxHeader.StdId == (LEFT_WHEEL_ID | RAW_CAN_RESPONSE_ARBITRATION_CODE) &&
 80002a4:	693b      	ldr	r3, [r7, #16]
 80002a6:	f240 5283 	movw	r2, #1411	; 0x583
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d11b      	bne.n	80002e6 <_get_sdo_uint16+0xea>
                    RxData[1] == (uint8_t)(index & 0xFF) &&
 80002ae:	7a7a      	ldrb	r2, [r7, #9]
 80002b0:	88fb      	ldrh	r3, [r7, #6]
 80002b2:	b2db      	uxtb	r3, r3
                if (RxHeader.StdId == (LEFT_WHEEL_ID | RAW_CAN_RESPONSE_ARBITRATION_CODE) &&
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d116      	bne.n	80002e6 <_get_sdo_uint16+0xea>
                    RxData[2] == (uint8_t)((index >> 8) & 0xFF) &&
 80002b8:	7aba      	ldrb	r2, [r7, #10]
 80002ba:	88fb      	ldrh	r3, [r7, #6]
 80002bc:	0a1b      	lsrs	r3, r3, #8
 80002be:	b29b      	uxth	r3, r3
 80002c0:	b2db      	uxtb	r3, r3
                    RxData[1] == (uint8_t)(index & 0xFF) &&
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d10f      	bne.n	80002e6 <_get_sdo_uint16+0xea>
                    RxData[3] == sub_index) {
 80002c6:	7afb      	ldrb	r3, [r7, #11]
                    RxData[2] == (uint8_t)((index >> 8) & 0xFF) &&
 80002c8:	797a      	ldrb	r2, [r7, #5]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d10b      	bne.n	80002e6 <_get_sdo_uint16+0xea>
                    // Извлекаем значение (2 байта) из ответа
                    value = RxData[4] | (RxData[5] << 8);
 80002ce:	7b3b      	ldrb	r3, [r7, #12]
 80002d0:	b21a      	sxth	r2, r3
 80002d2:	7b7b      	ldrb	r3, [r7, #13]
 80002d4:	021b      	lsls	r3, r3, #8
 80002d6:	b21b      	sxth	r3, r3
 80002d8:	4313      	orrs	r3, r2
 80002da:	b21b      	sxth	r3, r3
 80002dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    return value;  // Возвращаем значение
 80002e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80002e4:	e00c      	b.n	8000300 <_get_sdo_uint16+0x104>
                }
            }
        }
        HAL_Delay(10);  // Небольшая задержка для предотвращения перегрузки
 80002e6:	200a      	movs	r0, #10
 80002e8:	f000 fe7e 	bl	8000fe8 <HAL_Delay>
    while ((HAL_GetTick() - start_time) < 1000) { // Тайм-аут 1 секунда
 80002ec:	f000 fe72 	bl	8000fd4 <HAL_GetTick>
 80002f0:	4602      	mov	r2, r0
 80002f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002fa:	d3c1      	bcc.n	8000280 <_get_sdo_uint16+0x84>
    }

    // Если ответ не получен, вернуть значение, указывающее на ошибку
    return 0xFFFF;
 80002fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000300:	4618      	mov	r0, r3
 8000302:	3758      	adds	r7, #88	; 0x58
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000084 	.word	0x20000084

0800030c <CAN_ProcessStateMachine>:

void CAN_ProcessStateMachine(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b094      	sub	sp, #80	; 0x50
 8000310:	af00      	add	r7, sp, #0
    uint8_t activation_data[2] = {0x10, 0x10};
 8000312:	f241 0310 	movw	r3, #4112	; 0x1010
 8000316:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

    switch (currentState) {
 800031a:	4bc9      	ldr	r3, [pc, #804]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	3b01      	subs	r3, #1
 8000320:	2b06      	cmp	r3, #6
 8000322:	f200 81d5 	bhi.w	80006d0 <CAN_ProcessStateMachine+0x3c4>
 8000326:	a201      	add	r2, pc, #4	; (adr r2, 800032c <CAN_ProcessStateMachine+0x20>)
 8000328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032c:	08000349 	.word	0x08000349
 8000330:	08000399 	.word	0x08000399
 8000334:	080003e3 	.word	0x080003e3
 8000338:	08000431 	.word	0x08000431
 800033c:	08000477 	.word	0x08000477
 8000340:	080006b5 	.word	0x080006b5
 8000344:	080006c3 	.word	0x080006c3
        case STATE_WAIT_BOOTLOADER_HEARTBEAT:
            LogMessage("STATE_WAIT_BOOTLOADER_HEARTBEAT");
 8000348:	48be      	ldr	r0, [pc, #760]	; (8000644 <CAN_ProcessStateMachine+0x338>)
 800034a:	f000 fb39 	bl	80009c0 <LogMessage>
            if (wait_for_heartbeat(6000)) {
 800034e:	f241 7070 	movw	r0, #6000	; 0x1770
 8000352:	f000 fab9 	bl	80008c8 <wait_for_heartbeat>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d00b      	beq.n	8000374 <CAN_ProcessStateMachine+0x68>
                LogMessage("Bootloader heartbeat received.");
 800035c:	48ba      	ldr	r0, [pc, #744]	; (8000648 <CAN_ProcessStateMachine+0x33c>)
 800035e:	f000 fb2f 	bl	80009c0 <LogMessage>
                currentState = STATE_GET_BOOTLOADER_VERSION;
 8000362:	4bb7      	ldr	r3, [pc, #732]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 8000364:	2202      	movs	r2, #2
 8000366:	701a      	strb	r2, [r3, #0]
                stateTimer = HAL_GetTick();
 8000368:	f000 fe34 	bl	8000fd4 <HAL_GetTick>
 800036c:	4603      	mov	r3, r0
 800036e:	4ab7      	ldr	r2, [pc, #732]	; (800064c <CAN_ProcessStateMachine+0x340>)
 8000370:	6013      	str	r3, [r2, #0]
            } else if (HAL_GetTick() - stateTimer > 5000) {
                LogError("Failed to receive bootloader heartbeat.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;
 8000372:	e1af      	b.n	80006d4 <CAN_ProcessStateMachine+0x3c8>
            } else if (HAL_GetTick() - stateTimer > 5000) {
 8000374:	f000 fe2e 	bl	8000fd4 <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	4bb4      	ldr	r3, [pc, #720]	; (800064c <CAN_ProcessStateMachine+0x340>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	f241 3288 	movw	r2, #5000	; 0x1388
 8000384:	4293      	cmp	r3, r2
 8000386:	f240 81a5 	bls.w	80006d4 <CAN_ProcessStateMachine+0x3c8>
                LogError("Failed to receive bootloader heartbeat.");
 800038a:	48b1      	ldr	r0, [pc, #708]	; (8000650 <CAN_ProcessStateMachine+0x344>)
 800038c:	f000 fb36 	bl	80009fc <LogError>
                currentState = STATE_ACTIVATION_FAILED;
 8000390:	4bab      	ldr	r3, [pc, #684]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 8000392:	2206      	movs	r2, #6
 8000394:	701a      	strb	r2, [r3, #0]
            break;
 8000396:	e19d      	b.n	80006d4 <CAN_ProcessStateMachine+0x3c8>

        case STATE_GET_BOOTLOADER_VERSION:
            LogMessage("STATE_GET_BOOTLOADER_VERSION");
 8000398:	48ae      	ldr	r0, [pc, #696]	; (8000654 <CAN_ProcessStateMachine+0x348>)
 800039a:	f000 fb11 	bl	80009c0 <LogMessage>
            if (send_command((uint8_t*) "\x20\x20", 2)) {
 800039e:	2102      	movs	r1, #2
 80003a0:	48ad      	ldr	r0, [pc, #692]	; (8000658 <CAN_ProcessStateMachine+0x34c>)
 80003a2:	f000 fa45 	bl	8000830 <send_command>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d013      	beq.n	80003d4 <CAN_ProcessStateMachine+0xc8>
                if (wait_for_heartbeat(6000)) {
 80003ac:	f241 7070 	movw	r0, #6000	; 0x1770
 80003b0:	f000 fa8a 	bl	80008c8 <wait_for_heartbeat>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	f000 818e 	beq.w	80006d8 <CAN_ProcessStateMachine+0x3cc>
                    LogMessage("Bootloader version received.");
 80003bc:	48a7      	ldr	r0, [pc, #668]	; (800065c <CAN_ProcessStateMachine+0x350>)
 80003be:	f000 faff 	bl	80009c0 <LogMessage>
                    currentState = STATE_SEND_ACTIVATION;
 80003c2:	4b9f      	ldr	r3, [pc, #636]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 80003c4:	2203      	movs	r2, #3
 80003c6:	701a      	strb	r2, [r3, #0]
                    stateTimer = HAL_GetTick();
 80003c8:	f000 fe04 	bl	8000fd4 <HAL_GetTick>
 80003cc:	4603      	mov	r3, r0
 80003ce:	4a9f      	ldr	r2, [pc, #636]	; (800064c <CAN_ProcessStateMachine+0x340>)
 80003d0:	6013      	str	r3, [r2, #0]
                }
            } else {
                LogError("Failed to send bootloader version request.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;
 80003d2:	e181      	b.n	80006d8 <CAN_ProcessStateMachine+0x3cc>
                LogError("Failed to send bootloader version request.");
 80003d4:	48a2      	ldr	r0, [pc, #648]	; (8000660 <CAN_ProcessStateMachine+0x354>)
 80003d6:	f000 fb11 	bl	80009fc <LogError>
                currentState = STATE_ACTIVATION_FAILED;
 80003da:	4b99      	ldr	r3, [pc, #612]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 80003dc:	2206      	movs	r2, #6
 80003de:	701a      	strb	r2, [r3, #0]
            break;
 80003e0:	e17a      	b.n	80006d8 <CAN_ProcessStateMachine+0x3cc>

        case STATE_SEND_ACTIVATION:
            LogMessage("STATE_SEND_ACTIVATION");
 80003e2:	48a0      	ldr	r0, [pc, #640]	; (8000664 <CAN_ProcessStateMachine+0x358>)
 80003e4:	f000 faec 	bl	80009c0 <LogMessage>
            if (send_command(activation_data, 2)) {
 80003e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003ec:	2102      	movs	r1, #2
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fa1e 	bl	8000830 <send_command>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d013      	beq.n	8000422 <CAN_ProcessStateMachine+0x116>
                if (wait_for_heartbeat(6000)) {
 80003fa:	f241 7070 	movw	r0, #6000	; 0x1770
 80003fe:	f000 fa63 	bl	80008c8 <wait_for_heartbeat>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	f000 8169 	beq.w	80006dc <CAN_ProcessStateMachine+0x3d0>
                    LogMessage("Activation command acknowledged.");
 800040a:	4897      	ldr	r0, [pc, #604]	; (8000668 <CAN_ProcessStateMachine+0x35c>)
 800040c:	f000 fad8 	bl	80009c0 <LogMessage>
                    currentState = STATE_CONFIRM_CANOPEN_MODE;
 8000410:	4b8b      	ldr	r3, [pc, #556]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 8000412:	2204      	movs	r2, #4
 8000414:	701a      	strb	r2, [r3, #0]
                    stateTimer = HAL_GetTick();
 8000416:	f000 fddd 	bl	8000fd4 <HAL_GetTick>
 800041a:	4603      	mov	r3, r0
 800041c:	4a8b      	ldr	r2, [pc, #556]	; (800064c <CAN_ProcessStateMachine+0x340>)
 800041e:	6013      	str	r3, [r2, #0]
                }
            } else {
                LogError("Failed to send activation command.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;
 8000420:	e15c      	b.n	80006dc <CAN_ProcessStateMachine+0x3d0>
                LogError("Failed to send activation command.");
 8000422:	4892      	ldr	r0, [pc, #584]	; (800066c <CAN_ProcessStateMachine+0x360>)
 8000424:	f000 faea 	bl	80009fc <LogError>
                currentState = STATE_ACTIVATION_FAILED;
 8000428:	4b85      	ldr	r3, [pc, #532]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 800042a:	2206      	movs	r2, #6
 800042c:	701a      	strb	r2, [r3, #0]
            break;
 800042e:	e155      	b.n	80006dc <CAN_ProcessStateMachine+0x3d0>

        case STATE_CONFIRM_CANOPEN_MODE:
            LogMessage("STATE_CONFIRM_CANOPEN_MODE");
 8000430:	488f      	ldr	r0, [pc, #572]	; (8000670 <CAN_ProcessStateMachine+0x364>)
 8000432:	f000 fac5 	bl	80009c0 <LogMessage>
            if (wait_for_heartbeat(5000)) {
 8000436:	f241 3088 	movw	r0, #5000	; 0x1388
 800043a:	f000 fa45 	bl	80008c8 <wait_for_heartbeat>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d006      	beq.n	8000452 <CAN_ProcessStateMachine+0x146>
                LogMessage("CANopen mode confirmed.");
 8000444:	488b      	ldr	r0, [pc, #556]	; (8000674 <CAN_ProcessStateMachine+0x368>)
 8000446:	f000 fabb 	bl	80009c0 <LogMessage>
                currentState = STATE_ROTATE_WHEEL;
 800044a:	4b7d      	ldr	r3, [pc, #500]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
            } else if (HAL_GetTick() - stateTimer > 5000) {
                LogError("Failed to confirm CANopen mode.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;
 8000450:	e146      	b.n	80006e0 <CAN_ProcessStateMachine+0x3d4>
            } else if (HAL_GetTick() - stateTimer > 5000) {
 8000452:	f000 fdbf 	bl	8000fd4 <HAL_GetTick>
 8000456:	4602      	mov	r2, r0
 8000458:	4b7c      	ldr	r3, [pc, #496]	; (800064c <CAN_ProcessStateMachine+0x340>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000462:	4293      	cmp	r3, r2
 8000464:	f240 813c 	bls.w	80006e0 <CAN_ProcessStateMachine+0x3d4>
                LogError("Failed to confirm CANopen mode.");
 8000468:	4883      	ldr	r0, [pc, #524]	; (8000678 <CAN_ProcessStateMachine+0x36c>)
 800046a:	f000 fac7 	bl	80009fc <LogError>
                currentState = STATE_ACTIVATION_FAILED;
 800046e:	4b74      	ldr	r3, [pc, #464]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 8000470:	2206      	movs	r2, #6
 8000472:	701a      	strb	r2, [r3, #0]
            break;
 8000474:	e134      	b.n	80006e0 <CAN_ProcessStateMachine+0x3d4>
        case STATE_ROTATE_WHEEL: {
            LogMessage("STATE_ROTATE_WHEEL: Preparing wheel for position mode");
 8000476:	4881      	ldr	r0, [pc, #516]	; (800067c <CAN_ProcessStateMachine+0x370>)
 8000478:	f000 faa2 	bl	80009c0 <LogMessage>

            // Переход в состояние Operational
            uint8_t set_operational[] = {0x01};  // NMT команд на "Operational"
 800047c:	2301      	movs	r3, #1
 800047e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            send_command(set_operational, sizeof(set_operational));
 8000482:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000486:	2101      	movs	r1, #1
 8000488:	4618      	mov	r0, r3
 800048a:	f000 f9d1 	bl	8000830 <send_command>
            HAL_Delay(2000);
 800048e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000492:	f000 fda9 	bl	8000fe8 <HAL_Delay>

            // Установка режима позиционирования
            uint8_t set_position_mode[] = {0x2F, 0x60, 0x60, 0x00, 0x01};  // Позиционный режим
 8000496:	4a7a      	ldr	r2, [pc, #488]	; (8000680 <CAN_ProcessStateMachine+0x374>)
 8000498:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800049c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004a0:	6018      	str	r0, [r3, #0]
 80004a2:	3304      	adds	r3, #4
 80004a4:	7019      	strb	r1, [r3, #0]
            send_command(set_position_mode, sizeof(set_position_mode));
 80004a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004aa:	2105      	movs	r1, #5
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 f9bf 	bl	8000830 <send_command>
            HAL_Delay(2000);
 80004b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004b6:	f000 fd97 	bl	8000fe8 <HAL_Delay>

            // Проверка статуса перед установкой позиции
            uint16_t status = _get_sdo_uint16(CANOPEN_SDO_INDEX_STATUS_WORD, CANOPEN_SDO_SUB_INDEX_STATUS_WORD);
 80004ba:	2100      	movs	r1, #0
 80004bc:	f246 0041 	movw	r0, #24641	; 0x6041
 80004c0:	f7ff fe9c 	bl	80001fc <_get_sdo_uint16>
 80004c4:	4603      	mov	r3, r0
 80004c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if (!(status & CANOPEN_SDO_VALUE_STATUS_WORD_SERVO_READY)) {
 80004ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d106      	bne.n	80004e4 <CAN_ProcessStateMachine+0x1d8>
                LogError("Wheel is not ready for position mode.");
 80004d6:	486b      	ldr	r0, [pc, #428]	; (8000684 <CAN_ProcessStateMachine+0x378>)
 80004d8:	f000 fa90 	bl	80009fc <LogError>
                currentState = STATE_ACTIVATION_FAILED;
 80004dc:	4b58      	ldr	r3, [pc, #352]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 80004de:	2206      	movs	r2, #6
 80004e0:	701a      	strb	r2, [r3, #0]
                break;
 80004e2:	e100      	b.n	80006e6 <CAN_ProcessStateMachine+0x3da>
            }

            // Установка времени разгона
            uint8_t set_acceleration_time[] = {0x23, 0x83, 0x60, 0x00, 0xE8, 0x03, 0x00, 0x00};  // 1000 мс
 80004e4:	4a68      	ldr	r2, [pc, #416]	; (8000688 <CAN_ProcessStateMachine+0x37c>)
 80004e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ee:	e883 0003 	stmia.w	r3, {r0, r1}
            send_command(set_acceleration_time, sizeof(set_acceleration_time));
 80004f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f6:	2108      	movs	r1, #8
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f999 	bl	8000830 <send_command>
            HAL_Delay(2000);
 80004fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000502:	f000 fd71 	bl	8000fe8 <HAL_Delay>

            // Установка времени торможения
            uint8_t set_deceleration_time[] = {0x23, 0x84, 0x60, 0x00, 0xE8, 0x03, 0x00, 0x00};  // 1000 мс
 8000506:	4a61      	ldr	r2, [pc, #388]	; (800068c <CAN_ProcessStateMachine+0x380>)
 8000508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800050c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000510:	e883 0003 	stmia.w	r3, {r0, r1}
            send_command(set_deceleration_time, sizeof(set_deceleration_time));
 8000514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000518:	2108      	movs	r1, #8
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f988 	bl	8000830 <send_command>
            HAL_Delay(2000);
 8000520:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000524:	f000 fd60 	bl	8000fe8 <HAL_Delay>

            // Установка максимальной скорости
            uint8_t set_max_speed[] = {0x23, 0x81, 0x60, 0x00, 0x88, 0x13, 0x00, 0x00};  // 5000 (0.1 rpm)
 8000528:	4a59      	ldr	r2, [pc, #356]	; (8000690 <CAN_ProcessStateMachine+0x384>)
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000532:	e883 0003 	stmia.w	r3, {r0, r1}
            send_command(set_max_speed, sizeof(set_max_speed));
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2108      	movs	r1, #8
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f977 	bl	8000830 <send_command>
            HAL_Delay(2000);
 8000542:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000546:	f000 fd4f 	bl	8000fe8 <HAL_Delay>

            // Установка целевой позиции на 3 оборота
            uint8_t set_target_position[] = {0x23, 0x7A, 0x60, 0x00, 0x00, 0xC0, 0x00, 0x00};  // 3 оборота
 800054a:	4a52      	ldr	r2, [pc, #328]	; (8000694 <CAN_ProcessStateMachine+0x388>)
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000554:	e883 0003 	stmia.w	r3, {r0, r1}
            send_command(set_target_position, sizeof(set_target_position));
 8000558:	f107 0318 	add.w	r3, r7, #24
 800055c:	2108      	movs	r1, #8
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f966 	bl	8000830 <send_command>
            LogMessage("Wheel target position set to 3 turns.");
 8000564:	484c      	ldr	r0, [pc, #304]	; (8000698 <CAN_ProcessStateMachine+0x38c>)
 8000566:	f000 fa2b 	bl	80009c0 <LogMessage>
            HAL_Delay(2000);
 800056a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800056e:	f000 fd3b 	bl	8000fe8 <HAL_Delay>

            // Подготовка и включение сервопривода
            uint8_t servo_preparation[] = {0x2B, 0x40, 0x60, 0x00, 0x06, 0x00};
 8000572:	4a4a      	ldr	r2, [pc, #296]	; (800069c <CAN_ProcessStateMachine+0x390>)
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800057c:	6018      	str	r0, [r3, #0]
 800057e:	3304      	adds	r3, #4
 8000580:	8019      	strh	r1, [r3, #0]
            send_command(servo_preparation, sizeof(servo_preparation));
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	2106      	movs	r1, #6
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f951 	bl	8000830 <send_command>
            HAL_Delay(2000);
 800058e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000592:	f000 fd29 	bl	8000fe8 <HAL_Delay>

            // Включение сервопривода
            uint8_t servo_enable[] = {0x2B, 0x40, 0x60, 0x00, 0x0F, 0x00};  // Полное включение
 8000596:	4a42      	ldr	r2, [pc, #264]	; (80006a0 <CAN_ProcessStateMachine+0x394>)
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a0:	6018      	str	r0, [r3, #0]
 80005a2:	3304      	adds	r3, #4
 80005a4:	8019      	strh	r1, [r3, #0]
            send_command(servo_enable, sizeof(servo_enable));
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	2106      	movs	r1, #6
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f93f 	bl	8000830 <send_command>
            HAL_Delay(2000);
 80005b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b6:	f000 fd17 	bl	8000fe8 <HAL_Delay>

            // Старт привода
            uint8_t servo_start[] = {0x2B, 0x40, 0x60, 0x00, 0x5F, 0x00};
 80005ba:	4a3a      	ldr	r2, [pc, #232]	; (80006a4 <CAN_ProcessStateMachine+0x398>)
 80005bc:	463b      	mov	r3, r7
 80005be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c2:	6018      	str	r0, [r3, #0]
 80005c4:	3304      	adds	r3, #4
 80005c6:	8019      	strh	r1, [r3, #0]
            send_command(servo_start, sizeof(servo_start));
 80005c8:	463b      	mov	r3, r7
 80005ca:	2106      	movs	r1, #6
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f92f 	bl	8000830 <send_command>
            LogMessage("Servo started for position mode.");
 80005d2:	4835      	ldr	r0, [pc, #212]	; (80006a8 <CAN_ProcessStateMachine+0x39c>)
 80005d4:	f000 f9f4 	bl	80009c0 <LogMessage>
            HAL_Delay(2000);
 80005d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005dc:	f000 fd04 	bl	8000fe8 <HAL_Delay>

            // Ожидание достижения цели
            uint32_t start_time = HAL_GetTick();
 80005e0:	f000 fcf8 	bl	8000fd4 <HAL_GetTick>
 80005e4:	64b8      	str	r0, [r7, #72]	; 0x48
            while ((HAL_GetTick() - start_time) < 15000) {
 80005e6:	e017      	b.n	8000618 <CAN_ProcessStateMachine+0x30c>
                status = _get_sdo_uint16(CANOPEN_SDO_INDEX_STATUS_WORD, CANOPEN_SDO_SUB_INDEX_STATUS_WORD);
 80005e8:	2100      	movs	r1, #0
 80005ea:	f246 0041 	movw	r0, #24641	; 0x6041
 80005ee:	f7ff fe05 	bl	80001fc <_get_sdo_uint16>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                if (status & CANOPEN_SDO_VALUE_STATUS_WORD_SERVO_RUNNING_ENABLED) {
 80005f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	2b00      	cmp	r3, #0
 8000602:	d006      	beq.n	8000612 <CAN_ProcessStateMachine+0x306>
                    LogMessage("Wheel reached target position.");
 8000604:	4829      	ldr	r0, [pc, #164]	; (80006ac <CAN_ProcessStateMachine+0x3a0>)
 8000606:	f000 f9db 	bl	80009c0 <LogMessage>
                    currentState = STATE_ACTIVATION_COMPLETE;
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 800060c:	2207      	movs	r2, #7
 800060e:	701a      	strb	r2, [r3, #0]
                    break;
 8000610:	e00b      	b.n	800062a <CAN_ProcessStateMachine+0x31e>
                }
                HAL_Delay(100);  // Периодическая проверка
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 fce8 	bl	8000fe8 <HAL_Delay>
            while ((HAL_GetTick() - start_time) < 15000) {
 8000618:	f000 fcdc 	bl	8000fd4 <HAL_GetTick>
 800061c:	4602      	mov	r2, r0
 800061e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000626:	4293      	cmp	r3, r2
 8000628:	d9de      	bls.n	80005e8 <CAN_ProcessStateMachine+0x2dc>
            }

            // Проверка на неудачу
            if (currentState != STATE_ACTIVATION_COMPLETE) {
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b07      	cmp	r3, #7
 8000630:	d058      	beq.n	80006e4 <CAN_ProcessStateMachine+0x3d8>
                LogError("Wheel failed to reach target position in time.");
 8000632:	481f      	ldr	r0, [pc, #124]	; (80006b0 <CAN_ProcessStateMachine+0x3a4>)
 8000634:	f000 f9e2 	bl	80009fc <LogError>
                currentState = STATE_ACTIVATION_FAILED;
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <CAN_ProcessStateMachine+0x334>)
 800063a:	2206      	movs	r2, #6
 800063c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800063e:	e051      	b.n	80006e4 <CAN_ProcessStateMachine+0x3d8>
 8000640:	20000078 	.word	0x20000078
 8000644:	0800394c 	.word	0x0800394c
 8000648:	0800396c 	.word	0x0800396c
 800064c:	2000007c 	.word	0x2000007c
 8000650:	0800398c 	.word	0x0800398c
 8000654:	080039b4 	.word	0x080039b4
 8000658:	080039d4 	.word	0x080039d4
 800065c:	080039d8 	.word	0x080039d8
 8000660:	080039f8 	.word	0x080039f8
 8000664:	08003a24 	.word	0x08003a24
 8000668:	08003a3c 	.word	0x08003a3c
 800066c:	08003a60 	.word	0x08003a60
 8000670:	08003a84 	.word	0x08003a84
 8000674:	08003aa0 	.word	0x08003aa0
 8000678:	08003ab8 	.word	0x08003ab8
 800067c:	08003ad8 	.word	0x08003ad8
 8000680:	08003c14 	.word	0x08003c14
 8000684:	08003b10 	.word	0x08003b10
 8000688:	08003c1c 	.word	0x08003c1c
 800068c:	08003c24 	.word	0x08003c24
 8000690:	08003c2c 	.word	0x08003c2c
 8000694:	08003c34 	.word	0x08003c34
 8000698:	08003b38 	.word	0x08003b38
 800069c:	08003c3c 	.word	0x08003c3c
 80006a0:	08003c44 	.word	0x08003c44
 80006a4:	08003c4c 	.word	0x08003c4c
 80006a8:	08003b60 	.word	0x08003b60
 80006ac:	08003b84 	.word	0x08003b84
 80006b0:	08003ba4 	.word	0x08003ba4
        }



        case STATE_ACTIVATION_FAILED:
            LogError("Activation failed.");
 80006b4:	480e      	ldr	r0, [pc, #56]	; (80006f0 <CAN_ProcessStateMachine+0x3e4>)
 80006b6:	f000 f9a1 	bl	80009fc <LogError>
            currentState = STATE_INIT;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <CAN_ProcessStateMachine+0x3e8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
            break;
 80006c0:	e011      	b.n	80006e6 <CAN_ProcessStateMachine+0x3da>

        case STATE_ACTIVATION_COMPLETE:
            LogMessage("Activation process completed successfully.");
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <CAN_ProcessStateMachine+0x3ec>)
 80006c4:	f000 f97c 	bl	80009c0 <LogMessage>
            currentState = STATE_INIT;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <CAN_ProcessStateMachine+0x3e8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
            break;
 80006ce:	e00a      	b.n	80006e6 <CAN_ProcessStateMachine+0x3da>

        default:
            break;
 80006d0:	bf00      	nop
 80006d2:	e008      	b.n	80006e6 <CAN_ProcessStateMachine+0x3da>
            break;
 80006d4:	bf00      	nop
 80006d6:	e006      	b.n	80006e6 <CAN_ProcessStateMachine+0x3da>
            break;
 80006d8:	bf00      	nop
 80006da:	e004      	b.n	80006e6 <CAN_ProcessStateMachine+0x3da>
            break;
 80006dc:	bf00      	nop
 80006de:	e002      	b.n	80006e6 <CAN_ProcessStateMachine+0x3da>
            break;
 80006e0:	bf00      	nop
 80006e2:	e000      	b.n	80006e6 <CAN_ProcessStateMachine+0x3da>
            break;
 80006e4:	bf00      	nop
    }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	08003bd4 	.word	0x08003bd4
 80006f4:	20000078 	.word	0x20000078
 80006f8:	08003be8 	.word	0x08003be8

080006fc <process_CAN_message>:


void process_CAN_message(uint16_t received_ID, uint8_t *data, uint8_t DLC) {
 80006fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fe:	b0c3      	sub	sp, #268	; 0x10c
 8000700:	af0a      	add	r7, sp, #40	; 0x28
 8000702:	4603      	mov	r3, r0
 8000704:	6139      	str	r1, [r7, #16]
 8000706:	82fb      	strh	r3, [r7, #22]
 8000708:	4613      	mov	r3, r2
 800070a:	757b      	strb	r3, [r7, #21]
    char logBuffer[200];
    snprintf(logBuffer, sizeof(logBuffer),
 800070c:	8af9      	ldrh	r1, [r7, #22]
 800070e:	7d7b      	ldrb	r3, [r7, #21]
             "Received CAN message: ID=0x%X, DLC=%d, Data=[%02X, %02X, %02X, %02X, %02X, %02X, %02X, %02X]",
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 8000714:	4614      	mov	r4, r2
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	3201      	adds	r2, #1
 800071a:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 800071c:	4615      	mov	r5, r2
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	3202      	adds	r2, #2
 8000722:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 8000724:	4616      	mov	r6, r2
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	3203      	adds	r2, #3
 800072a:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 800072c:	60fa      	str	r2, [r7, #12]
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	3204      	adds	r2, #4
 8000732:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 8000734:	60ba      	str	r2, [r7, #8]
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	3205      	adds	r2, #5
 800073a:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 800073c:	607a      	str	r2, [r7, #4]
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 800073e:	693a      	ldr	r2, [r7, #16]
 8000740:	3206      	adds	r2, #6
 8000742:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 8000744:	603a      	str	r2, [r7, #0]
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	3207      	adds	r2, #7
 800074a:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 800074c:	f107 0018 	add.w	r0, r7, #24
 8000750:	9208      	str	r2, [sp, #32]
 8000752:	f8d7 c000 	ldr.w	ip, [r7]
 8000756:	f8cd c01c 	str.w	ip, [sp, #28]
 800075a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800075e:	f8cd c018 	str.w	ip, [sp, #24]
 8000762:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8000766:	f8cd c014 	str.w	ip, [sp, #20]
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	9204      	str	r2, [sp, #16]
 800076e:	9603      	str	r6, [sp, #12]
 8000770:	9502      	str	r5, [sp, #8]
 8000772:	9401      	str	r4, [sp, #4]
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	460b      	mov	r3, r1
 8000778:	4a18      	ldr	r2, [pc, #96]	; (80007dc <process_CAN_message+0xe0>)
 800077a:	21c8      	movs	r1, #200	; 0xc8
 800077c:	f002 fba8 	bl	8002ed0 <sniprintf>
    LogMessage(logBuffer);
 8000780:	f107 0318 	add.w	r3, r7, #24
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f91b 	bl	80009c0 <LogMessage>

    if (received_ID == (LEFT_WHEEL_ID | RAW_CAN_BOOTLOADER_HEARTBEAT_ARBITRATION_CODE) &&
 800078a:	8afb      	ldrh	r3, [r7, #22]
 800078c:	f240 7203 	movw	r2, #1795	; 0x703
 8000790:	4293      	cmp	r3, r2
 8000792:	d10e      	bne.n	80007b2 <process_CAN_message+0xb6>
        memcmp(data, RAW_CAN_BOOTLOADER_HEARTBEAT_DATA, 8) == 0) {
 8000794:	2208      	movs	r2, #8
 8000796:	4912      	ldr	r1, [pc, #72]	; (80007e0 <process_CAN_message+0xe4>)
 8000798:	6938      	ldr	r0, [r7, #16]
 800079a:	f002 fbcd 	bl	8002f38 <memcmp>
 800079e:	4603      	mov	r3, r0
    if (received_ID == (LEFT_WHEEL_ID | RAW_CAN_BOOTLOADER_HEARTBEAT_ARBITRATION_CODE) &&
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d106      	bne.n	80007b2 <process_CAN_message+0xb6>
        LogMessage("Bootloader heartbeat message received.");
 80007a4:	480f      	ldr	r0, [pc, #60]	; (80007e4 <process_CAN_message+0xe8>)
 80007a6:	f000 f90b 	bl	80009c0 <LogMessage>
        heartbeat_received = 1;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <process_CAN_message+0xec>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
    else if (received_ID == (LEFT_WHEEL_ID | RAW_CAN_BOOTLOADER_HEARTBEAT_ARBITRATION_CODE) &&
             data[0] == CANOPEN_CONFIRMATION_DATA[0]) {
        LogMessage("CANopen confirmation message received.");
        canopen_confirmation_received = 1;
    }
}
 80007b0:	e00f      	b.n	80007d2 <process_CAN_message+0xd6>
    else if (received_ID == (LEFT_WHEEL_ID | RAW_CAN_BOOTLOADER_HEARTBEAT_ARBITRATION_CODE) &&
 80007b2:	8afb      	ldrh	r3, [r7, #22]
 80007b4:	f240 7203 	movw	r2, #1795	; 0x703
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d10a      	bne.n	80007d2 <process_CAN_message+0xd6>
             data[0] == CANOPEN_CONFIRMATION_DATA[0]) {
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	227f      	movs	r2, #127	; 0x7f
    else if (received_ID == (LEFT_WHEEL_ID | RAW_CAN_BOOTLOADER_HEARTBEAT_ARBITRATION_CODE) &&
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d105      	bne.n	80007d2 <process_CAN_message+0xd6>
        LogMessage("CANopen confirmation message received.");
 80007c6:	4809      	ldr	r0, [pc, #36]	; (80007ec <process_CAN_message+0xf0>)
 80007c8:	f000 f8fa 	bl	80009c0 <LogMessage>
        canopen_confirmation_received = 1;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <process_CAN_message+0xf4>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
}
 80007d2:	bf00      	nop
 80007d4:	37e4      	adds	r7, #228	; 0xe4
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007da:	bf00      	nop
 80007dc:	08003c54 	.word	0x08003c54
 80007e0:	08003e5c 	.word	0x08003e5c
 80007e4:	08003cb4 	.word	0x08003cb4
 80007e8:	20000080 	.word	0x20000080
 80007ec:	08003cdc 	.word	0x08003cdc
 80007f0:	20000081 	.word	0x20000081

080007f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    while (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80007fc:	e008      	b.n	8000810 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
        process_CAN_message(RxHeader.StdId, RxData, RxHeader.DLC);
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	b29b      	uxth	r3, r3
 8000802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff76 	bl	80006fc <process_CAN_message>
    while (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	f107 0214 	add.w	r2, r7, #20
 8000818:	2100      	movs	r1, #0
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 ff02 	bl	8001624 <HAL_CAN_GetRxMessage>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0eb      	beq.n	80007fe <HAL_CAN_RxFifo0MsgPendingCallback+0xa>
    }
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	3730      	adds	r7, #48	; 0x30
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <send_command>:

static uint8_t send_command(uint8_t *data, uint8_t len) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    TxHeader.StdId = LEFT_WHEEL_ID;
 800083c:	2303      	movs	r3, #3
 800083e:	60fb      	str	r3, [r7, #12]
    TxHeader.RTR = CAN_RTR_DATA;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
    TxHeader.DLC = len;
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	61fb      	str	r3, [r7, #28]

    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) != HAL_OK) {
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	f107 010c 	add.w	r1, r7, #12
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4817      	ldr	r0, [pc, #92]	; (80008b4 <send_command+0x84>)
 8000858:	f000 fdf2 	bl	8001440 <HAL_CAN_AddTxMessage>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d004      	beq.n	800086c <send_command+0x3c>
        LogError("Error sending command to CAN.");
 8000862:	4815      	ldr	r0, [pc, #84]	; (80008b8 <send_command+0x88>)
 8000864:	f000 f8ca 	bl	80009fc <LogError>
        return 0;
 8000868:	2300      	movs	r3, #0
 800086a:	e01f      	b.n	80008ac <send_command+0x7c>
    } else {
        LogMessage("Command sent successfully to CAN");
 800086c:	4813      	ldr	r0, [pc, #76]	; (80008bc <send_command+0x8c>)
 800086e:	f000 f8a7 	bl	80009c0 <LogMessage>
    }

    uint32_t startTime = HAL_GetTick();
 8000872:	f000 fbaf 	bl	8000fd4 <HAL_GetTick>
 8000876:	6278      	str	r0, [r7, #36]	; 0x24
    while (HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)) {
 8000878:	e00c      	b.n	8000894 <send_command+0x64>
        if (HAL_GetTick() - startTime > 500) {
 800087a:	f000 fbab 	bl	8000fd4 <HAL_GetTick>
 800087e:	4602      	mov	r2, r0
 8000880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000888:	d904      	bls.n	8000894 <send_command+0x64>
            LogError("Timeout waiting for message to be sent.");
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <send_command+0x90>)
 800088c:	f000 f8b6 	bl	80009fc <LogError>
            return 0;
 8000890:	2300      	movs	r3, #0
 8000892:	e00b      	b.n	80008ac <send_command+0x7c>
    while (HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)) {
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4619      	mov	r1, r3
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <send_command+0x84>)
 800089a:	f000 fea0 	bl	80015de <HAL_CAN_IsTxMessagePending>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1ea      	bne.n	800087a <send_command+0x4a>
        }
    }
    LogMessage("Message sent successfully from TxMailbox");
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <send_command+0x94>)
 80008a6:	f000 f88b 	bl	80009c0 <LogMessage>
    return 1;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000084 	.word	0x20000084
 80008b8:	08003d04 	.word	0x08003d04
 80008bc:	08003d24 	.word	0x08003d24
 80008c0:	08003d48 	.word	0x08003d48
 80008c4:	08003d70 	.word	0x08003d70

080008c8 <wait_for_heartbeat>:

static uint8_t wait_for_heartbeat(uint32_t timeout_ms) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();
 80008d0:	f000 fb80 	bl	8000fd4 <HAL_GetTick>
 80008d4:	60f8      	str	r0, [r7, #12]

    heartbeat_received = 0;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <wait_for_heartbeat+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
    canopen_confirmation_received = 0;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <wait_for_heartbeat+0x78>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]

    while ((HAL_GetTick() - start_time) < timeout_ms) {
 80008e2:	e01a      	b.n	800091a <wait_for_heartbeat+0x52>
        if (currentState == STATE_CONFIRM_CANOPEN_MODE && canopen_confirmation_received) {
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <wait_for_heartbeat+0x7c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b04      	cmp	r3, #4
 80008ea:	d109      	bne.n	8000900 <wait_for_heartbeat+0x38>
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <wait_for_heartbeat+0x78>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d004      	beq.n	8000900 <wait_for_heartbeat+0x38>
            LogMessage("CANopen mode confirmed.");
 80008f6:	4814      	ldr	r0, [pc, #80]	; (8000948 <wait_for_heartbeat+0x80>)
 80008f8:	f000 f862 	bl	80009c0 <LogMessage>
            return 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e018      	b.n	8000932 <wait_for_heartbeat+0x6a>
        }
        if (heartbeat_received) {
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <wait_for_heartbeat+0x74>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <wait_for_heartbeat+0x4c>
            LogMessage("Expected heartbeat received.");
 800090a:	4810      	ldr	r0, [pc, #64]	; (800094c <wait_for_heartbeat+0x84>)
 800090c:	f000 f858 	bl	80009c0 <LogMessage>
            return 1;
 8000910:	2301      	movs	r3, #1
 8000912:	e00e      	b.n	8000932 <wait_for_heartbeat+0x6a>
        }
        HAL_Delay(10);
 8000914:	200a      	movs	r0, #10
 8000916:	f000 fb67 	bl	8000fe8 <HAL_Delay>
    while ((HAL_GetTick() - start_time) < timeout_ms) {
 800091a:	f000 fb5b 	bl	8000fd4 <HAL_GetTick>
 800091e:	4602      	mov	r2, r0
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	429a      	cmp	r2, r3
 8000928:	d8dc      	bhi.n	80008e4 <wait_for_heartbeat+0x1c>
    }
    LogMessage("Timeout: heartbeat not received.");
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <wait_for_heartbeat+0x88>)
 800092c:	f000 f848 	bl	80009c0 <LogMessage>
    return 0;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000080 	.word	0x20000080
 8000940:	20000081 	.word	0x20000081
 8000944:	20000078 	.word	0x20000078
 8000948:	08003aa0 	.word	0x08003aa0
 800094c:	08003d9c 	.word	0x08003d9c
 8000950:	08003dbc 	.word	0x08003dbc

08000954 <CAN_ConfigFilter>:

static void CAN_ConfigFilter(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef FilterConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2228      	movs	r2, #40	; 0x28
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f002 faf9 	bl	8002f58 <memset>
    FilterConfig.FilterBank = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800096e:	2301      	movs	r3, #1
 8000970:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterIdHigh = 0x0000;
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
    FilterConfig.FilterIdLow = 0x0000;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
    FilterConfig.FilterMaskIdHigh = 0x0000;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
    FilterConfig.FilterMaskIdLow = 0x0000;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
    FilterConfig.FilterActivation = ENABLE;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]

    if (HAL_CAN_ConfigFilter(&hcan, &FilterConfig) != HAL_OK) {
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <CAN_ConfigFilter+0x60>)
 8000990:	f000 fc49 	bl	8001226 <HAL_CAN_ConfigFilter>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d005      	beq.n	80009a6 <CAN_ConfigFilter+0x52>
        LogError("CAN_ConfigFilter: Filter configuration failed");
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <CAN_ConfigFilter+0x64>)
 800099c:	f000 f82e 	bl	80009fc <LogError>
        Error_Handler();
 80009a0:	f000 f920 	bl	8000be4 <Error_Handler>
    } else {
        LogMessage("CAN_ConfigFilter: Filter configured successfully (all messages pass)");
    }
}
 80009a4:	e002      	b.n	80009ac <CAN_ConfigFilter+0x58>
        LogMessage("CAN_ConfigFilter: Filter configured successfully (all messages pass)");
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <CAN_ConfigFilter+0x68>)
 80009a8:	f000 f80a 	bl	80009c0 <LogMessage>
}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000084 	.word	0x20000084
 80009b8:	08003de0 	.word	0x08003de0
 80009bc:	08003e10 	.word	0x08003e10

080009c0 <LogMessage>:

void LogMessage(const char *message) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fbbf 	bl	800014c <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <LogMessage+0x34>)
 80009da:	f002 f8a5 	bl	8002b28 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	2202      	movs	r2, #2
 80009e4:	4904      	ldr	r1, [pc, #16]	; (80009f8 <LogMessage+0x38>)
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <LogMessage+0x34>)
 80009e8:	f002 f89e 	bl	8002b28 <HAL_UART_Transmit>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200000ac 	.word	0x200000ac
 80009f8:	08003e58 	.word	0x08003e58

080009fc <LogError>:

void LogError(const char *message) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
    LogMessage(message);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ffdb 	bl	80009c0 <LogMessage>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f000 fa85 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 f810 	bl	8000a3e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f000 f8b3 	bl	8000b88 <MX_GPIO_Init>
  MX_CAN_Init();
 8000a22:	f000 f851 	bl	8000ac8 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000a26:	f000 f885 	bl	8000b34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Init(); // Инициализируем CAN, вызывая функцию из can.h
 8000a2a:	f7ff fb97 	bl	800015c <CAN_Init>
     StartActivationProcess();
 8000a2e:	f7ff fbc1 	bl	80001b4 <StartActivationProcess>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      CAN_ProcessStateMachine();
 8000a32:	f7ff fc6b 	bl	800030c <CAN_ProcessStateMachine>
      HAL_Delay(10);
 8000a36:	200a      	movs	r0, #10
 8000a38:	f000 fad6 	bl	8000fe8 <HAL_Delay>
      CAN_ProcessStateMachine();
 8000a3c:	e7f9      	b.n	8000a32 <main+0x20>

08000a3e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b090      	sub	sp, #64	; 0x40
 8000a42:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	2228      	movs	r2, #40	; 0x28
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 fa83 	bl	8002f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a68:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a72:	2302      	movs	r3, #2
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fbee 	bl	8002268 <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a92:	f000 f8a7 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2102      	movs	r1, #2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fe5b 	bl	800276c <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000abc:	f000 f892 	bl	8000be4 <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3740      	adds	r7, #64	; 0x40
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_CAN_Init+0x64>)
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <MX_CAN_Init+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_CAN_Init+0x64>)
 8000ad4:	2209      	movs	r2, #9
 8000ad6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_CAN_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_CAN_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_CAN_Init+0x64>)
 8000ae6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000aea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_CAN_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_CAN_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_CAN_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_CAN_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_CAN_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_CAN_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_CAN_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_CAN_Init+0x64>)
 8000b18:	f000 fa8a 	bl	8001030 <HAL_CAN_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000b22:	f000 f85f 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000084 	.word	0x20000084
 8000b30:	40006400 	.word	0x40006400

08000b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <MX_USART2_UART_Init+0x50>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	f001 ff8c 	bl	8002a88 <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b76:	f000 f835 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000ac 	.word	0x200000ac
 8000b84:	40004400 	.word	0x40004400

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_GPIO_Init+0x58>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <MX_GPIO_Init+0x58>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	6193      	str	r3, [r2, #24]
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_GPIO_Init+0x58>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_GPIO_Init+0x58>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <MX_GPIO_Init+0x58>)
 8000bac:	f043 0320 	orr.w	r3, r3, #32
 8000bb0:	6193      	str	r3, [r2, #24]
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_GPIO_Init+0x58>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f003 0320 	and.w	r3, r3, #32
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_GPIO_Init+0x58>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <MX_GPIO_Init+0x58>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <MX_GPIO_Init+0x58>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40021000 	.word	0x40021000

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_MspInit+0x5c>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <HAL_MspInit+0x5c>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x5c>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_MspInit+0x60>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_MspInit+0x60>)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000

08000c54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a2c      	ldr	r2, [pc, #176]	; (8000d20 <HAL_CAN_MspInit+0xcc>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d151      	bne.n	8000d18 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c74:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <HAL_CAN_MspInit+0xd0>)
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	4a2a      	ldr	r2, [pc, #168]	; (8000d24 <HAL_CAN_MspInit+0xd0>)
 8000c7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c7e:	61d3      	str	r3, [r2, #28]
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <HAL_CAN_MspInit+0xd0>)
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <HAL_CAN_MspInit+0xd0>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a24      	ldr	r2, [pc, #144]	; (8000d24 <HAL_CAN_MspInit+0xd0>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <HAL_CAN_MspInit+0xd0>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ca8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481b      	ldr	r0, [pc, #108]	; (8000d28 <HAL_CAN_MspInit+0xd4>)
 8000cba:	f001 f951 	bl	8001f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4815      	ldr	r0, [pc, #84]	; (8000d28 <HAL_CAN_MspInit+0xd4>)
 8000cd4:	f001 f944 	bl	8001f60 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2013      	movs	r0, #19
 8000cde:	f001 f908 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000ce2:	2013      	movs	r0, #19
 8000ce4:	f001 f921 	bl	8001f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2014      	movs	r0, #20
 8000cee:	f001 f900 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000cf2:	2014      	movs	r0, #20
 8000cf4:	f001 f919 	bl	8001f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2015      	movs	r0, #21
 8000cfe:	f001 f8f8 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d02:	2015      	movs	r0, #21
 8000d04:	f001 f911 	bl	8001f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2016      	movs	r0, #22
 8000d0e:	f001 f8f0 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000d12:	2016      	movs	r0, #22
 8000d14:	f001 f909 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d18:	bf00      	nop
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40006400 	.word	0x40006400
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010800 	.word	0x40010800

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d12f      	bne.n	8000dac <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d56:	61d3      	str	r3, [r2, #28]
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000d90:	f001 f8e6 	bl	8001f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d94:	2308      	movs	r3, #8
 8000d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4619      	mov	r1, r3
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_UART_MspInit+0x90>)
 8000da8:	f001 f8da 	bl	8001f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40004400 	.word	0x40004400
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010800 	.word	0x40010800

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f8d3 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000e16:	f000 fd72 	bl	80018fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000084 	.word	0x20000084

08000e24 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e2a:	f000 fd68 	bl	80018fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000084 	.word	0x20000084

08000e38 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <CAN1_RX1_IRQHandler+0x10>)
 8000e3e:	f000 fd5e 	bl	80018fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000084 	.word	0x20000084

08000e4c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <CAN1_SCE_IRQHandler+0x10>)
 8000e52:	f000 fd54 	bl	80018fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000084 	.word	0x20000084

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f002 f86a 	bl	8002f68 <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20005000 	.word	0x20005000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	200000f4 	.word	0x200000f4
 8000ec8:	20000248 	.word	0x20000248

08000ecc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed8:	f7ff fff8 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ede:	490c      	ldr	r1, [pc, #48]	; (8000f10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ef4:	4c09      	ldr	r4, [pc, #36]	; (8000f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f002 f837 	bl	8002f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f06:	f7ff fd84 	bl	8000a12 <main>
  bx lr
 8000f0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f14:	08003ecc 	.word	0x08003ecc
  ldr r2, =_sbss
 8000f18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f1c:	20000244 	.word	0x20000244

08000f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_2_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x28>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x28>)
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 ffd1 	bl	8001edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fe56 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40022000 	.word	0x40022000

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 ffe9 	bl	8001f46 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 ffb1 	bl	8001ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_IncTick+0x1c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	200000f8 	.word	0x200000f8

08000fd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b02      	ldr	r3, [pc, #8]	; (8000fe4 <HAL_GetTick+0x10>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	200000f8 	.word	0x200000f8

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff fff0 	bl	8000fd4 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffe0 	bl	8000fd4 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e0ed      	b.n	800121e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fe00 	bl	8000c54 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0201 	orr.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001064:	f7ff ffb6 	bl	8000fd4 <HAL_GetTick>
 8001068:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800106a:	e012      	b.n	8001092 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800106c:	f7ff ffb2 	bl	8000fd4 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b0a      	cmp	r3, #10
 8001078:	d90b      	bls.n	8001092 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2205      	movs	r2, #5
 800108a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e0c5      	b.n	800121e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0e5      	beq.n	800106c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0202 	bic.w	r2, r2, #2
 80010ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b0:	f7ff ff90 	bl	8000fd4 <HAL_GetTick>
 80010b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010b6:	e012      	b.n	80010de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b8:	f7ff ff8c 	bl	8000fd4 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b0a      	cmp	r3, #10
 80010c4:	d90b      	bls.n	80010de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2205      	movs	r2, #5
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e09f      	b.n	800121e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1e5      	bne.n	80010b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7e1b      	ldrb	r3, [r3, #24]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d108      	bne.n	8001106 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e007      	b.n	8001116 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7e5b      	ldrb	r3, [r3, #25]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d108      	bne.n	8001130 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e007      	b.n	8001140 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800113e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7e9b      	ldrb	r3, [r3, #26]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0220 	orr.w	r2, r2, #32
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e007      	b.n	800116a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0220 	bic.w	r2, r2, #32
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7edb      	ldrb	r3, [r3, #27]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0210 	bic.w	r2, r2, #16
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e007      	b.n	8001194 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0210 	orr.w	r2, r2, #16
 8001192:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7f1b      	ldrb	r3, [r3, #28]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d108      	bne.n	80011ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0208 	orr.w	r2, r2, #8
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e007      	b.n	80011be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0208 	bic.w	r2, r2, #8
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7f5b      	ldrb	r3, [r3, #29]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d108      	bne.n	80011d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f042 0204 	orr.w	r2, r2, #4
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e007      	b.n	80011e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0204 	bic.w	r2, r2, #4
 80011e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	ea42 0103 	orr.w	r1, r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	1e5a      	subs	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001226:	b480      	push	{r7}
 8001228:	b087      	sub	sp, #28
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800123e:	7cfb      	ldrb	r3, [r7, #19]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d003      	beq.n	800124c <HAL_CAN_ConfigFilter+0x26>
 8001244:	7cfb      	ldrb	r3, [r7, #19]
 8001246:	2b02      	cmp	r3, #2
 8001248:	f040 80aa 	bne.w	80013a0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001252:	f043 0201 	orr.w	r2, r3, #1
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	2201      	movs	r2, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d123      	bne.n	80012ce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43db      	mvns	r3, r3
 8001290:	401a      	ands	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3248      	adds	r2, #72	; 0x48
 80012ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012c4:	6979      	ldr	r1, [r7, #20]
 80012c6:	3348      	adds	r3, #72	; 0x48
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	440b      	add	r3, r1
 80012cc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d122      	bne.n	800131c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	431a      	orrs	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3248      	adds	r2, #72	; 0x48
 80012fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001310:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001312:	6979      	ldr	r1, [r7, #20]
 8001314:	3348      	adds	r3, #72	; 0x48
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d109      	bne.n	8001338 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001336:	e007      	b.n	8001348 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	431a      	orrs	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d109      	bne.n	8001364 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001362:	e007      	b.n	8001374 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	431a      	orrs	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d107      	bne.n	800138c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001392:	f023 0201 	bic.w	r2, r3, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	e006      	b.n	80013ae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
  }
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d12e      	bne.n	800142a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013e4:	f7ff fdf6 	bl	8000fd4 <HAL_GetTick>
 80013e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013ea:	e012      	b.n	8001412 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013ec:	f7ff fdf2 	bl	8000fd4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b0a      	cmp	r3, #10
 80013f8:	d90b      	bls.n	8001412 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2205      	movs	r2, #5
 800140a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e012      	b.n	8001438 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e5      	bne.n	80013ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e006      	b.n	8001438 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
  }
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001454:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800145e:	7ffb      	ldrb	r3, [r7, #31]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d003      	beq.n	800146c <HAL_CAN_AddTxMessage+0x2c>
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	2b02      	cmp	r3, #2
 8001468:	f040 80ad 	bne.w	80015c6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10a      	bne.n	800148c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8095 	beq.w	80015b6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	0e1b      	lsrs	r3, r3, #24
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001496:	2201      	movs	r2, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10d      	bne.n	80014c4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014b2:	68f9      	ldr	r1, [r7, #12]
 80014b4:	6809      	ldr	r1, [r1, #0]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3318      	adds	r3, #24
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	440b      	add	r3, r1
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e00f      	b.n	80014e4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014ce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d4:	68f9      	ldr	r1, [r7, #12]
 80014d6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014d8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3318      	adds	r3, #24
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	440b      	add	r3, r1
 80014e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3318      	adds	r3, #24
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	440b      	add	r3, r1
 80014f4:	3304      	adds	r3, #4
 80014f6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	7d1b      	ldrb	r3, [r3, #20]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d111      	bne.n	8001524 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3318      	adds	r3, #24
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	3304      	adds	r3, #4
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	6811      	ldr	r1, [r2, #0]
 8001514:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3318      	adds	r3, #24
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	440b      	add	r3, r1
 8001520:	3304      	adds	r3, #4
 8001522:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3307      	adds	r3, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	061a      	lsls	r2, r3, #24
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3306      	adds	r3, #6
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3305      	adds	r3, #5
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	4313      	orrs	r3, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	3204      	adds	r2, #4
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	4610      	mov	r0, r2
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	6811      	ldr	r1, [r2, #0]
 800154c:	ea43 0200 	orr.w	r2, r3, r0
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	440b      	add	r3, r1
 8001556:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800155a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3303      	adds	r3, #3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	061a      	lsls	r2, r3, #24
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3302      	adds	r3, #2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	041b      	lsls	r3, r3, #16
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3301      	adds	r3, #1
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	4313      	orrs	r3, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	7812      	ldrb	r2, [r2, #0]
 800157c:	4610      	mov	r0, r2
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	6811      	ldr	r1, [r2, #0]
 8001582:	ea43 0200 	orr.w	r2, r3, r0
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	440b      	add	r3, r1
 800158c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001590:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3318      	adds	r3, #24
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	6811      	ldr	r1, [r2, #0]
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	3318      	adds	r3, #24
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	440b      	add	r3, r1
 80015b0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e00e      	b.n	80015d4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e006      	b.n	80015d4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
  }
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3724      	adds	r7, #36	; 0x24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80015de:	b480      	push	{r7}
 80015e0:	b085      	sub	sp, #20
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80015f4:	7afb      	ldrb	r3, [r7, #11]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d002      	beq.n	8001600 <HAL_CAN_IsTxMessagePending+0x22>
 80015fa:	7afb      	ldrb	r3, [r7, #11]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d10b      	bne.n	8001618 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	069b      	lsls	r3, r3, #26
 800160a:	401a      	ands	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	069b      	lsls	r3, r3, #26
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001614:	2301      	movs	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001618:	68fb      	ldr	r3, [r7, #12]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001638:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d003      	beq.n	8001648 <HAL_CAN_GetRxMessage+0x24>
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b02      	cmp	r3, #2
 8001644:	f040 8103 	bne.w	800184e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10e      	bne.n	800166c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d116      	bne.n	800168a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0f7      	b.n	800185c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d107      	bne.n	800168a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0e8      	b.n	800185c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	331b      	adds	r3, #27
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	4413      	add	r3, r2
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0204 	and.w	r2, r3, #4
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10c      	bne.n	80016c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	331b      	adds	r3, #27
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	4413      	add	r3, r2
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0d5b      	lsrs	r3, r3, #21
 80016b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e00b      	b.n	80016da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	331b      	adds	r3, #27
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4413      	add	r3, r2
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	331b      	adds	r3, #27
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0202 	and.w	r2, r3, #2
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	331b      	adds	r3, #27
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	4413      	add	r3, r2
 80016fc:	3304      	adds	r3, #4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2208      	movs	r2, #8
 800170c:	611a      	str	r2, [r3, #16]
 800170e:	e00b      	b.n	8001728 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	331b      	adds	r3, #27
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	3304      	adds	r3, #4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 020f 	and.w	r2, r3, #15
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	331b      	adds	r3, #27
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	4413      	add	r3, r2
 8001734:	3304      	adds	r3, #4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	b2da      	uxtb	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	331b      	adds	r3, #27
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	4413      	add	r3, r2
 800174c:	3304      	adds	r3, #4
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0a1a      	lsrs	r2, r3, #8
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0c1a      	lsrs	r2, r3, #16
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3302      	adds	r3, #2
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0e1a      	lsrs	r2, r3, #24
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	3303      	adds	r3, #3
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	3304      	adds	r3, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	4413      	add	r3, r2
 80017de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0a1a      	lsrs	r2, r3, #8
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	3305      	adds	r3, #5
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	0c1a      	lsrs	r2, r3, #16
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	3306      	adds	r3, #6
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	4413      	add	r3, r2
 8001812:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0e1a      	lsrs	r2, r3, #24
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	3307      	adds	r3, #7
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d108      	bne.n	800183a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0220 	orr.w	r2, r2, #32
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	e007      	b.n	800184a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0220 	orr.w	r2, r2, #32
 8001848:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e006      	b.n	800185c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
  }
}
 800185c:	4618      	mov	r0, r3
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800187c:	7afb      	ldrb	r3, [r7, #11]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d002      	beq.n	8001888 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001882:	7afb      	ldrb	r3, [r7, #11]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d10f      	bne.n	80018a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	e005      	b.n	80018a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d002      	beq.n	80018d2 <HAL_CAN_ActivateNotification+0x1e>
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d109      	bne.n	80018e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6959      	ldr	r1, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e006      	b.n	80018f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
  }
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b08a      	sub	sp, #40	; 0x28
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d07c      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d023      	beq.n	8001996 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f983 	bl	8001c6c <HAL_CAN_TxMailbox0CompleteCallback>
 8001966:	e016      	b.n	8001996 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	e00c      	b.n	8001996 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d004      	beq.n	8001990 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
 800198e:	e002      	b.n	8001996 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f986 	bl	8001ca2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d024      	beq.n	80019ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f962 	bl	8001c7e <HAL_CAN_TxMailbox1CompleteCallback>
 80019ba:	e016      	b.n	80019ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	e00c      	b.n	80019ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d004      	beq.n	80019e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	e002      	b.n	80019ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f965 	bl	8001cb4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d024      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f941 	bl	8001c90 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a0e:	e016      	b.n	8001a3e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
 8001a22:	e00c      	b.n	8001a3e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
 8001a36:	e002      	b.n	8001a3e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f944 	bl	8001cc6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00c      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2210      	movs	r2, #16
 8001a60:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00b      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f92a 	bl	8001cd8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7fe fea9 	bl	80007f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	f003 0320 	and.w	r3, r3, #32
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00b      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2208      	movs	r2, #8
 8001ae0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f90a 	bl	8001cfc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f8f2 	bl	8001cea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00b      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2210      	movs	r2, #16
 8001b20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f8f3 	bl	8001d0e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2208      	movs	r2, #8
 8001b42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f8eb 	bl	8001d20 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d07b      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d072      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d043      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d03e      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bcc:	2b60      	cmp	r3, #96	; 0x60
 8001bce:	d02b      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x32a>
 8001bd0:	2b60      	cmp	r3, #96	; 0x60
 8001bd2:	d82e      	bhi.n	8001c32 <HAL_CAN_IRQHandler+0x334>
 8001bd4:	2b50      	cmp	r3, #80	; 0x50
 8001bd6:	d022      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x320>
 8001bd8:	2b50      	cmp	r3, #80	; 0x50
 8001bda:	d82a      	bhi.n	8001c32 <HAL_CAN_IRQHandler+0x334>
 8001bdc:	2b40      	cmp	r3, #64	; 0x40
 8001bde:	d019      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x316>
 8001be0:	2b40      	cmp	r3, #64	; 0x40
 8001be2:	d826      	bhi.n	8001c32 <HAL_CAN_IRQHandler+0x334>
 8001be4:	2b30      	cmp	r3, #48	; 0x30
 8001be6:	d010      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x30c>
 8001be8:	2b30      	cmp	r3, #48	; 0x30
 8001bea:	d822      	bhi.n	8001c32 <HAL_CAN_IRQHandler+0x334>
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d002      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x2f8>
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d005      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bf4:	e01d      	b.n	8001c32 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bfe:	e019      	b.n	8001c34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c08:	e014      	b.n	8001c34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f043 0320 	orr.w	r3, r3, #32
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c12:	e00f      	b.n	8001c34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c1c:	e00a      	b.n	8001c34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c26:	e005      	b.n	8001c34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c30:	e000      	b.n	8001c34 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c32:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c42:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f867 	bl	8001d32 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c64:	bf00      	nop
 8001c66:	3728      	adds	r7, #40	; 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <__NVIC_GetPriorityGrouping+0x18>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f003 0307 	and.w	r3, r3, #7
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0b      	blt.n	8001dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4906      	ldr	r1, [pc, #24]	; (8001ddc <__NVIC_EnableIRQ+0x34>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	2001      	movs	r0, #1
 8001dca:	fa00 f202 	lsl.w	r2, r0, r2
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea8:	d301      	bcc.n	8001eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00f      	b.n	8001ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <SysTick_Config+0x40>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f7ff ff90 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <SysTick_Config+0x40>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <SysTick_Config+0x40>)
 8001ec8:	2207      	movs	r2, #7
 8001eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	e000e010 	.word	0xe000e010

08001edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff2d 	bl	8001d44 <__NVIC_SetPriorityGrouping>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff42 	bl	8001d8c <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff90 	bl	8001e34 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5f 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff35 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa2 	bl	8001e98 <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b08b      	sub	sp, #44	; 0x2c
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f72:	e169      	b.n	8002248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f74:	2201      	movs	r2, #1
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	f040 8158 	bne.w	8002242 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4a9a      	ldr	r2, [pc, #616]	; (8002200 <HAL_GPIO_Init+0x2a0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d05e      	beq.n	800205a <HAL_GPIO_Init+0xfa>
 8001f9c:	4a98      	ldr	r2, [pc, #608]	; (8002200 <HAL_GPIO_Init+0x2a0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d875      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fa2:	4a98      	ldr	r2, [pc, #608]	; (8002204 <HAL_GPIO_Init+0x2a4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d058      	beq.n	800205a <HAL_GPIO_Init+0xfa>
 8001fa8:	4a96      	ldr	r2, [pc, #600]	; (8002204 <HAL_GPIO_Init+0x2a4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d86f      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fae:	4a96      	ldr	r2, [pc, #600]	; (8002208 <HAL_GPIO_Init+0x2a8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d052      	beq.n	800205a <HAL_GPIO_Init+0xfa>
 8001fb4:	4a94      	ldr	r2, [pc, #592]	; (8002208 <HAL_GPIO_Init+0x2a8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d869      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fba:	4a94      	ldr	r2, [pc, #592]	; (800220c <HAL_GPIO_Init+0x2ac>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d04c      	beq.n	800205a <HAL_GPIO_Init+0xfa>
 8001fc0:	4a92      	ldr	r2, [pc, #584]	; (800220c <HAL_GPIO_Init+0x2ac>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d863      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fc6:	4a92      	ldr	r2, [pc, #584]	; (8002210 <HAL_GPIO_Init+0x2b0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d046      	beq.n	800205a <HAL_GPIO_Init+0xfa>
 8001fcc:	4a90      	ldr	r2, [pc, #576]	; (8002210 <HAL_GPIO_Init+0x2b0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d85d      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fd2:	2b12      	cmp	r3, #18
 8001fd4:	d82a      	bhi.n	800202c <HAL_GPIO_Init+0xcc>
 8001fd6:	2b12      	cmp	r3, #18
 8001fd8:	d859      	bhi.n	800208e <HAL_GPIO_Init+0x12e>
 8001fda:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <HAL_GPIO_Init+0x80>)
 8001fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe0:	0800205b 	.word	0x0800205b
 8001fe4:	08002035 	.word	0x08002035
 8001fe8:	08002047 	.word	0x08002047
 8001fec:	08002089 	.word	0x08002089
 8001ff0:	0800208f 	.word	0x0800208f
 8001ff4:	0800208f 	.word	0x0800208f
 8001ff8:	0800208f 	.word	0x0800208f
 8001ffc:	0800208f 	.word	0x0800208f
 8002000:	0800208f 	.word	0x0800208f
 8002004:	0800208f 	.word	0x0800208f
 8002008:	0800208f 	.word	0x0800208f
 800200c:	0800208f 	.word	0x0800208f
 8002010:	0800208f 	.word	0x0800208f
 8002014:	0800208f 	.word	0x0800208f
 8002018:	0800208f 	.word	0x0800208f
 800201c:	0800208f 	.word	0x0800208f
 8002020:	0800208f 	.word	0x0800208f
 8002024:	0800203d 	.word	0x0800203d
 8002028:	08002051 	.word	0x08002051
 800202c:	4a79      	ldr	r2, [pc, #484]	; (8002214 <HAL_GPIO_Init+0x2b4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002032:	e02c      	b.n	800208e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	623b      	str	r3, [r7, #32]
          break;
 800203a:	e029      	b.n	8002090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	3304      	adds	r3, #4
 8002042:	623b      	str	r3, [r7, #32]
          break;
 8002044:	e024      	b.n	8002090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	3308      	adds	r3, #8
 800204c:	623b      	str	r3, [r7, #32]
          break;
 800204e:	e01f      	b.n	8002090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	330c      	adds	r3, #12
 8002056:	623b      	str	r3, [r7, #32]
          break;
 8002058:	e01a      	b.n	8002090 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002062:	2304      	movs	r3, #4
 8002064:	623b      	str	r3, [r7, #32]
          break;
 8002066:	e013      	b.n	8002090 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d105      	bne.n	800207c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002070:	2308      	movs	r3, #8
 8002072:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	611a      	str	r2, [r3, #16]
          break;
 800207a:	e009      	b.n	8002090 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800207c:	2308      	movs	r3, #8
 800207e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	615a      	str	r2, [r3, #20]
          break;
 8002086:	e003      	b.n	8002090 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
          break;
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x130>
          break;
 800208e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2bff      	cmp	r3, #255	; 0xff
 8002094:	d801      	bhi.n	800209a <HAL_GPIO_Init+0x13a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	e001      	b.n	800209e <HAL_GPIO_Init+0x13e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3304      	adds	r3, #4
 800209e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2bff      	cmp	r3, #255	; 0xff
 80020a4:	d802      	bhi.n	80020ac <HAL_GPIO_Init+0x14c>
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	e002      	b.n	80020b2 <HAL_GPIO_Init+0x152>
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	3b08      	subs	r3, #8
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	210f      	movs	r1, #15
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	6a39      	ldr	r1, [r7, #32]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	431a      	orrs	r2, r3
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80b1 	beq.w	8002242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020e0:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <HAL_GPIO_Init+0x2b8>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4a4c      	ldr	r2, [pc, #304]	; (8002218 <HAL_GPIO_Init+0x2b8>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6193      	str	r3, [r2, #24]
 80020ec:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_GPIO_Init+0x2b8>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020f8:	4a48      	ldr	r2, [pc, #288]	; (800221c <HAL_GPIO_Init+0x2bc>)
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002104:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a40      	ldr	r2, [pc, #256]	; (8002220 <HAL_GPIO_Init+0x2c0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d013      	beq.n	800214c <HAL_GPIO_Init+0x1ec>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3f      	ldr	r2, [pc, #252]	; (8002224 <HAL_GPIO_Init+0x2c4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d00d      	beq.n	8002148 <HAL_GPIO_Init+0x1e8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3e      	ldr	r2, [pc, #248]	; (8002228 <HAL_GPIO_Init+0x2c8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d007      	beq.n	8002144 <HAL_GPIO_Init+0x1e4>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3d      	ldr	r2, [pc, #244]	; (800222c <HAL_GPIO_Init+0x2cc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_GPIO_Init+0x1e0>
 800213c:	2303      	movs	r3, #3
 800213e:	e006      	b.n	800214e <HAL_GPIO_Init+0x1ee>
 8002140:	2304      	movs	r3, #4
 8002142:	e004      	b.n	800214e <HAL_GPIO_Init+0x1ee>
 8002144:	2302      	movs	r3, #2
 8002146:	e002      	b.n	800214e <HAL_GPIO_Init+0x1ee>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_GPIO_Init+0x1ee>
 800214c:	2300      	movs	r3, #0
 800214e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002150:	f002 0203 	and.w	r2, r2, #3
 8002154:	0092      	lsls	r2, r2, #2
 8002156:	4093      	lsls	r3, r2
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800215e:	492f      	ldr	r1, [pc, #188]	; (800221c <HAL_GPIO_Init+0x2bc>)
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	492c      	ldr	r1, [pc, #176]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002186:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	43db      	mvns	r3, r3
 800218e:	4928      	ldr	r1, [pc, #160]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 8002190:	4013      	ands	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d006      	beq.n	80021ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	4922      	ldr	r1, [pc, #136]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60cb      	str	r3, [r1, #12]
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	491e      	ldr	r1, [pc, #120]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4918      	ldr	r1, [pc, #96]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	43db      	mvns	r3, r3
 80021de:	4914      	ldr	r1, [pc, #80]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d021      	beq.n	8002234 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	490e      	ldr	r1, [pc, #56]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e021      	b.n	8002242 <HAL_GPIO_Init+0x2e2>
 80021fe:	bf00      	nop
 8002200:	10320000 	.word	0x10320000
 8002204:	10310000 	.word	0x10310000
 8002208:	10220000 	.word	0x10220000
 800220c:	10210000 	.word	0x10210000
 8002210:	10120000 	.word	0x10120000
 8002214:	10110000 	.word	0x10110000
 8002218:	40021000 	.word	0x40021000
 800221c:	40010000 	.word	0x40010000
 8002220:	40010800 	.word	0x40010800
 8002224:	40010c00 	.word	0x40010c00
 8002228:	40011000 	.word	0x40011000
 800222c:	40011400 	.word	0x40011400
 8002230:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_GPIO_Init+0x304>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	43db      	mvns	r3, r3
 800223c:	4909      	ldr	r1, [pc, #36]	; (8002264 <HAL_GPIO_Init+0x304>)
 800223e:	4013      	ands	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	3301      	adds	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	f47f ae8e 	bne.w	8001f74 <HAL_GPIO_Init+0x14>
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	372c      	adds	r7, #44	; 0x2c
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e272      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8087 	beq.w	8002396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002288:	4b92      	ldr	r3, [pc, #584]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b04      	cmp	r3, #4
 8002292:	d00c      	beq.n	80022ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002294:	4b8f      	ldr	r3, [pc, #572]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d112      	bne.n	80022c6 <HAL_RCC_OscConfig+0x5e>
 80022a0:	4b8c      	ldr	r3, [pc, #560]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ac:	d10b      	bne.n	80022c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ae:	4b89      	ldr	r3, [pc, #548]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d06c      	beq.n	8002394 <HAL_RCC_OscConfig+0x12c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d168      	bne.n	8002394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e24c      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x76>
 80022d0:	4b80      	ldr	r3, [pc, #512]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a7f      	ldr	r2, [pc, #508]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	e02e      	b.n	800233c <HAL_RCC_OscConfig+0xd4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x98>
 80022e6:	4b7b      	ldr	r3, [pc, #492]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7a      	ldr	r2, [pc, #488]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b78      	ldr	r3, [pc, #480]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a77      	ldr	r2, [pc, #476]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e01d      	b.n	800233c <HAL_RCC_OscConfig+0xd4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0xbc>
 800230a:	4b72      	ldr	r3, [pc, #456]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a71      	ldr	r2, [pc, #452]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 8002310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6e      	ldr	r2, [pc, #440]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e00b      	b.n	800233c <HAL_RCC_OscConfig+0xd4>
 8002324:	4b6b      	ldr	r3, [pc, #428]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a6a      	ldr	r2, [pc, #424]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 800232a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b68      	ldr	r3, [pc, #416]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a67      	ldr	r2, [pc, #412]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 8002336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d013      	beq.n	800236c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe fe46 	bl	8000fd4 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe fe42 	bl	8000fd4 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e200      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	4b5d      	ldr	r3, [pc, #372]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0xe4>
 800236a:	e014      	b.n	8002396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fe32 	bl	8000fd4 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002374:	f7fe fe2e 	bl	8000fd4 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e1ec      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002386:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x10c>
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d063      	beq.n	800246a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a2:	4b4c      	ldr	r3, [pc, #304]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ae:	4b49      	ldr	r3, [pc, #292]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d11c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x18c>
 80023ba:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d116      	bne.n	80023f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c6:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_RCC_OscConfig+0x176>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e1c0      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023de:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4939      	ldr	r1, [pc, #228]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f2:	e03a      	b.n	800246a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d020      	beq.n	800243e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7fe fde7 	bl	8000fd4 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240a:	f7fe fde3 	bl	8000fd4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e1a1      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002428:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4927      	ldr	r1, [pc, #156]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
 800243c:	e015      	b.n	800246a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243e:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fdc6 	bl	8000fd4 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244c:	f7fe fdc2 	bl	8000fd4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e180      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245e:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d03a      	beq.n	80024ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d019      	beq.n	80024b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247e:	4b17      	ldr	r3, [pc, #92]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002484:	f7fe fda6 	bl	8000fd4 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248c:	f7fe fda2 	bl	8000fd4 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e160      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024aa:	2001      	movs	r0, #1
 80024ac:	f000 face 	bl	8002a4c <RCC_Delay>
 80024b0:	e01c      	b.n	80024ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b8:	f7fe fd8c 	bl	8000fd4 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024be:	e00f      	b.n	80024e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c0:	f7fe fd88 	bl	8000fd4 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d908      	bls.n	80024e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e146      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	42420000 	.word	0x42420000
 80024dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e0:	4b92      	ldr	r3, [pc, #584]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1e9      	bne.n	80024c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80a6 	beq.w	8002646 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fe:	4b8b      	ldr	r3, [pc, #556]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10d      	bne.n	8002526 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4a87      	ldr	r2, [pc, #540]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	61d3      	str	r3, [r2, #28]
 8002516:	4b85      	ldr	r3, [pc, #532]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	4b82      	ldr	r3, [pc, #520]	; (8002730 <HAL_RCC_OscConfig+0x4c8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d118      	bne.n	8002564 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002532:	4b7f      	ldr	r3, [pc, #508]	; (8002730 <HAL_RCC_OscConfig+0x4c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a7e      	ldr	r2, [pc, #504]	; (8002730 <HAL_RCC_OscConfig+0x4c8>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7fe fd49 	bl	8000fd4 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002546:	f7fe fd45 	bl	8000fd4 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b64      	cmp	r3, #100	; 0x64
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e103      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	4b75      	ldr	r3, [pc, #468]	; (8002730 <HAL_RCC_OscConfig+0x4c8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x312>
 800256c:	4b6f      	ldr	r3, [pc, #444]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4a6e      	ldr	r2, [pc, #440]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6213      	str	r3, [r2, #32]
 8002578:	e02d      	b.n	80025d6 <HAL_RCC_OscConfig+0x36e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x334>
 8002582:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a69      	ldr	r2, [pc, #420]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6213      	str	r3, [r2, #32]
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a66      	ldr	r2, [pc, #408]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	6213      	str	r3, [r2, #32]
 800259a:	e01c      	b.n	80025d6 <HAL_RCC_OscConfig+0x36e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d10c      	bne.n	80025be <HAL_RCC_OscConfig+0x356>
 80025a4:	4b61      	ldr	r3, [pc, #388]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4a60      	ldr	r2, [pc, #384]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	6213      	str	r3, [r2, #32]
 80025b0:	4b5e      	ldr	r3, [pc, #376]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a5d      	ldr	r2, [pc, #372]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6213      	str	r3, [r2, #32]
 80025bc:	e00b      	b.n	80025d6 <HAL_RCC_OscConfig+0x36e>
 80025be:	4b5b      	ldr	r3, [pc, #364]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4a5a      	ldr	r2, [pc, #360]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6213      	str	r3, [r2, #32]
 80025ca:	4b58      	ldr	r3, [pc, #352]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4a57      	ldr	r2, [pc, #348]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	f023 0304 	bic.w	r3, r3, #4
 80025d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d015      	beq.n	800260a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025de:	f7fe fcf9 	bl	8000fd4 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7fe fcf5 	bl	8000fd4 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0b1      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fc:	4b4b      	ldr	r3, [pc, #300]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ee      	beq.n	80025e6 <HAL_RCC_OscConfig+0x37e>
 8002608:	e014      	b.n	8002634 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7fe fce3 	bl	8000fd4 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe fcdf 	bl	8000fd4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e09b      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ee      	bne.n	8002612 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002634:	7dfb      	ldrb	r3, [r7, #23]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d105      	bne.n	8002646 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263a:	4b3c      	ldr	r3, [pc, #240]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4a3b      	ldr	r2, [pc, #236]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002644:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8087 	beq.w	800275e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002650:	4b36      	ldr	r3, [pc, #216]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d061      	beq.n	8002720 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d146      	bne.n	80026f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002664:	4b33      	ldr	r3, [pc, #204]	; (8002734 <HAL_RCC_OscConfig+0x4cc>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe fcb3 	bl	8000fd4 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe fcaf 	bl	8000fd4 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e06d      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002684:	4b29      	ldr	r3, [pc, #164]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	d108      	bne.n	80026ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	4921      	ldr	r1, [pc, #132]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ac:	4b1f      	ldr	r3, [pc, #124]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a19      	ldr	r1, [r3, #32]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	430b      	orrs	r3, r1
 80026be:	491b      	ldr	r1, [pc, #108]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x4cc>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7fe fc83 	bl	8000fd4 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe fc7f 	bl	8000fd4 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e03d      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x46a>
 80026f0:	e035      	b.n	800275e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_RCC_OscConfig+0x4cc>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fc6c 	bl	8000fd4 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe fc68 	bl	8000fd4 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e026      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x4c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x498>
 800271e:	e01e      	b.n	800275e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d107      	bne.n	8002738 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e019      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
 8002734:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_OscConfig+0x500>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	429a      	cmp	r2, r3
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000

0800276c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0d0      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d910      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b67      	ldr	r3, [pc, #412]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 0207 	bic.w	r2, r3, #7
 8002796:	4965      	ldr	r1, [pc, #404]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0b8      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c8:	4b59      	ldr	r3, [pc, #356]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4a58      	ldr	r2, [pc, #352]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e0:	4b53      	ldr	r3, [pc, #332]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a52      	ldr	r2, [pc, #328]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ec:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	494d      	ldr	r1, [pc, #308]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d040      	beq.n	800288c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d115      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e07f      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e073      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e06b      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b39      	ldr	r3, [pc, #228]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4936      	ldr	r1, [pc, #216]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800285c:	f7fe fbba 	bl	8000fd4 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7fe fbb6 	bl	8000fd4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e053      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d210      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 0207 	bic.w	r2, r3, #7
 80028a2:	4922      	ldr	r1, [pc, #136]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e032      	b.n	8002922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4916      	ldr	r1, [pc, #88]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	490e      	ldr	r1, [pc, #56]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028fa:	f000 f821 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <HAL_RCC_ClockConfig+0x1c8>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	fa22 f303 	lsr.w	r3, r2, r3
 8002912:	4a09      	ldr	r2, [pc, #36]	; (8002938 <HAL_RCC_ClockConfig+0x1cc>)
 8002914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1d0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fb18 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40022000 	.word	0x40022000
 8002930:	40021000 	.word	0x40021000
 8002934:	08003e64 	.word	0x08003e64
 8002938:	20000000 	.word	0x20000000
 800293c:	20000004 	.word	0x20000004

08002940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d002      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x30>
 800296a:	2b08      	cmp	r3, #8
 800296c:	d003      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x36>
 800296e:	e027      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002972:	613b      	str	r3, [r7, #16]
      break;
 8002974:	e027      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	0c9b      	lsrs	r3, r3, #18
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d010      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	0c5b      	lsrs	r3, r3, #17
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80029a2:	fb03 f202 	mul.w	r2, r3, r2
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e004      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a0c      	ldr	r2, [pc, #48]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	613b      	str	r3, [r7, #16]
      break;
 80029be:	e002      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80029c2:	613b      	str	r3, [r7, #16]
      break;
 80029c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c6:	693b      	ldr	r3, [r7, #16]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	007a1200 	.word	0x007a1200
 80029dc:	08003e7c 	.word	0x08003e7c
 80029e0:	08003e8c 	.word	0x08003e8c
 80029e4:	003d0900 	.word	0x003d0900

080029e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ec:	4b02      	ldr	r3, [pc, #8]	; (80029f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	20000000 	.word	0x20000000

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a00:	f7ff fff2 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4903      	ldr	r1, [pc, #12]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	08003e74 	.word	0x08003e74

08002a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a28:	f7ff ffde 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0adb      	lsrs	r3, r3, #11
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4903      	ldr	r1, [pc, #12]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	08003e74 	.word	0x08003e74

08002a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <RCC_Delay+0x34>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <RCC_Delay+0x38>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0a5b      	lsrs	r3, r3, #9
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a68:	bf00      	nop
  }
  while (Delay --);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1e5a      	subs	r2, r3, #1
 8002a6e:	60fa      	str	r2, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f9      	bne.n	8002a68 <RCC_Delay+0x1c>
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	20000000 	.word	0x20000000
 8002a84:	10624dd3 	.word	0x10624dd3

08002a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e042      	b.n	8002b20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe f93c 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2224      	movs	r2, #36	; 0x24
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f971 	bl	8002db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	; 0x28
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	4613      	mov	r3, r2
 8002b36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d175      	bne.n	8002c34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_UART_Transmit+0x2c>
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e06e      	b.n	8002c36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2221      	movs	r2, #33	; 0x21
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b66:	f7fe fa35 	bl	8000fd4 <HAL_GetTick>
 8002b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	88fa      	ldrh	r2, [r7, #6]
 8002b70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	88fa      	ldrh	r2, [r7, #6]
 8002b76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b80:	d108      	bne.n	8002b94 <HAL_UART_Transmit+0x6c>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	e003      	b.n	8002b9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b9c:	e02e      	b.n	8002bfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f848 	bl	8002c3e <UART_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e03a      	b.n	8002c36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10b      	bne.n	8002bde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	3302      	adds	r3, #2
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	e007      	b.n	8002bee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	3301      	adds	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1cb      	bne.n	8002b9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2140      	movs	r1, #64	; 0x40
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f814 	bl	8002c3e <UART_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e006      	b.n	8002c36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e000      	b.n	8002c36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4e:	e03b      	b.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d037      	beq.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c58:	f7fe f9bc 	bl	8000fd4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	6a3a      	ldr	r2, [r7, #32]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d302      	bcc.n	8002c6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e03a      	b.n	8002ce8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b80      	cmp	r3, #128	; 0x80
 8002c84:	d020      	beq.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d01d      	beq.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d116      	bne.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f81d 	bl	8002cf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2208      	movs	r2, #8
 8002cba:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e00f      	b.n	8002ce8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d0b4      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b095      	sub	sp, #84	; 0x54
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d02:	e853 3f00 	ldrex	r3, [r3]
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	330c      	adds	r3, #12
 8002d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d18:	643a      	str	r2, [r7, #64]	; 0x40
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d20:	e841 2300 	strex	r3, r2, [r1]
 8002d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e5      	bne.n	8002cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3314      	adds	r3, #20
 8002d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	e853 3f00 	ldrex	r3, [r3]
 8002d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3314      	adds	r3, #20
 8002d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e5      	bne.n	8002d2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d119      	bne.n	8002d9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f023 0310 	bic.w	r3, r3, #16
 8002d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d88:	61ba      	str	r2, [r7, #24]
 8002d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6979      	ldr	r1, [r7, #20]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	613b      	str	r3, [r7, #16]
   return(result);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e5      	bne.n	8002d68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002daa:	bf00      	nop
 8002dac:	3754      	adds	r7, #84	; 0x54
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002dee:	f023 030c 	bic.w	r3, r3, #12
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2c      	ldr	r2, [pc, #176]	; (8002ec8 <UART_SetConfig+0x114>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d103      	bne.n	8002e24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e1c:	f7ff fe02 	bl	8002a24 <HAL_RCC_GetPCLK2Freq>
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	e002      	b.n	8002e2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e24:	f7ff fdea 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8002e28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	009a      	lsls	r2, r3, #2
 8002e34:	441a      	add	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <UART_SetConfig+0x118>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	0119      	lsls	r1, r3, #4
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	009a      	lsls	r2, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e60:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <UART_SetConfig+0x118>)
 8002e62:	fba3 0302 	umull	r0, r3, r3, r2
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2064      	movs	r0, #100	; 0x64
 8002e6a:	fb00 f303 	mul.w	r3, r0, r3
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	3332      	adds	r3, #50	; 0x32
 8002e74:	4a15      	ldr	r2, [pc, #84]	; (8002ecc <UART_SetConfig+0x118>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e80:	4419      	add	r1, r3
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009a      	lsls	r2, r3, #2
 8002e8c:	441a      	add	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <UART_SetConfig+0x118>)
 8002e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2064      	movs	r0, #100	; 0x64
 8002ea2:	fb00 f303 	mul.w	r3, r0, r3
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	3332      	adds	r3, #50	; 0x32
 8002eac:	4a07      	ldr	r2, [pc, #28]	; (8002ecc <UART_SetConfig+0x118>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	440a      	add	r2, r1
 8002ebe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	51eb851f 	.word	0x51eb851f

08002ed0 <sniprintf>:
 8002ed0:	b40c      	push	{r2, r3}
 8002ed2:	b530      	push	{r4, r5, lr}
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <sniprintf+0x64>)
 8002ed6:	1e0c      	subs	r4, r1, #0
 8002ed8:	681d      	ldr	r5, [r3, #0]
 8002eda:	b09d      	sub	sp, #116	; 0x74
 8002edc:	da08      	bge.n	8002ef0 <sniprintf+0x20>
 8002ede:	238b      	movs	r3, #139	; 0x8b
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee4:	602b      	str	r3, [r5, #0]
 8002ee6:	b01d      	add	sp, #116	; 0x74
 8002ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002eec:	b002      	add	sp, #8
 8002eee:	4770      	bx	lr
 8002ef0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002ef4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002ef8:	bf0c      	ite	eq
 8002efa:	4623      	moveq	r3, r4
 8002efc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002f00:	9304      	str	r3, [sp, #16]
 8002f02:	9307      	str	r3, [sp, #28]
 8002f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f08:	9002      	str	r0, [sp, #8]
 8002f0a:	9006      	str	r0, [sp, #24]
 8002f0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002f10:	4628      	mov	r0, r5
 8002f12:	ab21      	add	r3, sp, #132	; 0x84
 8002f14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f16:	a902      	add	r1, sp, #8
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	f000 f99f 	bl	800325c <_svfiprintf_r>
 8002f1e:	1c43      	adds	r3, r0, #1
 8002f20:	bfbc      	itt	lt
 8002f22:	238b      	movlt	r3, #139	; 0x8b
 8002f24:	602b      	strlt	r3, [r5, #0]
 8002f26:	2c00      	cmp	r4, #0
 8002f28:	d0dd      	beq.n	8002ee6 <sniprintf+0x16>
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	9b02      	ldr	r3, [sp, #8]
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e7d9      	b.n	8002ee6 <sniprintf+0x16>
 8002f32:	bf00      	nop
 8002f34:	20000058 	.word	0x20000058

08002f38 <memcmp>:
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	3901      	subs	r1, #1
 8002f3c:	4402      	add	r2, r0
 8002f3e:	4290      	cmp	r0, r2
 8002f40:	d101      	bne.n	8002f46 <memcmp+0xe>
 8002f42:	2000      	movs	r0, #0
 8002f44:	e005      	b.n	8002f52 <memcmp+0x1a>
 8002f46:	7803      	ldrb	r3, [r0, #0]
 8002f48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002f4c:	42a3      	cmp	r3, r4
 8002f4e:	d001      	beq.n	8002f54 <memcmp+0x1c>
 8002f50:	1b18      	subs	r0, r3, r4
 8002f52:	bd10      	pop	{r4, pc}
 8002f54:	3001      	adds	r0, #1
 8002f56:	e7f2      	b.n	8002f3e <memcmp+0x6>

08002f58 <memset>:
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4402      	add	r2, r0
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d100      	bne.n	8002f62 <memset+0xa>
 8002f60:	4770      	bx	lr
 8002f62:	f803 1b01 	strb.w	r1, [r3], #1
 8002f66:	e7f9      	b.n	8002f5c <memset+0x4>

08002f68 <__errno>:
 8002f68:	4b01      	ldr	r3, [pc, #4]	; (8002f70 <__errno+0x8>)
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000058 	.word	0x20000058

08002f74 <__libc_init_array>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	2600      	movs	r6, #0
 8002f78:	4d0c      	ldr	r5, [pc, #48]	; (8002fac <__libc_init_array+0x38>)
 8002f7a:	4c0d      	ldr	r4, [pc, #52]	; (8002fb0 <__libc_init_array+0x3c>)
 8002f7c:	1b64      	subs	r4, r4, r5
 8002f7e:	10a4      	asrs	r4, r4, #2
 8002f80:	42a6      	cmp	r6, r4
 8002f82:	d109      	bne.n	8002f98 <__libc_init_array+0x24>
 8002f84:	f000 fc7a 	bl	800387c <_init>
 8002f88:	2600      	movs	r6, #0
 8002f8a:	4d0a      	ldr	r5, [pc, #40]	; (8002fb4 <__libc_init_array+0x40>)
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	; (8002fb8 <__libc_init_array+0x44>)
 8002f8e:	1b64      	subs	r4, r4, r5
 8002f90:	10a4      	asrs	r4, r4, #2
 8002f92:	42a6      	cmp	r6, r4
 8002f94:	d105      	bne.n	8002fa2 <__libc_init_array+0x2e>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9c:	4798      	blx	r3
 8002f9e:	3601      	adds	r6, #1
 8002fa0:	e7ee      	b.n	8002f80 <__libc_init_array+0xc>
 8002fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa6:	4798      	blx	r3
 8002fa8:	3601      	adds	r6, #1
 8002faa:	e7f2      	b.n	8002f92 <__libc_init_array+0x1e>
 8002fac:	08003ec4 	.word	0x08003ec4
 8002fb0:	08003ec4 	.word	0x08003ec4
 8002fb4:	08003ec4 	.word	0x08003ec4
 8002fb8:	08003ec8 	.word	0x08003ec8

08002fbc <__retarget_lock_acquire_recursive>:
 8002fbc:	4770      	bx	lr

08002fbe <__retarget_lock_release_recursive>:
 8002fbe:	4770      	bx	lr

08002fc0 <_free_r>:
 8002fc0:	b538      	push	{r3, r4, r5, lr}
 8002fc2:	4605      	mov	r5, r0
 8002fc4:	2900      	cmp	r1, #0
 8002fc6:	d040      	beq.n	800304a <_free_r+0x8a>
 8002fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fcc:	1f0c      	subs	r4, r1, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bfb8      	it	lt
 8002fd2:	18e4      	addlt	r4, r4, r3
 8002fd4:	f000 f8dc 	bl	8003190 <__malloc_lock>
 8002fd8:	4a1c      	ldr	r2, [pc, #112]	; (800304c <_free_r+0x8c>)
 8002fda:	6813      	ldr	r3, [r2, #0]
 8002fdc:	b933      	cbnz	r3, 8002fec <_free_r+0x2c>
 8002fde:	6063      	str	r3, [r4, #4]
 8002fe0:	6014      	str	r4, [r2, #0]
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fe8:	f000 b8d8 	b.w	800319c <__malloc_unlock>
 8002fec:	42a3      	cmp	r3, r4
 8002fee:	d908      	bls.n	8003002 <_free_r+0x42>
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	1821      	adds	r1, r4, r0
 8002ff4:	428b      	cmp	r3, r1
 8002ff6:	bf01      	itttt	eq
 8002ff8:	6819      	ldreq	r1, [r3, #0]
 8002ffa:	685b      	ldreq	r3, [r3, #4]
 8002ffc:	1809      	addeq	r1, r1, r0
 8002ffe:	6021      	streq	r1, [r4, #0]
 8003000:	e7ed      	b.n	8002fde <_free_r+0x1e>
 8003002:	461a      	mov	r2, r3
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	b10b      	cbz	r3, 800300c <_free_r+0x4c>
 8003008:	42a3      	cmp	r3, r4
 800300a:	d9fa      	bls.n	8003002 <_free_r+0x42>
 800300c:	6811      	ldr	r1, [r2, #0]
 800300e:	1850      	adds	r0, r2, r1
 8003010:	42a0      	cmp	r0, r4
 8003012:	d10b      	bne.n	800302c <_free_r+0x6c>
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	4401      	add	r1, r0
 8003018:	1850      	adds	r0, r2, r1
 800301a:	4283      	cmp	r3, r0
 800301c:	6011      	str	r1, [r2, #0]
 800301e:	d1e0      	bne.n	8002fe2 <_free_r+0x22>
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4408      	add	r0, r1
 8003026:	6010      	str	r0, [r2, #0]
 8003028:	6053      	str	r3, [r2, #4]
 800302a:	e7da      	b.n	8002fe2 <_free_r+0x22>
 800302c:	d902      	bls.n	8003034 <_free_r+0x74>
 800302e:	230c      	movs	r3, #12
 8003030:	602b      	str	r3, [r5, #0]
 8003032:	e7d6      	b.n	8002fe2 <_free_r+0x22>
 8003034:	6820      	ldr	r0, [r4, #0]
 8003036:	1821      	adds	r1, r4, r0
 8003038:	428b      	cmp	r3, r1
 800303a:	bf01      	itttt	eq
 800303c:	6819      	ldreq	r1, [r3, #0]
 800303e:	685b      	ldreq	r3, [r3, #4]
 8003040:	1809      	addeq	r1, r1, r0
 8003042:	6021      	streq	r1, [r4, #0]
 8003044:	6063      	str	r3, [r4, #4]
 8003046:	6054      	str	r4, [r2, #4]
 8003048:	e7cb      	b.n	8002fe2 <_free_r+0x22>
 800304a:	bd38      	pop	{r3, r4, r5, pc}
 800304c:	2000023c 	.word	0x2000023c

08003050 <sbrk_aligned>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4e0e      	ldr	r6, [pc, #56]	; (800308c <sbrk_aligned+0x3c>)
 8003054:	460c      	mov	r4, r1
 8003056:	6831      	ldr	r1, [r6, #0]
 8003058:	4605      	mov	r5, r0
 800305a:	b911      	cbnz	r1, 8003062 <sbrk_aligned+0x12>
 800305c:	f000 fbaa 	bl	80037b4 <_sbrk_r>
 8003060:	6030      	str	r0, [r6, #0]
 8003062:	4621      	mov	r1, r4
 8003064:	4628      	mov	r0, r5
 8003066:	f000 fba5 	bl	80037b4 <_sbrk_r>
 800306a:	1c43      	adds	r3, r0, #1
 800306c:	d00a      	beq.n	8003084 <sbrk_aligned+0x34>
 800306e:	1cc4      	adds	r4, r0, #3
 8003070:	f024 0403 	bic.w	r4, r4, #3
 8003074:	42a0      	cmp	r0, r4
 8003076:	d007      	beq.n	8003088 <sbrk_aligned+0x38>
 8003078:	1a21      	subs	r1, r4, r0
 800307a:	4628      	mov	r0, r5
 800307c:	f000 fb9a 	bl	80037b4 <_sbrk_r>
 8003080:	3001      	adds	r0, #1
 8003082:	d101      	bne.n	8003088 <sbrk_aligned+0x38>
 8003084:	f04f 34ff 	mov.w	r4, #4294967295
 8003088:	4620      	mov	r0, r4
 800308a:	bd70      	pop	{r4, r5, r6, pc}
 800308c:	20000240 	.word	0x20000240

08003090 <_malloc_r>:
 8003090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003094:	1ccd      	adds	r5, r1, #3
 8003096:	f025 0503 	bic.w	r5, r5, #3
 800309a:	3508      	adds	r5, #8
 800309c:	2d0c      	cmp	r5, #12
 800309e:	bf38      	it	cc
 80030a0:	250c      	movcc	r5, #12
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	4607      	mov	r7, r0
 80030a6:	db01      	blt.n	80030ac <_malloc_r+0x1c>
 80030a8:	42a9      	cmp	r1, r5
 80030aa:	d905      	bls.n	80030b8 <_malloc_r+0x28>
 80030ac:	230c      	movs	r3, #12
 80030ae:	2600      	movs	r6, #0
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	4630      	mov	r0, r6
 80030b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800318c <_malloc_r+0xfc>
 80030bc:	f000 f868 	bl	8003190 <__malloc_lock>
 80030c0:	f8d8 3000 	ldr.w	r3, [r8]
 80030c4:	461c      	mov	r4, r3
 80030c6:	bb5c      	cbnz	r4, 8003120 <_malloc_r+0x90>
 80030c8:	4629      	mov	r1, r5
 80030ca:	4638      	mov	r0, r7
 80030cc:	f7ff ffc0 	bl	8003050 <sbrk_aligned>
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	4604      	mov	r4, r0
 80030d4:	d155      	bne.n	8003182 <_malloc_r+0xf2>
 80030d6:	f8d8 4000 	ldr.w	r4, [r8]
 80030da:	4626      	mov	r6, r4
 80030dc:	2e00      	cmp	r6, #0
 80030de:	d145      	bne.n	800316c <_malloc_r+0xdc>
 80030e0:	2c00      	cmp	r4, #0
 80030e2:	d048      	beq.n	8003176 <_malloc_r+0xe6>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	4631      	mov	r1, r6
 80030e8:	4638      	mov	r0, r7
 80030ea:	eb04 0903 	add.w	r9, r4, r3
 80030ee:	f000 fb61 	bl	80037b4 <_sbrk_r>
 80030f2:	4581      	cmp	r9, r0
 80030f4:	d13f      	bne.n	8003176 <_malloc_r+0xe6>
 80030f6:	6821      	ldr	r1, [r4, #0]
 80030f8:	4638      	mov	r0, r7
 80030fa:	1a6d      	subs	r5, r5, r1
 80030fc:	4629      	mov	r1, r5
 80030fe:	f7ff ffa7 	bl	8003050 <sbrk_aligned>
 8003102:	3001      	adds	r0, #1
 8003104:	d037      	beq.n	8003176 <_malloc_r+0xe6>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	442b      	add	r3, r5
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	f8d8 3000 	ldr.w	r3, [r8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d038      	beq.n	8003186 <_malloc_r+0xf6>
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	42a2      	cmp	r2, r4
 8003118:	d12b      	bne.n	8003172 <_malloc_r+0xe2>
 800311a:	2200      	movs	r2, #0
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	e00f      	b.n	8003140 <_malloc_r+0xb0>
 8003120:	6822      	ldr	r2, [r4, #0]
 8003122:	1b52      	subs	r2, r2, r5
 8003124:	d41f      	bmi.n	8003166 <_malloc_r+0xd6>
 8003126:	2a0b      	cmp	r2, #11
 8003128:	d917      	bls.n	800315a <_malloc_r+0xca>
 800312a:	1961      	adds	r1, r4, r5
 800312c:	42a3      	cmp	r3, r4
 800312e:	6025      	str	r5, [r4, #0]
 8003130:	bf18      	it	ne
 8003132:	6059      	strne	r1, [r3, #4]
 8003134:	6863      	ldr	r3, [r4, #4]
 8003136:	bf08      	it	eq
 8003138:	f8c8 1000 	streq.w	r1, [r8]
 800313c:	5162      	str	r2, [r4, r5]
 800313e:	604b      	str	r3, [r1, #4]
 8003140:	4638      	mov	r0, r7
 8003142:	f104 060b 	add.w	r6, r4, #11
 8003146:	f000 f829 	bl	800319c <__malloc_unlock>
 800314a:	f026 0607 	bic.w	r6, r6, #7
 800314e:	1d23      	adds	r3, r4, #4
 8003150:	1af2      	subs	r2, r6, r3
 8003152:	d0ae      	beq.n	80030b2 <_malloc_r+0x22>
 8003154:	1b9b      	subs	r3, r3, r6
 8003156:	50a3      	str	r3, [r4, r2]
 8003158:	e7ab      	b.n	80030b2 <_malloc_r+0x22>
 800315a:	42a3      	cmp	r3, r4
 800315c:	6862      	ldr	r2, [r4, #4]
 800315e:	d1dd      	bne.n	800311c <_malloc_r+0x8c>
 8003160:	f8c8 2000 	str.w	r2, [r8]
 8003164:	e7ec      	b.n	8003140 <_malloc_r+0xb0>
 8003166:	4623      	mov	r3, r4
 8003168:	6864      	ldr	r4, [r4, #4]
 800316a:	e7ac      	b.n	80030c6 <_malloc_r+0x36>
 800316c:	4634      	mov	r4, r6
 800316e:	6876      	ldr	r6, [r6, #4]
 8003170:	e7b4      	b.n	80030dc <_malloc_r+0x4c>
 8003172:	4613      	mov	r3, r2
 8003174:	e7cc      	b.n	8003110 <_malloc_r+0x80>
 8003176:	230c      	movs	r3, #12
 8003178:	4638      	mov	r0, r7
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	f000 f80e 	bl	800319c <__malloc_unlock>
 8003180:	e797      	b.n	80030b2 <_malloc_r+0x22>
 8003182:	6025      	str	r5, [r4, #0]
 8003184:	e7dc      	b.n	8003140 <_malloc_r+0xb0>
 8003186:	605b      	str	r3, [r3, #4]
 8003188:	deff      	udf	#255	; 0xff
 800318a:	bf00      	nop
 800318c:	2000023c 	.word	0x2000023c

08003190 <__malloc_lock>:
 8003190:	4801      	ldr	r0, [pc, #4]	; (8003198 <__malloc_lock+0x8>)
 8003192:	f7ff bf13 	b.w	8002fbc <__retarget_lock_acquire_recursive>
 8003196:	bf00      	nop
 8003198:	20000238 	.word	0x20000238

0800319c <__malloc_unlock>:
 800319c:	4801      	ldr	r0, [pc, #4]	; (80031a4 <__malloc_unlock+0x8>)
 800319e:	f7ff bf0e 	b.w	8002fbe <__retarget_lock_release_recursive>
 80031a2:	bf00      	nop
 80031a4:	20000238 	.word	0x20000238

080031a8 <__ssputs_r>:
 80031a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031ac:	461f      	mov	r7, r3
 80031ae:	688e      	ldr	r6, [r1, #8]
 80031b0:	4682      	mov	sl, r0
 80031b2:	42be      	cmp	r6, r7
 80031b4:	460c      	mov	r4, r1
 80031b6:	4690      	mov	r8, r2
 80031b8:	680b      	ldr	r3, [r1, #0]
 80031ba:	d82c      	bhi.n	8003216 <__ssputs_r+0x6e>
 80031bc:	898a      	ldrh	r2, [r1, #12]
 80031be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031c2:	d026      	beq.n	8003212 <__ssputs_r+0x6a>
 80031c4:	6965      	ldr	r5, [r4, #20]
 80031c6:	6909      	ldr	r1, [r1, #16]
 80031c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031cc:	eba3 0901 	sub.w	r9, r3, r1
 80031d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031d4:	1c7b      	adds	r3, r7, #1
 80031d6:	444b      	add	r3, r9
 80031d8:	106d      	asrs	r5, r5, #1
 80031da:	429d      	cmp	r5, r3
 80031dc:	bf38      	it	cc
 80031de:	461d      	movcc	r5, r3
 80031e0:	0553      	lsls	r3, r2, #21
 80031e2:	d527      	bpl.n	8003234 <__ssputs_r+0x8c>
 80031e4:	4629      	mov	r1, r5
 80031e6:	f7ff ff53 	bl	8003090 <_malloc_r>
 80031ea:	4606      	mov	r6, r0
 80031ec:	b360      	cbz	r0, 8003248 <__ssputs_r+0xa0>
 80031ee:	464a      	mov	r2, r9
 80031f0:	6921      	ldr	r1, [r4, #16]
 80031f2:	f000 fafd 	bl	80037f0 <memcpy>
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003200:	81a3      	strh	r3, [r4, #12]
 8003202:	6126      	str	r6, [r4, #16]
 8003204:	444e      	add	r6, r9
 8003206:	6026      	str	r6, [r4, #0]
 8003208:	463e      	mov	r6, r7
 800320a:	6165      	str	r5, [r4, #20]
 800320c:	eba5 0509 	sub.w	r5, r5, r9
 8003210:	60a5      	str	r5, [r4, #8]
 8003212:	42be      	cmp	r6, r7
 8003214:	d900      	bls.n	8003218 <__ssputs_r+0x70>
 8003216:	463e      	mov	r6, r7
 8003218:	4632      	mov	r2, r6
 800321a:	4641      	mov	r1, r8
 800321c:	6820      	ldr	r0, [r4, #0]
 800321e:	f000 faaf 	bl	8003780 <memmove>
 8003222:	2000      	movs	r0, #0
 8003224:	68a3      	ldr	r3, [r4, #8]
 8003226:	1b9b      	subs	r3, r3, r6
 8003228:	60a3      	str	r3, [r4, #8]
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	4433      	add	r3, r6
 800322e:	6023      	str	r3, [r4, #0]
 8003230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003234:	462a      	mov	r2, r5
 8003236:	f000 fae9 	bl	800380c <_realloc_r>
 800323a:	4606      	mov	r6, r0
 800323c:	2800      	cmp	r0, #0
 800323e:	d1e0      	bne.n	8003202 <__ssputs_r+0x5a>
 8003240:	4650      	mov	r0, sl
 8003242:	6921      	ldr	r1, [r4, #16]
 8003244:	f7ff febc 	bl	8002fc0 <_free_r>
 8003248:	230c      	movs	r3, #12
 800324a:	f8ca 3000 	str.w	r3, [sl]
 800324e:	89a3      	ldrh	r3, [r4, #12]
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003258:	81a3      	strh	r3, [r4, #12]
 800325a:	e7e9      	b.n	8003230 <__ssputs_r+0x88>

0800325c <_svfiprintf_r>:
 800325c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003260:	4698      	mov	r8, r3
 8003262:	898b      	ldrh	r3, [r1, #12]
 8003264:	4607      	mov	r7, r0
 8003266:	061b      	lsls	r3, r3, #24
 8003268:	460d      	mov	r5, r1
 800326a:	4614      	mov	r4, r2
 800326c:	b09d      	sub	sp, #116	; 0x74
 800326e:	d50e      	bpl.n	800328e <_svfiprintf_r+0x32>
 8003270:	690b      	ldr	r3, [r1, #16]
 8003272:	b963      	cbnz	r3, 800328e <_svfiprintf_r+0x32>
 8003274:	2140      	movs	r1, #64	; 0x40
 8003276:	f7ff ff0b 	bl	8003090 <_malloc_r>
 800327a:	6028      	str	r0, [r5, #0]
 800327c:	6128      	str	r0, [r5, #16]
 800327e:	b920      	cbnz	r0, 800328a <_svfiprintf_r+0x2e>
 8003280:	230c      	movs	r3, #12
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	e0d0      	b.n	800342c <_svfiprintf_r+0x1d0>
 800328a:	2340      	movs	r3, #64	; 0x40
 800328c:	616b      	str	r3, [r5, #20]
 800328e:	2300      	movs	r3, #0
 8003290:	9309      	str	r3, [sp, #36]	; 0x24
 8003292:	2320      	movs	r3, #32
 8003294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003298:	2330      	movs	r3, #48	; 0x30
 800329a:	f04f 0901 	mov.w	r9, #1
 800329e:	f8cd 800c 	str.w	r8, [sp, #12]
 80032a2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003444 <_svfiprintf_r+0x1e8>
 80032a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032aa:	4623      	mov	r3, r4
 80032ac:	469a      	mov	sl, r3
 80032ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032b2:	b10a      	cbz	r2, 80032b8 <_svfiprintf_r+0x5c>
 80032b4:	2a25      	cmp	r2, #37	; 0x25
 80032b6:	d1f9      	bne.n	80032ac <_svfiprintf_r+0x50>
 80032b8:	ebba 0b04 	subs.w	fp, sl, r4
 80032bc:	d00b      	beq.n	80032d6 <_svfiprintf_r+0x7a>
 80032be:	465b      	mov	r3, fp
 80032c0:	4622      	mov	r2, r4
 80032c2:	4629      	mov	r1, r5
 80032c4:	4638      	mov	r0, r7
 80032c6:	f7ff ff6f 	bl	80031a8 <__ssputs_r>
 80032ca:	3001      	adds	r0, #1
 80032cc:	f000 80a9 	beq.w	8003422 <_svfiprintf_r+0x1c6>
 80032d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032d2:	445a      	add	r2, fp
 80032d4:	9209      	str	r2, [sp, #36]	; 0x24
 80032d6:	f89a 3000 	ldrb.w	r3, [sl]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80a1 	beq.w	8003422 <_svfiprintf_r+0x1c6>
 80032e0:	2300      	movs	r3, #0
 80032e2:	f04f 32ff 	mov.w	r2, #4294967295
 80032e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032ea:	f10a 0a01 	add.w	sl, sl, #1
 80032ee:	9304      	str	r3, [sp, #16]
 80032f0:	9307      	str	r3, [sp, #28]
 80032f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032f6:	931a      	str	r3, [sp, #104]	; 0x68
 80032f8:	4654      	mov	r4, sl
 80032fa:	2205      	movs	r2, #5
 80032fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003300:	4850      	ldr	r0, [pc, #320]	; (8003444 <_svfiprintf_r+0x1e8>)
 8003302:	f000 fa67 	bl	80037d4 <memchr>
 8003306:	9a04      	ldr	r2, [sp, #16]
 8003308:	b9d8      	cbnz	r0, 8003342 <_svfiprintf_r+0xe6>
 800330a:	06d0      	lsls	r0, r2, #27
 800330c:	bf44      	itt	mi
 800330e:	2320      	movmi	r3, #32
 8003310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003314:	0711      	lsls	r1, r2, #28
 8003316:	bf44      	itt	mi
 8003318:	232b      	movmi	r3, #43	; 0x2b
 800331a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800331e:	f89a 3000 	ldrb.w	r3, [sl]
 8003322:	2b2a      	cmp	r3, #42	; 0x2a
 8003324:	d015      	beq.n	8003352 <_svfiprintf_r+0xf6>
 8003326:	4654      	mov	r4, sl
 8003328:	2000      	movs	r0, #0
 800332a:	f04f 0c0a 	mov.w	ip, #10
 800332e:	9a07      	ldr	r2, [sp, #28]
 8003330:	4621      	mov	r1, r4
 8003332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003336:	3b30      	subs	r3, #48	; 0x30
 8003338:	2b09      	cmp	r3, #9
 800333a:	d94d      	bls.n	80033d8 <_svfiprintf_r+0x17c>
 800333c:	b1b0      	cbz	r0, 800336c <_svfiprintf_r+0x110>
 800333e:	9207      	str	r2, [sp, #28]
 8003340:	e014      	b.n	800336c <_svfiprintf_r+0x110>
 8003342:	eba0 0308 	sub.w	r3, r0, r8
 8003346:	fa09 f303 	lsl.w	r3, r9, r3
 800334a:	4313      	orrs	r3, r2
 800334c:	46a2      	mov	sl, r4
 800334e:	9304      	str	r3, [sp, #16]
 8003350:	e7d2      	b.n	80032f8 <_svfiprintf_r+0x9c>
 8003352:	9b03      	ldr	r3, [sp, #12]
 8003354:	1d19      	adds	r1, r3, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	9103      	str	r1, [sp, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfbb      	ittet	lt
 800335e:	425b      	neglt	r3, r3
 8003360:	f042 0202 	orrlt.w	r2, r2, #2
 8003364:	9307      	strge	r3, [sp, #28]
 8003366:	9307      	strlt	r3, [sp, #28]
 8003368:	bfb8      	it	lt
 800336a:	9204      	strlt	r2, [sp, #16]
 800336c:	7823      	ldrb	r3, [r4, #0]
 800336e:	2b2e      	cmp	r3, #46	; 0x2e
 8003370:	d10c      	bne.n	800338c <_svfiprintf_r+0x130>
 8003372:	7863      	ldrb	r3, [r4, #1]
 8003374:	2b2a      	cmp	r3, #42	; 0x2a
 8003376:	d134      	bne.n	80033e2 <_svfiprintf_r+0x186>
 8003378:	9b03      	ldr	r3, [sp, #12]
 800337a:	3402      	adds	r4, #2
 800337c:	1d1a      	adds	r2, r3, #4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	9203      	str	r2, [sp, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	bfb8      	it	lt
 8003386:	f04f 33ff 	movlt.w	r3, #4294967295
 800338a:	9305      	str	r3, [sp, #20]
 800338c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003448 <_svfiprintf_r+0x1ec>
 8003390:	2203      	movs	r2, #3
 8003392:	4650      	mov	r0, sl
 8003394:	7821      	ldrb	r1, [r4, #0]
 8003396:	f000 fa1d 	bl	80037d4 <memchr>
 800339a:	b138      	cbz	r0, 80033ac <_svfiprintf_r+0x150>
 800339c:	2240      	movs	r2, #64	; 0x40
 800339e:	9b04      	ldr	r3, [sp, #16]
 80033a0:	eba0 000a 	sub.w	r0, r0, sl
 80033a4:	4082      	lsls	r2, r0
 80033a6:	4313      	orrs	r3, r2
 80033a8:	3401      	adds	r4, #1
 80033aa:	9304      	str	r3, [sp, #16]
 80033ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033b0:	2206      	movs	r2, #6
 80033b2:	4826      	ldr	r0, [pc, #152]	; (800344c <_svfiprintf_r+0x1f0>)
 80033b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033b8:	f000 fa0c 	bl	80037d4 <memchr>
 80033bc:	2800      	cmp	r0, #0
 80033be:	d038      	beq.n	8003432 <_svfiprintf_r+0x1d6>
 80033c0:	4b23      	ldr	r3, [pc, #140]	; (8003450 <_svfiprintf_r+0x1f4>)
 80033c2:	bb1b      	cbnz	r3, 800340c <_svfiprintf_r+0x1b0>
 80033c4:	9b03      	ldr	r3, [sp, #12]
 80033c6:	3307      	adds	r3, #7
 80033c8:	f023 0307 	bic.w	r3, r3, #7
 80033cc:	3308      	adds	r3, #8
 80033ce:	9303      	str	r3, [sp, #12]
 80033d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033d2:	4433      	add	r3, r6
 80033d4:	9309      	str	r3, [sp, #36]	; 0x24
 80033d6:	e768      	b.n	80032aa <_svfiprintf_r+0x4e>
 80033d8:	460c      	mov	r4, r1
 80033da:	2001      	movs	r0, #1
 80033dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80033e0:	e7a6      	b.n	8003330 <_svfiprintf_r+0xd4>
 80033e2:	2300      	movs	r3, #0
 80033e4:	f04f 0c0a 	mov.w	ip, #10
 80033e8:	4619      	mov	r1, r3
 80033ea:	3401      	adds	r4, #1
 80033ec:	9305      	str	r3, [sp, #20]
 80033ee:	4620      	mov	r0, r4
 80033f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033f4:	3a30      	subs	r2, #48	; 0x30
 80033f6:	2a09      	cmp	r2, #9
 80033f8:	d903      	bls.n	8003402 <_svfiprintf_r+0x1a6>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0c6      	beq.n	800338c <_svfiprintf_r+0x130>
 80033fe:	9105      	str	r1, [sp, #20]
 8003400:	e7c4      	b.n	800338c <_svfiprintf_r+0x130>
 8003402:	4604      	mov	r4, r0
 8003404:	2301      	movs	r3, #1
 8003406:	fb0c 2101 	mla	r1, ip, r1, r2
 800340a:	e7f0      	b.n	80033ee <_svfiprintf_r+0x192>
 800340c:	ab03      	add	r3, sp, #12
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	462a      	mov	r2, r5
 8003412:	4638      	mov	r0, r7
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <_svfiprintf_r+0x1f8>)
 8003416:	a904      	add	r1, sp, #16
 8003418:	f3af 8000 	nop.w
 800341c:	1c42      	adds	r2, r0, #1
 800341e:	4606      	mov	r6, r0
 8003420:	d1d6      	bne.n	80033d0 <_svfiprintf_r+0x174>
 8003422:	89ab      	ldrh	r3, [r5, #12]
 8003424:	065b      	lsls	r3, r3, #25
 8003426:	f53f af2d 	bmi.w	8003284 <_svfiprintf_r+0x28>
 800342a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800342c:	b01d      	add	sp, #116	; 0x74
 800342e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003432:	ab03      	add	r3, sp, #12
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	462a      	mov	r2, r5
 8003438:	4638      	mov	r0, r7
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <_svfiprintf_r+0x1f8>)
 800343c:	a904      	add	r1, sp, #16
 800343e:	f000 f87d 	bl	800353c <_printf_i>
 8003442:	e7eb      	b.n	800341c <_svfiprintf_r+0x1c0>
 8003444:	08003e8e 	.word	0x08003e8e
 8003448:	08003e94 	.word	0x08003e94
 800344c:	08003e98 	.word	0x08003e98
 8003450:	00000000 	.word	0x00000000
 8003454:	080031a9 	.word	0x080031a9

08003458 <_printf_common>:
 8003458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800345c:	4616      	mov	r6, r2
 800345e:	4699      	mov	r9, r3
 8003460:	688a      	ldr	r2, [r1, #8]
 8003462:	690b      	ldr	r3, [r1, #16]
 8003464:	4607      	mov	r7, r0
 8003466:	4293      	cmp	r3, r2
 8003468:	bfb8      	it	lt
 800346a:	4613      	movlt	r3, r2
 800346c:	6033      	str	r3, [r6, #0]
 800346e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003472:	460c      	mov	r4, r1
 8003474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003478:	b10a      	cbz	r2, 800347e <_printf_common+0x26>
 800347a:	3301      	adds	r3, #1
 800347c:	6033      	str	r3, [r6, #0]
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	0699      	lsls	r1, r3, #26
 8003482:	bf42      	ittt	mi
 8003484:	6833      	ldrmi	r3, [r6, #0]
 8003486:	3302      	addmi	r3, #2
 8003488:	6033      	strmi	r3, [r6, #0]
 800348a:	6825      	ldr	r5, [r4, #0]
 800348c:	f015 0506 	ands.w	r5, r5, #6
 8003490:	d106      	bne.n	80034a0 <_printf_common+0x48>
 8003492:	f104 0a19 	add.w	sl, r4, #25
 8003496:	68e3      	ldr	r3, [r4, #12]
 8003498:	6832      	ldr	r2, [r6, #0]
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	42ab      	cmp	r3, r5
 800349e:	dc2b      	bgt.n	80034f8 <_printf_common+0xa0>
 80034a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034a4:	1e13      	subs	r3, r2, #0
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	bf18      	it	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	0692      	lsls	r2, r2, #26
 80034ae:	d430      	bmi.n	8003512 <_printf_common+0xba>
 80034b0:	4649      	mov	r1, r9
 80034b2:	4638      	mov	r0, r7
 80034b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034b8:	47c0      	blx	r8
 80034ba:	3001      	adds	r0, #1
 80034bc:	d023      	beq.n	8003506 <_printf_common+0xae>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	6922      	ldr	r2, [r4, #16]
 80034c2:	f003 0306 	and.w	r3, r3, #6
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	bf14      	ite	ne
 80034ca:	2500      	movne	r5, #0
 80034cc:	6833      	ldreq	r3, [r6, #0]
 80034ce:	f04f 0600 	mov.w	r6, #0
 80034d2:	bf08      	it	eq
 80034d4:	68e5      	ldreq	r5, [r4, #12]
 80034d6:	f104 041a 	add.w	r4, r4, #26
 80034da:	bf08      	it	eq
 80034dc:	1aed      	subeq	r5, r5, r3
 80034de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034e2:	bf08      	it	eq
 80034e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034e8:	4293      	cmp	r3, r2
 80034ea:	bfc4      	itt	gt
 80034ec:	1a9b      	subgt	r3, r3, r2
 80034ee:	18ed      	addgt	r5, r5, r3
 80034f0:	42b5      	cmp	r5, r6
 80034f2:	d11a      	bne.n	800352a <_printf_common+0xd2>
 80034f4:	2000      	movs	r0, #0
 80034f6:	e008      	b.n	800350a <_printf_common+0xb2>
 80034f8:	2301      	movs	r3, #1
 80034fa:	4652      	mov	r2, sl
 80034fc:	4649      	mov	r1, r9
 80034fe:	4638      	mov	r0, r7
 8003500:	47c0      	blx	r8
 8003502:	3001      	adds	r0, #1
 8003504:	d103      	bne.n	800350e <_printf_common+0xb6>
 8003506:	f04f 30ff 	mov.w	r0, #4294967295
 800350a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800350e:	3501      	adds	r5, #1
 8003510:	e7c1      	b.n	8003496 <_printf_common+0x3e>
 8003512:	2030      	movs	r0, #48	; 0x30
 8003514:	18e1      	adds	r1, r4, r3
 8003516:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003520:	4422      	add	r2, r4
 8003522:	3302      	adds	r3, #2
 8003524:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003528:	e7c2      	b.n	80034b0 <_printf_common+0x58>
 800352a:	2301      	movs	r3, #1
 800352c:	4622      	mov	r2, r4
 800352e:	4649      	mov	r1, r9
 8003530:	4638      	mov	r0, r7
 8003532:	47c0      	blx	r8
 8003534:	3001      	adds	r0, #1
 8003536:	d0e6      	beq.n	8003506 <_printf_common+0xae>
 8003538:	3601      	adds	r6, #1
 800353a:	e7d9      	b.n	80034f0 <_printf_common+0x98>

0800353c <_printf_i>:
 800353c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003540:	7e0f      	ldrb	r7, [r1, #24]
 8003542:	4691      	mov	r9, r2
 8003544:	2f78      	cmp	r7, #120	; 0x78
 8003546:	4680      	mov	r8, r0
 8003548:	460c      	mov	r4, r1
 800354a:	469a      	mov	sl, r3
 800354c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800354e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003552:	d807      	bhi.n	8003564 <_printf_i+0x28>
 8003554:	2f62      	cmp	r7, #98	; 0x62
 8003556:	d80a      	bhi.n	800356e <_printf_i+0x32>
 8003558:	2f00      	cmp	r7, #0
 800355a:	f000 80d5 	beq.w	8003708 <_printf_i+0x1cc>
 800355e:	2f58      	cmp	r7, #88	; 0x58
 8003560:	f000 80c1 	beq.w	80036e6 <_printf_i+0x1aa>
 8003564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003568:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800356c:	e03a      	b.n	80035e4 <_printf_i+0xa8>
 800356e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003572:	2b15      	cmp	r3, #21
 8003574:	d8f6      	bhi.n	8003564 <_printf_i+0x28>
 8003576:	a101      	add	r1, pc, #4	; (adr r1, 800357c <_printf_i+0x40>)
 8003578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800357c:	080035d5 	.word	0x080035d5
 8003580:	080035e9 	.word	0x080035e9
 8003584:	08003565 	.word	0x08003565
 8003588:	08003565 	.word	0x08003565
 800358c:	08003565 	.word	0x08003565
 8003590:	08003565 	.word	0x08003565
 8003594:	080035e9 	.word	0x080035e9
 8003598:	08003565 	.word	0x08003565
 800359c:	08003565 	.word	0x08003565
 80035a0:	08003565 	.word	0x08003565
 80035a4:	08003565 	.word	0x08003565
 80035a8:	080036ef 	.word	0x080036ef
 80035ac:	08003615 	.word	0x08003615
 80035b0:	080036a9 	.word	0x080036a9
 80035b4:	08003565 	.word	0x08003565
 80035b8:	08003565 	.word	0x08003565
 80035bc:	08003711 	.word	0x08003711
 80035c0:	08003565 	.word	0x08003565
 80035c4:	08003615 	.word	0x08003615
 80035c8:	08003565 	.word	0x08003565
 80035cc:	08003565 	.word	0x08003565
 80035d0:	080036b1 	.word	0x080036b1
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	1d1a      	adds	r2, r3, #4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	602a      	str	r2, [r5, #0]
 80035dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0a0      	b.n	800372a <_printf_i+0x1ee>
 80035e8:	6820      	ldr	r0, [r4, #0]
 80035ea:	682b      	ldr	r3, [r5, #0]
 80035ec:	0607      	lsls	r7, r0, #24
 80035ee:	f103 0104 	add.w	r1, r3, #4
 80035f2:	6029      	str	r1, [r5, #0]
 80035f4:	d501      	bpl.n	80035fa <_printf_i+0xbe>
 80035f6:	681e      	ldr	r6, [r3, #0]
 80035f8:	e003      	b.n	8003602 <_printf_i+0xc6>
 80035fa:	0646      	lsls	r6, r0, #25
 80035fc:	d5fb      	bpl.n	80035f6 <_printf_i+0xba>
 80035fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003602:	2e00      	cmp	r6, #0
 8003604:	da03      	bge.n	800360e <_printf_i+0xd2>
 8003606:	232d      	movs	r3, #45	; 0x2d
 8003608:	4276      	negs	r6, r6
 800360a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800360e:	230a      	movs	r3, #10
 8003610:	4859      	ldr	r0, [pc, #356]	; (8003778 <_printf_i+0x23c>)
 8003612:	e012      	b.n	800363a <_printf_i+0xfe>
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	6820      	ldr	r0, [r4, #0]
 8003618:	1d19      	adds	r1, r3, #4
 800361a:	6029      	str	r1, [r5, #0]
 800361c:	0605      	lsls	r5, r0, #24
 800361e:	d501      	bpl.n	8003624 <_printf_i+0xe8>
 8003620:	681e      	ldr	r6, [r3, #0]
 8003622:	e002      	b.n	800362a <_printf_i+0xee>
 8003624:	0641      	lsls	r1, r0, #25
 8003626:	d5fb      	bpl.n	8003620 <_printf_i+0xe4>
 8003628:	881e      	ldrh	r6, [r3, #0]
 800362a:	2f6f      	cmp	r7, #111	; 0x6f
 800362c:	bf0c      	ite	eq
 800362e:	2308      	moveq	r3, #8
 8003630:	230a      	movne	r3, #10
 8003632:	4851      	ldr	r0, [pc, #324]	; (8003778 <_printf_i+0x23c>)
 8003634:	2100      	movs	r1, #0
 8003636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800363a:	6865      	ldr	r5, [r4, #4]
 800363c:	2d00      	cmp	r5, #0
 800363e:	bfa8      	it	ge
 8003640:	6821      	ldrge	r1, [r4, #0]
 8003642:	60a5      	str	r5, [r4, #8]
 8003644:	bfa4      	itt	ge
 8003646:	f021 0104 	bicge.w	r1, r1, #4
 800364a:	6021      	strge	r1, [r4, #0]
 800364c:	b90e      	cbnz	r6, 8003652 <_printf_i+0x116>
 800364e:	2d00      	cmp	r5, #0
 8003650:	d04b      	beq.n	80036ea <_printf_i+0x1ae>
 8003652:	4615      	mov	r5, r2
 8003654:	fbb6 f1f3 	udiv	r1, r6, r3
 8003658:	fb03 6711 	mls	r7, r3, r1, r6
 800365c:	5dc7      	ldrb	r7, [r0, r7]
 800365e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003662:	4637      	mov	r7, r6
 8003664:	42bb      	cmp	r3, r7
 8003666:	460e      	mov	r6, r1
 8003668:	d9f4      	bls.n	8003654 <_printf_i+0x118>
 800366a:	2b08      	cmp	r3, #8
 800366c:	d10b      	bne.n	8003686 <_printf_i+0x14a>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	07de      	lsls	r6, r3, #31
 8003672:	d508      	bpl.n	8003686 <_printf_i+0x14a>
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	6861      	ldr	r1, [r4, #4]
 8003678:	4299      	cmp	r1, r3
 800367a:	bfde      	ittt	le
 800367c:	2330      	movle	r3, #48	; 0x30
 800367e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003682:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003686:	1b52      	subs	r2, r2, r5
 8003688:	6122      	str	r2, [r4, #16]
 800368a:	464b      	mov	r3, r9
 800368c:	4621      	mov	r1, r4
 800368e:	4640      	mov	r0, r8
 8003690:	f8cd a000 	str.w	sl, [sp]
 8003694:	aa03      	add	r2, sp, #12
 8003696:	f7ff fedf 	bl	8003458 <_printf_common>
 800369a:	3001      	adds	r0, #1
 800369c:	d14a      	bne.n	8003734 <_printf_i+0x1f8>
 800369e:	f04f 30ff 	mov.w	r0, #4294967295
 80036a2:	b004      	add	sp, #16
 80036a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	f043 0320 	orr.w	r3, r3, #32
 80036ae:	6023      	str	r3, [r4, #0]
 80036b0:	2778      	movs	r7, #120	; 0x78
 80036b2:	4832      	ldr	r0, [pc, #200]	; (800377c <_printf_i+0x240>)
 80036b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	6829      	ldr	r1, [r5, #0]
 80036bc:	061f      	lsls	r7, r3, #24
 80036be:	f851 6b04 	ldr.w	r6, [r1], #4
 80036c2:	d402      	bmi.n	80036ca <_printf_i+0x18e>
 80036c4:	065f      	lsls	r7, r3, #25
 80036c6:	bf48      	it	mi
 80036c8:	b2b6      	uxthmi	r6, r6
 80036ca:	07df      	lsls	r7, r3, #31
 80036cc:	bf48      	it	mi
 80036ce:	f043 0320 	orrmi.w	r3, r3, #32
 80036d2:	6029      	str	r1, [r5, #0]
 80036d4:	bf48      	it	mi
 80036d6:	6023      	strmi	r3, [r4, #0]
 80036d8:	b91e      	cbnz	r6, 80036e2 <_printf_i+0x1a6>
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	f023 0320 	bic.w	r3, r3, #32
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	2310      	movs	r3, #16
 80036e4:	e7a6      	b.n	8003634 <_printf_i+0xf8>
 80036e6:	4824      	ldr	r0, [pc, #144]	; (8003778 <_printf_i+0x23c>)
 80036e8:	e7e4      	b.n	80036b4 <_printf_i+0x178>
 80036ea:	4615      	mov	r5, r2
 80036ec:	e7bd      	b.n	800366a <_printf_i+0x12e>
 80036ee:	682b      	ldr	r3, [r5, #0]
 80036f0:	6826      	ldr	r6, [r4, #0]
 80036f2:	1d18      	adds	r0, r3, #4
 80036f4:	6961      	ldr	r1, [r4, #20]
 80036f6:	6028      	str	r0, [r5, #0]
 80036f8:	0635      	lsls	r5, r6, #24
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	d501      	bpl.n	8003702 <_printf_i+0x1c6>
 80036fe:	6019      	str	r1, [r3, #0]
 8003700:	e002      	b.n	8003708 <_printf_i+0x1cc>
 8003702:	0670      	lsls	r0, r6, #25
 8003704:	d5fb      	bpl.n	80036fe <_printf_i+0x1c2>
 8003706:	8019      	strh	r1, [r3, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	4615      	mov	r5, r2
 800370c:	6123      	str	r3, [r4, #16]
 800370e:	e7bc      	b.n	800368a <_printf_i+0x14e>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	2100      	movs	r1, #0
 8003714:	1d1a      	adds	r2, r3, #4
 8003716:	602a      	str	r2, [r5, #0]
 8003718:	681d      	ldr	r5, [r3, #0]
 800371a:	6862      	ldr	r2, [r4, #4]
 800371c:	4628      	mov	r0, r5
 800371e:	f000 f859 	bl	80037d4 <memchr>
 8003722:	b108      	cbz	r0, 8003728 <_printf_i+0x1ec>
 8003724:	1b40      	subs	r0, r0, r5
 8003726:	6060      	str	r0, [r4, #4]
 8003728:	6863      	ldr	r3, [r4, #4]
 800372a:	6123      	str	r3, [r4, #16]
 800372c:	2300      	movs	r3, #0
 800372e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003732:	e7aa      	b.n	800368a <_printf_i+0x14e>
 8003734:	462a      	mov	r2, r5
 8003736:	4649      	mov	r1, r9
 8003738:	4640      	mov	r0, r8
 800373a:	6923      	ldr	r3, [r4, #16]
 800373c:	47d0      	blx	sl
 800373e:	3001      	adds	r0, #1
 8003740:	d0ad      	beq.n	800369e <_printf_i+0x162>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	079b      	lsls	r3, r3, #30
 8003746:	d413      	bmi.n	8003770 <_printf_i+0x234>
 8003748:	68e0      	ldr	r0, [r4, #12]
 800374a:	9b03      	ldr	r3, [sp, #12]
 800374c:	4298      	cmp	r0, r3
 800374e:	bfb8      	it	lt
 8003750:	4618      	movlt	r0, r3
 8003752:	e7a6      	b.n	80036a2 <_printf_i+0x166>
 8003754:	2301      	movs	r3, #1
 8003756:	4632      	mov	r2, r6
 8003758:	4649      	mov	r1, r9
 800375a:	4640      	mov	r0, r8
 800375c:	47d0      	blx	sl
 800375e:	3001      	adds	r0, #1
 8003760:	d09d      	beq.n	800369e <_printf_i+0x162>
 8003762:	3501      	adds	r5, #1
 8003764:	68e3      	ldr	r3, [r4, #12]
 8003766:	9903      	ldr	r1, [sp, #12]
 8003768:	1a5b      	subs	r3, r3, r1
 800376a:	42ab      	cmp	r3, r5
 800376c:	dcf2      	bgt.n	8003754 <_printf_i+0x218>
 800376e:	e7eb      	b.n	8003748 <_printf_i+0x20c>
 8003770:	2500      	movs	r5, #0
 8003772:	f104 0619 	add.w	r6, r4, #25
 8003776:	e7f5      	b.n	8003764 <_printf_i+0x228>
 8003778:	08003e9f 	.word	0x08003e9f
 800377c:	08003eb0 	.word	0x08003eb0

08003780 <memmove>:
 8003780:	4288      	cmp	r0, r1
 8003782:	b510      	push	{r4, lr}
 8003784:	eb01 0402 	add.w	r4, r1, r2
 8003788:	d902      	bls.n	8003790 <memmove+0x10>
 800378a:	4284      	cmp	r4, r0
 800378c:	4623      	mov	r3, r4
 800378e:	d807      	bhi.n	80037a0 <memmove+0x20>
 8003790:	1e43      	subs	r3, r0, #1
 8003792:	42a1      	cmp	r1, r4
 8003794:	d008      	beq.n	80037a8 <memmove+0x28>
 8003796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800379a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800379e:	e7f8      	b.n	8003792 <memmove+0x12>
 80037a0:	4601      	mov	r1, r0
 80037a2:	4402      	add	r2, r0
 80037a4:	428a      	cmp	r2, r1
 80037a6:	d100      	bne.n	80037aa <memmove+0x2a>
 80037a8:	bd10      	pop	{r4, pc}
 80037aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037b2:	e7f7      	b.n	80037a4 <memmove+0x24>

080037b4 <_sbrk_r>:
 80037b4:	b538      	push	{r3, r4, r5, lr}
 80037b6:	2300      	movs	r3, #0
 80037b8:	4d05      	ldr	r5, [pc, #20]	; (80037d0 <_sbrk_r+0x1c>)
 80037ba:	4604      	mov	r4, r0
 80037bc:	4608      	mov	r0, r1
 80037be:	602b      	str	r3, [r5, #0]
 80037c0:	f7fd fb4e 	bl	8000e60 <_sbrk>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	d102      	bne.n	80037ce <_sbrk_r+0x1a>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	b103      	cbz	r3, 80037ce <_sbrk_r+0x1a>
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	20000234 	.word	0x20000234

080037d4 <memchr>:
 80037d4:	4603      	mov	r3, r0
 80037d6:	b510      	push	{r4, lr}
 80037d8:	b2c9      	uxtb	r1, r1
 80037da:	4402      	add	r2, r0
 80037dc:	4293      	cmp	r3, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	d101      	bne.n	80037e6 <memchr+0x12>
 80037e2:	2000      	movs	r0, #0
 80037e4:	e003      	b.n	80037ee <memchr+0x1a>
 80037e6:	7804      	ldrb	r4, [r0, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	428c      	cmp	r4, r1
 80037ec:	d1f6      	bne.n	80037dc <memchr+0x8>
 80037ee:	bd10      	pop	{r4, pc}

080037f0 <memcpy>:
 80037f0:	440a      	add	r2, r1
 80037f2:	4291      	cmp	r1, r2
 80037f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80037f8:	d100      	bne.n	80037fc <memcpy+0xc>
 80037fa:	4770      	bx	lr
 80037fc:	b510      	push	{r4, lr}
 80037fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003802:	4291      	cmp	r1, r2
 8003804:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003808:	d1f9      	bne.n	80037fe <memcpy+0xe>
 800380a:	bd10      	pop	{r4, pc}

0800380c <_realloc_r>:
 800380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003810:	4680      	mov	r8, r0
 8003812:	4614      	mov	r4, r2
 8003814:	460e      	mov	r6, r1
 8003816:	b921      	cbnz	r1, 8003822 <_realloc_r+0x16>
 8003818:	4611      	mov	r1, r2
 800381a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800381e:	f7ff bc37 	b.w	8003090 <_malloc_r>
 8003822:	b92a      	cbnz	r2, 8003830 <_realloc_r+0x24>
 8003824:	f7ff fbcc 	bl	8002fc0 <_free_r>
 8003828:	4625      	mov	r5, r4
 800382a:	4628      	mov	r0, r5
 800382c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003830:	f000 f81b 	bl	800386a <_malloc_usable_size_r>
 8003834:	4284      	cmp	r4, r0
 8003836:	4607      	mov	r7, r0
 8003838:	d802      	bhi.n	8003840 <_realloc_r+0x34>
 800383a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800383e:	d812      	bhi.n	8003866 <_realloc_r+0x5a>
 8003840:	4621      	mov	r1, r4
 8003842:	4640      	mov	r0, r8
 8003844:	f7ff fc24 	bl	8003090 <_malloc_r>
 8003848:	4605      	mov	r5, r0
 800384a:	2800      	cmp	r0, #0
 800384c:	d0ed      	beq.n	800382a <_realloc_r+0x1e>
 800384e:	42bc      	cmp	r4, r7
 8003850:	4622      	mov	r2, r4
 8003852:	4631      	mov	r1, r6
 8003854:	bf28      	it	cs
 8003856:	463a      	movcs	r2, r7
 8003858:	f7ff ffca 	bl	80037f0 <memcpy>
 800385c:	4631      	mov	r1, r6
 800385e:	4640      	mov	r0, r8
 8003860:	f7ff fbae 	bl	8002fc0 <_free_r>
 8003864:	e7e1      	b.n	800382a <_realloc_r+0x1e>
 8003866:	4635      	mov	r5, r6
 8003868:	e7df      	b.n	800382a <_realloc_r+0x1e>

0800386a <_malloc_usable_size_r>:
 800386a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800386e:	1f18      	subs	r0, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	bfbc      	itt	lt
 8003874:	580b      	ldrlt	r3, [r1, r0]
 8003876:	18c0      	addlt	r0, r0, r3
 8003878:	4770      	bx	lr
	...

0800387c <_init>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr

08003888 <_fini>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	bf00      	nop
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr
