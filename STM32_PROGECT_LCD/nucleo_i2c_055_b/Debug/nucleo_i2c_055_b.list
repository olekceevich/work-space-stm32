
nucleo_i2c_055_b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005498  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c8  080058c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080058c8  080058c8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058c8  080058c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000250  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c9f8  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dbe  00000000  00000000  0002cadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b20  00000000  00000000  0002e8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000089d  00000000  00000000  0002f3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020ad9  00000000  00000000  0002fc5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ede3  00000000  00000000  00050736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bd64e  00000000  00000000  0005f519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003620  00000000  00000000  0011cb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00120188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005610 	.word	0x08005610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005610 	.word	0x08005610

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	2007      	movs	r0, #7
 8000a1c:	f000 fa02 	bl	8000e24 <bno055_writeData>
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4619      	mov	r1, r3
 8000a36:	203d      	movs	r0, #61	; 0x3d
 8000a38:	f000 f9f4 	bl	8000e24 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d103      	bne.n	8000a4a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000a42:	2013      	movs	r0, #19
 8000a44:	f000 f9e2 	bl	8000e0c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000a48:	e002      	b.n	8000a50 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 f9de 	bl	8000e0c <bno055_delay>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff ffe3 	bl	8000a28 <bno055_setOperationMode>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000a6a:	200c      	movs	r0, #12
 8000a6c:	f7ff ffdc 	bl	8000a28 <bno055_setOperationMode>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000a78:	2120      	movs	r1, #32
 8000a7a:	203f      	movs	r0, #63	; 0x3f
 8000a7c:	f000 f9d2 	bl	8000e24 <bno055_writeData>
  bno055_delay(700);
 8000a80:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000a84:	f000 f9c2 	bl	8000e0c <bno055_delay>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  bno055_reset();
 8000a92:	f7ff ffef 	bl	8000a74 <bno055_reset>

  uint8_t id = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 fa99 	bl	8000fd8 <bno055_readData>
  if (id != BNO055_ID) {
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2ba0      	cmp	r3, #160	; 0xa0
 8000aaa:	d004      	beq.n	8000ab6 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <bno055_setup+0x4c>)
 8000ab2:	f003 fedf 	bl	8004874 <iprintf>
  }
  bno055_setPage(0);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff ffa8 	bl	8000a0c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	203f      	movs	r0, #63	; 0x3f
 8000ac0:	f000 f9b0 	bl	8000e24 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000ac4:	f7ff ffc8 	bl	8000a58 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000ac8:	200a      	movs	r0, #10
 8000aca:	f000 f99f 	bl	8000e0c <bno055_delay>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08005628 	.word	0x08005628

08000adc <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ae0:	b09e      	sub	sp, #120	; 0x78
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff ff8e 	bl	8000a0c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000af4:	2b20      	cmp	r3, #32
 8000af6:	d108      	bne.n	8000b0a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8000af8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b00:	2208      	movs	r2, #8
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fa68 	bl	8000fd8 <bno055_readData>
 8000b08:	e007      	b.n	8000b1a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8000b0a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b12:	2206      	movs	r2, #6
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fa5f 	bl	8000fd8 <bno055_readData>

  double scale = 1;
 8000b1a:	f04f 0200 	mov.w	r2, #0
 8000b1e:	4b8b      	ldr	r3, [pc, #556]	; (8000d4c <bno055_getVector+0x270>)
 8000b20:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b28:	2b0e      	cmp	r3, #14
 8000b2a:	d109      	bne.n	8000b40 <bno055_getVector+0x64>
    scale = magScale;
 8000b2c:	4b88      	ldr	r3, [pc, #544]	; (8000d50 <bno055_getVector+0x274>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fcdf 	bl	80004f4 <__aeabi_ui2d>
 8000b36:	4602      	mov	r2, r0
 8000b38:	460b      	mov	r3, r1
 8000b3a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000b3e:	e03e      	b.n	8000bbe <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d007      	beq.n	8000b58 <bno055_getVector+0x7c>
 8000b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b4c:	2b28      	cmp	r3, #40	; 0x28
 8000b4e:	d003      	beq.n	8000b58 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b54:	2b2e      	cmp	r3, #46	; 0x2e
 8000b56:	d109      	bne.n	8000b6c <bno055_getVector+0x90>
    scale = accelScale;
 8000b58:	4b7e      	ldr	r3, [pc, #504]	; (8000d54 <bno055_getVector+0x278>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fcc9 	bl	80004f4 <__aeabi_ui2d>
 8000b62:	4602      	mov	r2, r0
 8000b64:	460b      	mov	r3, r1
 8000b66:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000b6a:	e028      	b.n	8000bbe <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b70:	2b14      	cmp	r3, #20
 8000b72:	d109      	bne.n	8000b88 <bno055_getVector+0xac>
    scale = angularRateScale;
 8000b74:	4b78      	ldr	r3, [pc, #480]	; (8000d58 <bno055_getVector+0x27c>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fcbb 	bl	80004f4 <__aeabi_ui2d>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	460b      	mov	r3, r1
 8000b82:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000b86:	e01a      	b.n	8000bbe <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b8c:	2b1a      	cmp	r3, #26
 8000b8e:	d109      	bne.n	8000ba4 <bno055_getVector+0xc8>
    scale = eulerScale;
 8000b90:	4b72      	ldr	r3, [pc, #456]	; (8000d5c <bno055_getVector+0x280>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fcad 	bl	80004f4 <__aeabi_ui2d>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8000ba2:	e00c      	b.n	8000bbe <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ba8:	2b20      	cmp	r3, #32
 8000baa:	d108      	bne.n	8000bbe <bno055_getVector+0xe2>
    scale = quaScale;
 8000bac:	4b6c      	ldr	r3, [pc, #432]	; (8000d60 <bno055_getVector+0x284>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fc9f 	bl	80004f4 <__aeabi_ui2d>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 ff9a 	bl	8004b00 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bd0:	2b20      	cmp	r3, #32
 8000bd2:	d150      	bne.n	8000c76 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000bd4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fc94 	bl	8000514 <__aeabi_i2d>
 8000bec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000bf0:	f7ff fe24 	bl	800083c <__aeabi_ddiv>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000bfc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c00:	021b      	lsls	r3, r3, #8
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fc80 	bl	8000514 <__aeabi_i2d>
 8000c14:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000c18:	f7ff fe10 	bl	800083c <__aeabi_ddiv>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000c24:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000c28:	021b      	lsls	r3, r3, #8
 8000c2a:	b21a      	sxth	r2, r3
 8000c2c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc6c 	bl	8000514 <__aeabi_i2d>
 8000c3c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000c40:	f7ff fdfc 	bl	800083c <__aeabi_ddiv>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000c4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc58 	bl	8000514 <__aeabi_i2d>
 8000c64:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000c68:	f7ff fde8 	bl	800083c <__aeabi_ddiv>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8000c74:	e03b      	b.n	8000cee <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000c76:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fc43 	bl	8000514 <__aeabi_i2d>
 8000c8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000c92:	f7ff fdd3 	bl	800083c <__aeabi_ddiv>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000c9e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fc2f 	bl	8000514 <__aeabi_i2d>
 8000cb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000cba:	f7ff fdbf 	bl	800083c <__aeabi_ddiv>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000cc6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fc1b 	bl	8000514 <__aeabi_i2d>
 8000cde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000ce2:	f7ff fdab 	bl	800083c <__aeabi_ddiv>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	460b      	mov	r3, r1
 8000cea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8000cee:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000cf2:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8000cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8000d06:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000d0a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000d0e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000d12:	ec49 8b14 	vmov	d4, r8, r9
 8000d16:	ec45 4b15 	vmov	d5, r4, r5
 8000d1a:	ec41 0b16 	vmov	d6, r0, r1
 8000d1e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000d22:	eeb0 0a44 	vmov.f32	s0, s8
 8000d26:	eef0 0a64 	vmov.f32	s1, s9
 8000d2a:	eeb0 1a45 	vmov.f32	s2, s10
 8000d2e:	eef0 1a65 	vmov.f32	s3, s11
 8000d32:	eeb0 2a46 	vmov.f32	s4, s12
 8000d36:	eef0 2a66 	vmov.f32	s5, s13
 8000d3a:	eeb0 3a47 	vmov.f32	s6, s14
 8000d3e:	eef0 3a67 	vmov.f32	s7, s15
 8000d42:	3778      	adds	r7, #120	; 0x78
 8000d44:	46bd      	mov	sp, r7
 8000d46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000d4a:	bf00      	nop
 8000d4c:	3ff00000 	.word	0x3ff00000
 8000d50:	20000006 	.word	0x20000006
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000002 	.word	0x20000002
 8000d5c:	20000004 	.word	0x20000004
 8000d60:	20000008 	.word	0x20000008

08000d64 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8000d64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d68:	b090      	sub	sp, #64	; 0x40
 8000d6a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8000d6c:	201a      	movs	r0, #26
 8000d6e:	f7ff feb5 	bl	8000adc <bno055_getVector>
 8000d72:	eeb0 4a40 	vmov.f32	s8, s0
 8000d76:	eef0 4a60 	vmov.f32	s9, s1
 8000d7a:	eeb0 5a41 	vmov.f32	s10, s2
 8000d7e:	eef0 5a61 	vmov.f32	s11, s3
 8000d82:	eeb0 6a42 	vmov.f32	s12, s4
 8000d86:	eef0 6a62 	vmov.f32	s13, s5
 8000d8a:	eeb0 7a43 	vmov.f32	s14, s6
 8000d8e:	eef0 7a63 	vmov.f32	s15, s7
 8000d92:	ed87 4b08 	vstr	d4, [r7, #32]
 8000d96:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8000d9a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8000d9e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8000da2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000da6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8000daa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000dae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000db2:	ec49 8b14 	vmov	d4, r8, r9
 8000db6:	ec45 4b15 	vmov	d5, r4, r5
 8000dba:	ec41 0b16 	vmov	d6, r0, r1
 8000dbe:	ec43 2b17 	vmov	d7, r2, r3
}
 8000dc2:	eeb0 0a44 	vmov.f32	s0, s8
 8000dc6:	eef0 0a64 	vmov.f32	s1, s9
 8000dca:	eeb0 1a45 	vmov.f32	s2, s10
 8000dce:	eef0 1a65 	vmov.f32	s3, s11
 8000dd2:	eeb0 2a46 	vmov.f32	s4, s12
 8000dd6:	eef0 2a66 	vmov.f32	s5, s13
 8000dda:	eeb0 3a47 	vmov.f32	s6, s14
 8000dde:	eef0 3a67 	vmov.f32	s7, s15
 8000de2:	3740      	adds	r7, #64	; 0x40
 8000de4:	46bd      	mov	sp, r7
 8000de6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000dec <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <bno055_assignI2C+0x1c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000090 	.word	0x20000090

08000e0c <bno055_delay>:

void bno055_delay(int time) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fcb2 	bl	8001780 <HAL_Delay>
#endif
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	733b      	strb	r3, [r7, #12]
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000e3c:	4b53      	ldr	r3, [pc, #332]	; (8000f8c <bno055_writeData+0x168>)
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	f107 020c 	add.w	r2, r7, #12
 8000e44:	230a      	movs	r3, #10
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2302      	movs	r3, #2
 8000e4a:	2150      	movs	r1, #80	; 0x50
 8000e4c:	f000 ffc8 	bl	8001de0 <HAL_I2C_Master_Transmit>
 8000e50:	4603      	mov	r3, r0
 8000e52:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 8092 	beq.w	8000f80 <bno055_writeData+0x15c>
    return;
  }

  if (status == HAL_ERROR) {
 8000e5c:	7dfb      	ldrb	r3, [r7, #23]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d103      	bne.n	8000e6a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000e62:	484b      	ldr	r0, [pc, #300]	; (8000f90 <bno055_writeData+0x16c>)
 8000e64:	f003 fd6c 	bl	8004940 <puts>
 8000e68:	e012      	b.n	8000e90 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d103      	bne.n	8000e78 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000e70:	4848      	ldr	r0, [pc, #288]	; (8000f94 <bno055_writeData+0x170>)
 8000e72:	f003 fd65 	bl	8004940 <puts>
 8000e76:	e00b      	b.n	8000e90 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d103      	bne.n	8000e86 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000e7e:	4846      	ldr	r0, [pc, #280]	; (8000f98 <bno055_writeData+0x174>)
 8000e80:	f003 fd5e 	bl	8004940 <puts>
 8000e84:	e004      	b.n	8000e90 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000e86:	7dfb      	ldrb	r3, [r7, #23]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4844      	ldr	r0, [pc, #272]	; (8000f9c <bno055_writeData+0x178>)
 8000e8c:	f003 fcf2 	bl	8004874 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000e90:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <bno055_writeData+0x168>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 f9bf 	bl	8002218 <HAL_I2C_GetError>
 8000e9a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d070      	beq.n	8000f84 <bno055_writeData+0x160>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d103      	bne.n	8000eb0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000ea8:	483d      	ldr	r0, [pc, #244]	; (8000fa0 <bno055_writeData+0x17c>)
 8000eaa:	f003 fd49 	bl	8004940 <puts>
 8000eae:	e021      	b.n	8000ef4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d103      	bne.n	8000ebe <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000eb6:	483b      	ldr	r0, [pc, #236]	; (8000fa4 <bno055_writeData+0x180>)
 8000eb8:	f003 fd42 	bl	8004940 <puts>
 8000ebc:	e01a      	b.n	8000ef4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d103      	bne.n	8000ecc <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000ec4:	4838      	ldr	r0, [pc, #224]	; (8000fa8 <bno055_writeData+0x184>)
 8000ec6:	f003 fd3b 	bl	8004940 <puts>
 8000eca:	e013      	b.n	8000ef4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d103      	bne.n	8000eda <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000ed2:	4836      	ldr	r0, [pc, #216]	; (8000fac <bno055_writeData+0x188>)
 8000ed4:	f003 fd34 	bl	8004940 <puts>
 8000ed8:	e00c      	b.n	8000ef4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2b10      	cmp	r3, #16
 8000ede:	d103      	bne.n	8000ee8 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000ee0:	4833      	ldr	r0, [pc, #204]	; (8000fb0 <bno055_writeData+0x18c>)
 8000ee2:	f003 fd2d 	bl	8004940 <puts>
 8000ee6:	e005      	b.n	8000ef4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	2b20      	cmp	r3, #32
 8000eec:	d102      	bne.n	8000ef4 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000eee:	4831      	ldr	r0, [pc, #196]	; (8000fb4 <bno055_writeData+0x190>)
 8000ef0:	f003 fd26 	bl	8004940 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <bno055_writeData+0x168>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 f97f 	bl	80021fc <HAL_I2C_GetState>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d103      	bne.n	8000f10 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000f08:	482b      	ldr	r0, [pc, #172]	; (8000fb8 <bno055_writeData+0x194>)
 8000f0a:	f003 fd19 	bl	8004940 <puts>
 8000f0e:	e03a      	b.n	8000f86 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_READY) {
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	2b20      	cmp	r3, #32
 8000f14:	d103      	bne.n	8000f1e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000f16:	4828      	ldr	r0, [pc, #160]	; (8000fb8 <bno055_writeData+0x194>)
 8000f18:	f003 fd12 	bl	8004940 <puts>
 8000f1c:	e033      	b.n	8000f86 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	2b24      	cmp	r3, #36	; 0x24
 8000f22:	d103      	bne.n	8000f2c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000f24:	4825      	ldr	r0, [pc, #148]	; (8000fbc <bno055_writeData+0x198>)
 8000f26:	f003 fd0b 	bl	8004940 <puts>
 8000f2a:	e02c      	b.n	8000f86 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	2b21      	cmp	r3, #33	; 0x21
 8000f30:	d103      	bne.n	8000f3a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000f32:	4823      	ldr	r0, [pc, #140]	; (8000fc0 <bno055_writeData+0x19c>)
 8000f34:	f003 fd04 	bl	8004940 <puts>
 8000f38:	e025      	b.n	8000f86 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	2b22      	cmp	r3, #34	; 0x22
 8000f3e:	d103      	bne.n	8000f48 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000f40:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <bno055_writeData+0x1a0>)
 8000f42:	f003 fcfd 	bl	8004940 <puts>
 8000f46:	e01e      	b.n	8000f86 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	2b28      	cmp	r3, #40	; 0x28
 8000f4c:	d103      	bne.n	8000f56 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000f4e:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <bno055_writeData+0x1a4>)
 8000f50:	f003 fcf6 	bl	8004940 <puts>
 8000f54:	e017      	b.n	8000f86 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2b29      	cmp	r3, #41	; 0x29
 8000f5a:	d103      	bne.n	8000f64 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000f5c:	481b      	ldr	r0, [pc, #108]	; (8000fcc <bno055_writeData+0x1a8>)
 8000f5e:	f003 fcef 	bl	8004940 <puts>
 8000f62:	e010      	b.n	8000f86 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	2b2a      	cmp	r3, #42	; 0x2a
 8000f68:	d103      	bne.n	8000f72 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000f6a:	4819      	ldr	r0, [pc, #100]	; (8000fd0 <bno055_writeData+0x1ac>)
 8000f6c:	f003 fce8 	bl	8004940 <puts>
 8000f70:	e009      	b.n	8000f86 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b60      	cmp	r3, #96	; 0x60
 8000f76:	d106      	bne.n	8000f86 <bno055_writeData+0x162>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000f78:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <bno055_writeData+0x1b0>)
 8000f7a:	f003 fce1 	bl	8004940 <puts>
 8000f7e:	e002      	b.n	8000f86 <bno055_writeData+0x162>
    return;
 8000f80:	bf00      	nop
 8000f82:	e000      	b.n	8000f86 <bno055_writeData+0x162>
    return;
 8000f84:	bf00      	nop
  } else if (state == state == HAL_I2C_ERROR_AF) {
    printf("HAL_I2C_STATE_ERROR\r\n");
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000090 	.word	0x20000090
 8000f90:	08005664 	.word	0x08005664
 8000f94:	08005688 	.word	0x08005688
 8000f98:	080056b0 	.word	0x080056b0
 8000f9c:	080056d4 	.word	0x080056d4
 8000fa0:	080056ec 	.word	0x080056ec
 8000fa4:	08005700 	.word	0x08005700
 8000fa8:	08005714 	.word	0x08005714
 8000fac:	08005728 	.word	0x08005728
 8000fb0:	0800573c 	.word	0x0800573c
 8000fb4:	08005750 	.word	0x08005750
 8000fb8:	08005768 	.word	0x08005768
 8000fbc:	08005780 	.word	0x08005780
 8000fc0:	08005794 	.word	0x08005794
 8000fc4:	080057ac 	.word	0x080057ac
 8000fc8:	080057c4 	.word	0x080057c4
 8000fcc:	080057dc 	.word	0x080057dc
 8000fd0:	080057fc 	.word	0x080057fc
 8000fd4:	0800581c 	.word	0x0800581c

08000fd8 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <bno055_readData+0x40>)
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	1dfa      	adds	r2, r7, #7
 8000fee:	2364      	movs	r3, #100	; 0x64
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2150      	movs	r1, #80	; 0x50
 8000ff6:	f000 fef3 	bl	8001de0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <bno055_readData+0x40>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	b29b      	uxth	r3, r3
 8001002:	2264      	movs	r2, #100	; 0x64
 8001004:	9200      	str	r2, [sp, #0]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	2150      	movs	r1, #80	; 0x50
 800100a:	f001 f801 	bl	8002010 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000090 	.word	0x20000090

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001022:	f000 fb47 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001026:	f000 f83f 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102a:	f000 f905 	bl	8001238 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800102e:	f000 f8d3 	bl	80011d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001032:	f000 f893 	bl	800115c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);  // Привязываем I2C
 8001036:	481a      	ldr	r0, [pc, #104]	; (80010a0 <main+0x84>)
 8001038:	f7ff fed8 	bl	8000dec <bno055_assignI2C>
  bno055_setup();            // Настройка датчика BNO055
 800103c:	f7ff fd26 	bl	8000a8c <bno055_setup>
  bno055_setOperationModeNDOF();  // Устанавливаем режим NDOF (полная ориентация)
 8001040:	f7ff fd11 	bl	8000a66 <bno055_setOperationModeNDOF>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bno055_vector_t v = bno055_getVectorEuler();  // Получаем данные по осям
 8001044:	f7ff fe8e 	bl	8000d64 <bno055_getVectorEuler>
 8001048:	eeb0 4a40 	vmov.f32	s8, s0
 800104c:	eef0 4a60 	vmov.f32	s9, s1
 8001050:	eeb0 5a41 	vmov.f32	s10, s2
 8001054:	eef0 5a61 	vmov.f32	s11, s3
 8001058:	eeb0 6a42 	vmov.f32	s12, s4
 800105c:	eef0 6a62 	vmov.f32	s13, s5
 8001060:	eeb0 7a43 	vmov.f32	s14, s6
 8001064:	eef0 7a63 	vmov.f32	s15, s7
 8001068:	ed87 4b00 	vstr	d4, [r7]
 800106c:	ed87 5b02 	vstr	d5, [r7, #8]
 8001070:	ed87 6b04 	vstr	d6, [r7, #16]
 8001074:	ed87 7b06 	vstr	d7, [r7, #24]
	  printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);  // Выводим данные
 8001078:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800107c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001080:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001088:	e9cd 2300 	strd	r2, r3, [sp]
 800108c:	4622      	mov	r2, r4
 800108e:	462b      	mov	r3, r5
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <main+0x88>)
 8001092:	f003 fbef 	bl	8004874 <iprintf>
	  HAL_Delay(1000);  // Задержка в 1 секунду
 8001096:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109a:	f000 fb71 	bl	8001780 <HAL_Delay>
  {
 800109e:	e7d1      	b.n	8001044 <main+0x28>
 80010a0:	20000094 	.word	0x20000094
 80010a4:	08005834 	.word	0x08005834

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b096      	sub	sp, #88	; 0x58
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b2:	2228      	movs	r2, #40	; 0x28
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fd22 	bl	8004b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010de:	2302      	movs	r3, #2
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e2:	2301      	movs	r3, #1
 80010e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e6:	2310      	movs	r3, #16
 80010e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ea:	2302      	movs	r3, #2
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ee:	2300      	movs	r3, #0
 80010f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010f2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80010f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fbd5 	bl	80028ac <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001108:	f000 f8fc 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001110:	2302      	movs	r3, #2
 8001112:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2102      	movs	r1, #2
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fbfd 	bl	8003928 <HAL_RCC_ClockConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001134:	f000 f8e6 	bl	8001304 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001138:	2320      	movs	r3, #32
 800113a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fe10 	bl	8003d68 <HAL_RCCEx_PeriphCLKConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800114e:	f000 f8d9 	bl	8001304 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	3758      	adds	r7, #88	; 0x58
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_I2C1_Init+0x74>)
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <MX_I2C1_Init+0x78>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_I2C1_Init+0x74>)
 8001168:	f240 220b 	movw	r2, #523	; 0x20b
 800116c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_I2C1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_I2C1_Init+0x74>)
 8001176:	2201      	movs	r2, #1
 8001178:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_I2C1_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_I2C1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_I2C1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_I2C1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_I2C1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_I2C1_Init+0x74>)
 800119a:	f000 fd85 	bl	8001ca8 <HAL_I2C_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 f8ae 	bl	8001304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011a8:	2100      	movs	r1, #0
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <MX_I2C1_Init+0x74>)
 80011ac:	f001 fae6 	bl	800277c <HAL_I2CEx_ConfigAnalogFilter>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011b6:	f000 f8a5 	bl	8001304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_I2C1_Init+0x74>)
 80011be:	f001 fb28 	bl	8002812 <HAL_I2CEx_ConfigDigitalFilter>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011c8:	f000 f89c 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000094 	.word	0x20000094
 80011d4:	40005400 	.word	0x40005400

080011d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_USART2_UART_Init+0x58>)
 80011de:	4a15      	ldr	r2, [pc, #84]	; (8001234 <MX_USART2_UART_Init+0x5c>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_USART2_UART_Init+0x58>)
 80011e4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART2_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_USART2_UART_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART2_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART2_UART_Init+0x58>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART2_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART2_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART2_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART2_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART2_UART_Init+0x58>)
 800121c:	f002 feda 	bl	8003fd4 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001226:	f000 f86d 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200000e8 	.word	0x200000e8
 8001234:	40004400 	.word	0x40004400

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <MX_GPIO_Init+0xc4>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a2a      	ldr	r2, [pc, #168]	; (80012fc <MX_GPIO_Init+0xc4>)
 8001254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001258:	6153      	str	r3, [r2, #20]
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <MX_GPIO_Init+0xc4>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <MX_GPIO_Init+0xc4>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a24      	ldr	r2, [pc, #144]	; (80012fc <MX_GPIO_Init+0xc4>)
 800126c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <MX_GPIO_Init+0xc4>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_GPIO_Init+0xc4>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <MX_GPIO_Init+0xc4>)
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	6153      	str	r3, [r2, #20]
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_GPIO_Init+0xc4>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_GPIO_Init+0xc4>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a18      	ldr	r2, [pc, #96]	; (80012fc <MX_GPIO_Init+0xc4>)
 800129c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a0:	6153      	str	r3, [r2, #20]
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_GPIO_Init+0xc4>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2120      	movs	r1, #32
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f000 fcdf 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <MX_GPIO_Init+0xc8>)
 80012d2:	f000 fb5f 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012d6:	2320      	movs	r3, #32
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f0:	f000 fb50 	bl	8001994 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000800 	.word	0x48000800

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_MspInit+0x44>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <HAL_MspInit+0x44>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6193      	str	r3, [r2, #24]
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_MspInit+0x44>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_MspInit+0x44>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_MspInit+0x44>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_MspInit+0x44>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001346:	2007      	movs	r0, #7
 8001348:	f000 faf0 	bl	800192c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a26      	ldr	r2, [pc, #152]	; (8001410 <HAL_I2C_MspInit+0xb8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d145      	bne.n	8001406 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_I2C_MspInit+0xbc>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a25      	ldr	r2, [pc, #148]	; (8001414 <HAL_I2C_MspInit+0xbc>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	6153      	str	r3, [r2, #20]
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_I2C_MspInit+0xbc>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_I2C_MspInit+0xbc>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <HAL_I2C_MspInit+0xbc>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	6153      	str	r3, [r2, #20]
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_I2C_MspInit+0xbc>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b0:	2312      	movs	r3, #18
 80013b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013bc:	2304      	movs	r3, #4
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f000 fae3 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d2:	2312      	movs	r3, #18
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013de:	2304      	movs	r3, #4
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	480b      	ldr	r0, [pc, #44]	; (8001418 <HAL_I2C_MspInit+0xc0>)
 80013ea:	f000 fad3 	bl	8001994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_I2C_MspInit+0xbc>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_I2C_MspInit+0xbc>)
 80013f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_I2C_MspInit+0xbc>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40005400 	.word	0x40005400
 8001414:	40021000 	.word	0x40021000
 8001418:	48000400 	.word	0x48000400

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_UART_MspInit+0x7c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d128      	bne.n	8001490 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_UART_MspInit+0x80>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a16      	ldr	r2, [pc, #88]	; (800149c <HAL_UART_MspInit+0x80>)
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_UART_MspInit+0x80>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_UART_MspInit+0x80>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <HAL_UART_MspInit+0x80>)
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	6153      	str	r3, [r2, #20]
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_UART_MspInit+0x80>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800146e:	230c      	movs	r3, #12
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800147e:	2307      	movs	r3, #7
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148c:	f000 fa82 	bl	8001994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	; 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40004400 	.word	0x40004400
 800149c:	40021000 	.word	0x40021000

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ec:	f000 f928 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e00a      	b.n	800151c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001506:	f3af 8000 	nop.w
 800150a:	4601      	mov	r1, r0
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	b2ca      	uxtb	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf0      	blt.n	8001506 <_read+0x12>
  }

  return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	e009      	b.n	8001554 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf1      	blt.n	8001540 <_write+0x12>
  }
  return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_close>:

int _close(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158e:	605a      	str	r2, [r3, #4]
  return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_isatty>:

int _isatty(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <_sbrk+0x5c>)
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <_sbrk+0x60>)
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <_sbrk+0x64>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <_sbrk+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d207      	bcs.n	8001610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001600:	f003 facc 	bl	8004b9c <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e009      	b.n	8001624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <_sbrk+0x64>)
 8001620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20003000 	.word	0x20003000
 8001630:	00000400 	.word	0x00000400
 8001634:	20000170 	.word	0x20000170
 8001638:	200002c8 	.word	0x200002c8

0800163c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001698 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001664:	f7ff ffea 	bl	800163c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <LoopForever+0x6>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <LoopForever+0xe>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	; (80016ac <LoopForever+0x16>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f003 fa8b 	bl	8004ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001692:	f7ff fcc3 	bl	800101c <main>

08001696 <LoopForever>:

LoopForever:
    b LoopForever
 8001696:	e7fe      	b.n	8001696 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001698:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016a4:	080058d0 	.word	0x080058d0
  ldr r2, =_sbss
 80016a8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016ac:	200002c4 	.word	0x200002c4

080016b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_2_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_Init+0x28>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x28>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f931 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fe1e 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f93b 	bl	800197a <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f911 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000000c 	.word	0x2000000c
 8001738:	20000014 	.word	0x20000014
 800173c:	20000010 	.word	0x20000010

08001740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000014 	.word	0x20000014
 8001764:	20000174 	.word	0x20000174

08001768 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;  
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000174 	.word	0x20000174

08001780 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000014 	.word	0x20000014

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	; (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff47 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff5c 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff8e 	bl	8001880 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5d 	bl	800182c <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffb0 	bl	80018e8 <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	e14e      	b.n	8001c42 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8140 	beq.w	8001c3c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d005      	beq.n	80019d4 <HAL_GPIO_Init+0x40>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d130      	bne.n	8001a36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 0201 	and.w	r2, r3, #1
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d017      	beq.n	8001a72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d123      	bne.n	8001ac6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	6939      	ldr	r1, [r7, #16]
 8001ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0203 	and.w	r2, r3, #3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 809a 	beq.w	8001c3c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b08:	4b55      	ldr	r3, [pc, #340]	; (8001c60 <HAL_GPIO_Init+0x2cc>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a54      	ldr	r2, [pc, #336]	; (8001c60 <HAL_GPIO_Init+0x2cc>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b52      	ldr	r3, [pc, #328]	; (8001c60 <HAL_GPIO_Init+0x2cc>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b20:	4a50      	ldr	r2, [pc, #320]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b4a:	d013      	beq.n	8001b74 <HAL_GPIO_Init+0x1e0>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a46      	ldr	r2, [pc, #280]	; (8001c68 <HAL_GPIO_Init+0x2d4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00d      	beq.n	8001b70 <HAL_GPIO_Init+0x1dc>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a45      	ldr	r2, [pc, #276]	; (8001c6c <HAL_GPIO_Init+0x2d8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d007      	beq.n	8001b6c <HAL_GPIO_Init+0x1d8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a44      	ldr	r2, [pc, #272]	; (8001c70 <HAL_GPIO_Init+0x2dc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <HAL_GPIO_Init+0x1d4>
 8001b64:	2303      	movs	r3, #3
 8001b66:	e006      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b68:	2305      	movs	r3, #5
 8001b6a:	e004      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b74:	2300      	movs	r3, #0
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	4093      	lsls	r3, r2
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b86:	4937      	ldr	r1, [pc, #220]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b94:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bb8:	4a2e      	ldr	r2, [pc, #184]	; (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001be2:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c36:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f47f aea9 	bne.w	80019a4 <HAL_GPIO_Init+0x10>
  }
}
 8001c52:	bf00      	nop
 8001c54:	bf00      	nop
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010000 	.word	0x40010000
 8001c68:	48000400 	.word	0x48000400
 8001c6c:	48000800 	.word	0x48000800
 8001c70:	48000c00 	.word	0x48000c00
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e08d      	b.n	8001dd6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fb42 	bl	8001358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	; 0x24
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	e006      	b.n	8001d30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d108      	bne.n	8001d4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	e007      	b.n	8001d5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69d9      	ldr	r1, [r3, #28]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1a      	ldr	r2, [r3, #32]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	461a      	mov	r2, r3
 8001dec:	460b      	mov	r3, r1
 8001dee:	817b      	strh	r3, [r7, #10]
 8001df0:	4613      	mov	r3, r2
 8001df2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	f040 80fd 	bne.w	8001ffc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_I2C_Master_Transmit+0x30>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e0f6      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x21e>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e18:	f7ff fca6 	bl	8001768 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2319      	movs	r3, #25
 8001e24:	2201      	movs	r2, #1
 8001e26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fa24 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0e1      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2221      	movs	r2, #33	; 0x21
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2210      	movs	r2, #16
 8001e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	893a      	ldrh	r2, [r7, #8]
 8001e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2bff      	cmp	r3, #255	; 0xff
 8001e6a:	d906      	bls.n	8001e7a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	22ff      	movs	r2, #255	; 0xff
 8001e70:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001e72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	e007      	b.n	8001e8a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e88:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d024      	beq.n	8001edc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	8979      	ldrh	r1, [r7, #10]
 8001ece:	4b4e      	ldr	r3, [pc, #312]	; (8002008 <HAL_I2C_Master_Transmit+0x228>)
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fc1f 	bl	8002718 <I2C_TransferConfig>
 8001eda:	e066      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	8979      	ldrh	r1, [r7, #10]
 8001ee4:	4b48      	ldr	r3, [pc, #288]	; (8002008 <HAL_I2C_Master_Transmit+0x228>)
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 fc14 	bl	8002718 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ef0:	e05b      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	6a39      	ldr	r1, [r7, #32]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fa17 	bl	800232a <I2C_WaitOnTXISFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e07b      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d034      	beq.n	8001faa <HAL_I2C_Master_Transmit+0x1ca>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d130      	bne.n	8001faa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f990 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e04d      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2bff      	cmp	r3, #255	; 0xff
 8001f6a:	d90e      	bls.n	8001f8a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	22ff      	movs	r2, #255	; 0xff
 8001f70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fbc8 	bl	8002718 <I2C_TransferConfig>
 8001f88:	e00f      	b.n	8001faa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	8979      	ldrh	r1, [r7, #10]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fbb7 	bl	8002718 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d19e      	bne.n	8001ef2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	6a39      	ldr	r1, [r7, #32]
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f9fd 	bl	80023b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e01a      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_I2C_Master_Transmit+0x22c>)
 8001fdc:	400b      	ands	r3, r1
 8001fde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
  }
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	80002000 	.word	0x80002000
 800200c:	fe00e800 	.word	0xfe00e800

08002010 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	461a      	mov	r2, r3
 800201c:	460b      	mov	r3, r1
 800201e:	817b      	strh	r3, [r7, #10]
 8002020:	4613      	mov	r3, r2
 8002022:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b20      	cmp	r3, #32
 800202e:	f040 80db 	bne.w	80021e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_I2C_Master_Receive+0x30>
 800203c:	2302      	movs	r3, #2
 800203e:	e0d4      	b.n	80021ea <HAL_I2C_Master_Receive+0x1da>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002048:	f7ff fb8e 	bl	8001768 <HAL_GetTick>
 800204c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2319      	movs	r3, #25
 8002054:	2201      	movs	r2, #1
 8002056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f90c 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0bf      	b.n	80021ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2222      	movs	r2, #34	; 0x22
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2210      	movs	r2, #16
 8002076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	893a      	ldrh	r2, [r7, #8]
 800208a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	2bff      	cmp	r3, #255	; 0xff
 800209a:	d90e      	bls.n	80020ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	8979      	ldrh	r1, [r7, #10]
 80020aa:	4b52      	ldr	r3, [pc, #328]	; (80021f4 <HAL_I2C_Master_Receive+0x1e4>)
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fb30 	bl	8002718 <I2C_TransferConfig>
 80020b8:	e06d      	b.n	8002196 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	8979      	ldrh	r1, [r7, #10]
 80020cc:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_I2C_Master_Receive+0x1e4>)
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fb1f 	bl	8002718 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80020da:	e05c      	b.n	8002196 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	6a39      	ldr	r1, [r7, #32]
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 f9ad 	bl	8002440 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e07c      	b.n	80021ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d034      	beq.n	8002196 <HAL_I2C_Master_Receive+0x186>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	2b00      	cmp	r3, #0
 8002132:	d130      	bne.n	8002196 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	2200      	movs	r2, #0
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f89a 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e04d      	b.n	80021ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	2bff      	cmp	r3, #255	; 0xff
 8002156:	d90e      	bls.n	8002176 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	22ff      	movs	r2, #255	; 0xff
 800215c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002162:	b2da      	uxtb	r2, r3
 8002164:	8979      	ldrh	r1, [r7, #10]
 8002166:	2300      	movs	r3, #0
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fad2 	bl	8002718 <I2C_TransferConfig>
 8002174:	e00f      	b.n	8002196 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	b2da      	uxtb	r2, r3
 8002186:	8979      	ldrh	r1, [r7, #10]
 8002188:	2300      	movs	r3, #0
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fac1 	bl	8002718 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d19d      	bne.n	80020dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	6a39      	ldr	r1, [r7, #32]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f907 	bl	80023b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e01a      	b.n	80021ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2220      	movs	r2, #32
 80021ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6859      	ldr	r1, [r3, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_I2C_Master_Receive+0x1e8>)
 80021c8:	400b      	ands	r3, r1
 80021ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e000      	b.n	80021ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
  }
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	80002400 	.word	0x80002400
 80021f8:	fe00e800 	.word	0xfe00e800

080021fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800220a:	b2db      	uxtb	r3, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d103      	bne.n	800224e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d007      	beq.n	800226c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	619a      	str	r2, [r3, #24]
  }
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002288:	e03b      	b.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f962 	bl	8002558 <I2C_IsErrorOccurred>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e041      	b.n	8002322 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d02d      	beq.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a6:	f7ff fa5f 	bl	8001768 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d302      	bcc.n	80022bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d122      	bne.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4013      	ands	r3, r2
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d113      	bne.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f043 0220 	orr.w	r2, r3, #32
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e00f      	b.n	8002322 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4013      	ands	r3, r2
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	429a      	cmp	r2, r3
 8002310:	bf0c      	ite	eq
 8002312:	2301      	moveq	r3, #1
 8002314:	2300      	movne	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	429a      	cmp	r2, r3
 800231e:	d0b4      	beq.n	800228a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002336:	e033      	b.n	80023a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f90b 	bl	8002558 <I2C_IsErrorOccurred>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e031      	b.n	80023b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d025      	beq.n	80023a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002354:	f7ff fa08 	bl	8001768 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	429a      	cmp	r2, r3
 8002362:	d302      	bcc.n	800236a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11a      	bne.n	80023a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b02      	cmp	r3, #2
 8002376:	d013      	beq.n	80023a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f043 0220 	orr.w	r2, r3, #32
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e007      	b.n	80023b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d1c4      	bne.n	8002338 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c4:	e02f      	b.n	8002426 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f8c4 	bl	8002558 <I2C_IsErrorOccurred>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e02d      	b.n	8002436 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7ff f9c5 	bl	8001768 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d11a      	bne.n	8002426 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d013      	beq.n	8002426 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e007      	b.n	8002436 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b20      	cmp	r3, #32
 8002432:	d1c8      	bne.n	80023c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002450:	e071      	b.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f87e 	bl	8002558 <I2C_IsErrorOccurred>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b20      	cmp	r3, #32
 8002472:	d13b      	bne.n	80024ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d138      	bne.n	80024ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b04      	cmp	r3, #4
 8002486:	d105      	bne.n	8002494 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b10      	cmp	r3, #16
 80024a0:	d121      	bne.n	80024e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2210      	movs	r2, #16
 80024a8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2204      	movs	r2, #4
 80024ae:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2220      	movs	r2, #32
 80024b6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80024c4:	400b      	ands	r3, r1
 80024c6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	75fb      	strb	r3, [r7, #23]
 80024e4:	e002      	b.n	80024ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80024ec:	f7ff f93c 	bl	8001768 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d302      	bcc.n	8002502 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d119      	bne.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d116      	bne.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b04      	cmp	r3, #4
 8002514:	d00f      	beq.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f043 0220 	orr.w	r2, r3, #32
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b04      	cmp	r3, #4
 8002542:	d002      	beq.n	800254a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d083      	beq.n	8002452 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800254a:	7dfb      	ldrb	r3, [r7, #23]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	fe00e800 	.word	0xfe00e800

08002558 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d068      	beq.n	8002656 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2210      	movs	r2, #16
 800258a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800258c:	e049      	b.n	8002622 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d045      	beq.n	8002622 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002596:	f7ff f8e7 	bl	8001768 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d302      	bcc.n	80025ac <I2C_IsErrorOccurred+0x54>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d13a      	bne.n	8002622 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ce:	d121      	bne.n	8002614 <I2C_IsErrorOccurred+0xbc>
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025d6:	d01d      	beq.n	8002614 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d01a      	beq.n	8002614 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025ee:	f7ff f8bb 	bl	8001768 <HAL_GetTick>
 80025f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f4:	e00e      	b.n	8002614 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025f6:	f7ff f8b7 	bl	8001768 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b19      	cmp	r3, #25
 8002602:	d907      	bls.n	8002614 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	f043 0320 	orr.w	r3, r3, #32
 800260a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002612:	e006      	b.n	8002622 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b20      	cmp	r3, #32
 8002620:	d1e9      	bne.n	80025f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b20      	cmp	r3, #32
 800262e:	d003      	beq.n	8002638 <I2C_IsErrorOccurred+0xe0>
 8002630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0aa      	beq.n	800258e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800263c:	2b00      	cmp	r3, #0
 800263e:	d103      	bne.n	8002648 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2220      	movs	r2, #32
 8002646:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002678:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800269a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01c      	beq.n	8002706 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f7ff fdaf 	bl	8002230 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <I2C_IsErrorOccurred+0x1bc>)
 80026de:	400b      	ands	r3, r1
 80026e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800270a:	4618      	mov	r0, r3
 800270c:	3728      	adds	r7, #40	; 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	fe00e800 	.word	0xfe00e800

08002718 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	4613      	mov	r3, r2
 8002728:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800272a:	897b      	ldrh	r3, [r7, #10]
 800272c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002730:	7a7b      	ldrb	r3, [r7, #9]
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002738:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	4313      	orrs	r3, r2
 8002742:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002746:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	0d5b      	lsrs	r3, r3, #21
 8002752:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <I2C_TransferConfig+0x60>)
 8002758:	430b      	orrs	r3, r1
 800275a:	43db      	mvns	r3, r3
 800275c:	ea02 0103 	and.w	r1, r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	03ff63ff 	.word	0x03ff63ff

0800277c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b20      	cmp	r3, #32
 8002790:	d138      	bne.n	8002804 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800279c:	2302      	movs	r3, #2
 800279e:	e032      	b.n	8002806 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2224      	movs	r2, #36	; 0x24
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6819      	ldr	r1, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b20      	cmp	r3, #32
 8002826:	d139      	bne.n	800289c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002832:	2302      	movs	r3, #2
 8002834:	e033      	b.n	800289e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2224      	movs	r2, #36	; 0x24
 8002842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002864:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028bc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f001 b823 	b.w	8003918 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 817d 	beq.w	8002be2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028e8:	4bbc      	ldr	r3, [pc, #752]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d00c      	beq.n	800290e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f4:	4bb9      	ldr	r3, [pc, #740]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d15c      	bne.n	80029ba <HAL_RCC_OscConfig+0x10e>
 8002900:	4bb6      	ldr	r3, [pc, #728]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d155      	bne.n	80029ba <HAL_RCC_OscConfig+0x10e>
 800290e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002912:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002922:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d102      	bne.n	8002940 <HAL_RCC_OscConfig+0x94>
 800293a:	4ba8      	ldr	r3, [pc, #672]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	e015      	b.n	800296c <HAL_RCC_OscConfig+0xc0>
 8002940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002944:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002954:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002958:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800295c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002968:	4b9c      	ldr	r3, [pc, #624]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002970:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002974:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002978:	fa92 f2a2 	rbit	r2, r2
 800297c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002980:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002984:	fab2 f282 	clz	r2, r2
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	f042 0220 	orr.w	r2, r2, #32
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	f002 021f 	and.w	r2, r2, #31
 8002994:	2101      	movs	r1, #1
 8002996:	fa01 f202 	lsl.w	r2, r1, r2
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 811f 	beq.w	8002be0 <HAL_RCC_OscConfig+0x334>
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 8116 	bne.w	8002be0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f000 bfaf 	b.w	8003918 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x12e>
 80029cc:	4b83      	ldr	r3, [pc, #524]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a82      	ldr	r2, [pc, #520]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	e036      	b.n	8002a48 <HAL_RCC_OscConfig+0x19c>
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x158>
 80029ea:	4b7c      	ldr	r3, [pc, #496]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7b      	ldr	r2, [pc, #492]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 80029f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b79      	ldr	r3, [pc, #484]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a78      	ldr	r2, [pc, #480]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 80029fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e021      	b.n	8002a48 <HAL_RCC_OscConfig+0x19c>
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x184>
 8002a16:	4b71      	ldr	r3, [pc, #452]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a70      	ldr	r2, [pc, #448]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b6e      	ldr	r3, [pc, #440]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6d      	ldr	r2, [pc, #436]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCC_OscConfig+0x19c>
 8002a30:	4b6a      	ldr	r3, [pc, #424]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a69      	ldr	r2, [pc, #420]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a66      	ldr	r2, [pc, #408]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a46:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a48:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f023 020f 	bic.w	r2, r3, #15
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	495f      	ldr	r1, [pc, #380]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d059      	beq.n	8002b26 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fe fe79 	bl	8001768 <HAL_GetTick>
 8002a76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fe74 	bl	8001768 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b64      	cmp	r3, #100	; 0x64
 8002a8a:	d902      	bls.n	8002a92 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	f000 bf43 	b.w	8003918 <HAL_RCC_OscConfig+0x106c>
 8002a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a96:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002aa6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	095b      	lsrs	r3, r3, #5
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d102      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x218>
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	e015      	b.n	8002af0 <HAL_RCC_OscConfig+0x244>
 8002ac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ac8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002adc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ae0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002aec:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002af4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002af8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002afc:	fa92 f2a2 	rbit	r2, r2
 8002b00:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b04:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b08:	fab2 f282 	clz	r2, r2
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	f042 0220 	orr.w	r2, r2, #32
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	f002 021f 	and.w	r2, r2, #31
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ab      	beq.n	8002a7c <HAL_RCC_OscConfig+0x1d0>
 8002b24:	e05d      	b.n	8002be2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe fe1f 	bl	8001768 <HAL_GetTick>
 8002b2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fe fe1a 	bl	8001768 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b64      	cmp	r3, #100	; 0x64
 8002b3e:	d902      	bls.n	8002b46 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	f000 bee9 	b.w	8003918 <HAL_RCC_OscConfig+0x106c>
 8002b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b5a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d102      	bne.n	8002b78 <HAL_RCC_OscConfig+0x2cc>
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	e015      	b.n	8002ba4 <HAL_RCC_OscConfig+0x2f8>
 8002b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b90:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b94:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <HAL_RCC_OscConfig+0x330>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ba8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002bac:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002bb0:	fa92 f2a2 	rbit	r2, r2
 8002bb4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002bb8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002bbc:	fab2 f282 	clz	r2, r2
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	f042 0220 	orr.w	r2, r2, #32
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	f002 021f 	and.w	r2, r2, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ab      	bne.n	8002b30 <HAL_RCC_OscConfig+0x284>
 8002bd8:	e003      	b.n	8002be2 <HAL_RCC_OscConfig+0x336>
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 817d 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bf8:	4ba6      	ldr	r3, [pc, #664]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00b      	beq.n	8002c1c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c04:	4ba3      	ldr	r3, [pc, #652]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d172      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x44a>
 8002c10:	4ba0      	ldr	r3, [pc, #640]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d16c      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x44a>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c2e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d102      	bne.n	8002c4c <HAL_RCC_OscConfig+0x3a0>
 8002c46:	4b93      	ldr	r3, [pc, #588]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	e013      	b.n	8002c74 <HAL_RCC_OscConfig+0x3c8>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c5e:	2302      	movs	r3, #2
 8002c60:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c70:	4b88      	ldr	r3, [pc, #544]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2202      	movs	r2, #2
 8002c76:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c7a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c7e:	fa92 f2a2 	rbit	r2, r2
 8002c82:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c86:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCC_OscConfig+0x410>
 8002ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d002      	beq.n	8002cbc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f000 be2e 	b.w	8003918 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbc:	4b75      	ldr	r3, [pc, #468]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	21f8      	movs	r1, #248	; 0xf8
 8002cd2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002cda:	fa91 f1a1 	rbit	r1, r1
 8002cde:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ce2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ce6:	fab1 f181 	clz	r1, r1
 8002cea:	b2c9      	uxtb	r1, r1
 8002cec:	408b      	lsls	r3, r1
 8002cee:	4969      	ldr	r1, [pc, #420]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf4:	e0fd      	b.n	8002ef2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8088 	beq.w	8002e18 <HAL_RCC_OscConfig+0x56c>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2301      	movs	r3, #1
 8002d32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe fd18 	bl	8001768 <HAL_GetTick>
 8002d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fd13 	bl	8001768 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d902      	bls.n	8002d54 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	f000 bde2 	b.w	8003918 <HAL_RCC_OscConfig+0x106c>
 8002d54:	2302      	movs	r3, #2
 8002d56:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4d8>
 8002d7e:	4b45      	ldr	r3, [pc, #276]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	e013      	b.n	8002dac <HAL_RCC_OscConfig+0x500>
 8002d84:	2302      	movs	r3, #2
 8002d86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d96:	2302      	movs	r3, #2
 8002d98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002da8:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2202      	movs	r2, #2
 8002dae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002db2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002db6:	fa92 f2a2 	rbit	r2, r2
 8002dba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002dbe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f042 0220 	orr.w	r2, r2, #32
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f002 021f 	and.w	r2, r2, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0af      	beq.n	8002d3e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	21f8      	movs	r1, #248	; 0xf8
 8002df4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002dfc:	fa91 f1a1 	rbit	r1, r1
 8002e00:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e04:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e08:	fab1 f181 	clz	r1, r1
 8002e0c:	b2c9      	uxtb	r1, r1
 8002e0e:	408b      	lsls	r3, r1
 8002e10:	4920      	ldr	r1, [pc, #128]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
 8002e16:	e06c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x646>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2300      	movs	r3, #0
 8002e42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe fc90 	bl	8001768 <HAL_GetTick>
 8002e48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fc8b 	bl	8001768 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d902      	bls.n	8002e64 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	f000 bd5a 	b.w	8003918 <HAL_RCC_OscConfig+0x106c>
 8002e64:	2302      	movs	r3, #2
 8002e66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d104      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5ec>
 8002e8e:	4b01      	ldr	r3, [pc, #4]	; (8002e94 <HAL_RCC_OscConfig+0x5e8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	e015      	b.n	8002ec0 <HAL_RCC_OscConfig+0x614>
 8002e94:	40021000 	.word	0x40021000
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002eaa:	2302      	movs	r3, #2
 8002eac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002eb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002ebc:	4bc8      	ldr	r3, [pc, #800]	; (80031e0 <HAL_RCC_OscConfig+0x934>)
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002ec6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002eca:	fa92 f2a2 	rbit	r2, r2
 8002ece:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002ed2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002ed6:	fab2 f282 	clz	r2, r2
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	f042 0220 	orr.w	r2, r2, #32
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	f002 021f 	and.w	r2, r2, #31
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ad      	bne.n	8002e4e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8110 	beq.w	8003128 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d079      	beq.n	800300c <HAL_RCC_OscConfig+0x760>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	4bab      	ldr	r3, [pc, #684]	; (80031e4 <HAL_RCC_OscConfig+0x938>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2301      	movs	r3, #1
 8002f40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f42:	f7fe fc11 	bl	8001768 <HAL_GetTick>
 8002f46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f4c:	f7fe fc0c 	bl	8001768 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d902      	bls.n	8002f62 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	f000 bcdb 	b.w	8003918 <HAL_RCC_OscConfig+0x106c>
 8002f62:	2302      	movs	r3, #2
 8002f64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	fa93 f2a3 	rbit	r2, r3
 8002f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	fa93 f2a3 	rbit	r2, r3
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002fba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbc:	4b88      	ldr	r3, [pc, #544]	; (80031e0 <HAL_RCC_OscConfig+0x934>)
 8002fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fc8:	2102      	movs	r1, #2
 8002fca:	6019      	str	r1, [r3, #0]
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f1a3 	rbit	r1, r3
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fe2:	6019      	str	r1, [r3, #0]
  return result;
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	2101      	movs	r1, #1
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0a0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x6a0>
 800300a:	e08d      	b.n	8003128 <HAL_RCC_OscConfig+0x87c>
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800302e:	601a      	str	r2, [r3, #0]
  return result;
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003038:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	4b68      	ldr	r3, [pc, #416]	; (80031e4 <HAL_RCC_OscConfig+0x938>)
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	461a      	mov	r2, r3
 800304a:	2300      	movs	r3, #0
 800304c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304e:	f7fe fb8b 	bl	8001768 <HAL_GetTick>
 8003052:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003056:	e00a      	b.n	800306e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003058:	f7fe fb86 	bl	8001768 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d902      	bls.n	800306e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	f000 bc55 	b.w	8003918 <HAL_RCC_OscConfig+0x106c>
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003076:	2202      	movs	r2, #2
 8003078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f2a3 	rbit	r2, r3
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003096:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800309a:	2202      	movs	r2, #2
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	fa93 f2a3 	rbit	r2, r3
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80030be:	2202      	movs	r2, #2
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	fa93 f2a3 	rbit	r2, r3
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030da:	4b41      	ldr	r3, [pc, #260]	; (80031e0 <HAL_RCC_OscConfig+0x934>)
 80030dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030e6:	2102      	movs	r1, #2
 80030e8:	6019      	str	r1, [r3, #0]
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	fa93 f1a3 	rbit	r1, r3
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003100:	6019      	str	r1, [r3, #0]
  return result;
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2101      	movs	r1, #1
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d197      	bne.n	8003058 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 81a1 	beq.w	8003480 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003144:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <HAL_RCC_OscConfig+0x934>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d116      	bne.n	800317e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003150:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_RCC_OscConfig+0x934>)
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <HAL_RCC_OscConfig+0x934>)
 8003156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315a:	61d3      	str	r3, [r2, #28]
 800315c:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_RCC_OscConfig+0x934>)
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003172:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003176:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317e:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <HAL_RCC_OscConfig+0x93c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11a      	bne.n	80031c0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <HAL_RCC_OscConfig+0x93c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <HAL_RCC_OscConfig+0x93c>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003196:	f7fe fae7 	bl	8001768 <HAL_GetTick>
 800319a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319e:	e009      	b.n	80031b4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a0:	f7fe fae2 	bl	8001768 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b64      	cmp	r3, #100	; 0x64
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e3b1      	b.n	8003918 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_RCC_OscConfig+0x93c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0ef      	beq.n	80031a0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10d      	bne.n	80031ec <HAL_RCC_OscConfig+0x940>
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <HAL_RCC_OscConfig+0x934>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a02      	ldr	r2, [pc, #8]	; (80031e0 <HAL_RCC_OscConfig+0x934>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	e03c      	b.n	8003258 <HAL_RCC_OscConfig+0x9ac>
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	10908120 	.word	0x10908120
 80031e8:	40007000 	.word	0x40007000
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10c      	bne.n	8003216 <HAL_RCC_OscConfig+0x96a>
 80031fc:	4bc1      	ldr	r3, [pc, #772]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4ac0      	ldr	r2, [pc, #768]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	6213      	str	r3, [r2, #32]
 8003208:	4bbe      	ldr	r3, [pc, #760]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4abd      	ldr	r2, [pc, #756]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 800320e:	f023 0304 	bic.w	r3, r3, #4
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	e020      	b.n	8003258 <HAL_RCC_OscConfig+0x9ac>
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b05      	cmp	r3, #5
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x994>
 8003226:	4bb7      	ldr	r3, [pc, #732]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4ab6      	ldr	r2, [pc, #728]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 800322c:	f043 0304 	orr.w	r3, r3, #4
 8003230:	6213      	str	r3, [r2, #32]
 8003232:	4bb4      	ldr	r3, [pc, #720]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4ab3      	ldr	r2, [pc, #716]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	6213      	str	r3, [r2, #32]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0x9ac>
 8003240:	4bb0      	ldr	r3, [pc, #704]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4aaf      	ldr	r2, [pc, #700]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6213      	str	r3, [r2, #32]
 800324c:	4bad      	ldr	r3, [pc, #692]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4aac      	ldr	r2, [pc, #688]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8081 	beq.w	800336c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326a:	f7fe fa7d 	bl	8001768 <HAL_GetTick>
 800326e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003274:	f7fe fa78 	bl	8001768 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e345      	b.n	8003918 <HAL_RCC_OscConfig+0x106c>
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003294:	2202      	movs	r2, #2
 8003296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	fa93 f2a3 	rbit	r2, r3
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80032b8:	2202      	movs	r2, #2
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032d2:	601a      	str	r2, [r3, #0]
  return result;
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d102      	bne.n	80032f8 <HAL_RCC_OscConfig+0xa4c>
 80032f2:	4b84      	ldr	r3, [pc, #528]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	e013      	b.n	8003320 <HAL_RCC_OscConfig+0xa74>
 80032f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003300:	2202      	movs	r2, #2
 8003302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	fa93 f2a3 	rbit	r2, r3
 8003312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003316:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	4b79      	ldr	r3, [pc, #484]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003324:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003328:	2102      	movs	r1, #2
 800332a:	6011      	str	r1, [r2, #0]
 800332c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003330:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	fa92 f1a2 	rbit	r1, r2
 800333a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800333e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003342:	6011      	str	r1, [r2, #0]
  return result;
 8003344:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003348:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	fab2 f282 	clz	r2, r2
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	f002 021f 	and.w	r2, r2, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f202 	lsl.w	r2, r1, r2
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d084      	beq.n	8003274 <HAL_RCC_OscConfig+0x9c8>
 800336a:	e07f      	b.n	800346c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336c:	f7fe f9fc 	bl	8001768 <HAL_GetTick>
 8003370:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003374:	e00b      	b.n	800338e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe f9f7 	bl	8001768 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e2c4      	b.n	8003918 <HAL_RCC_OscConfig+0x106c>
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003396:	2202      	movs	r2, #2
 8003398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	fa93 f2a3 	rbit	r2, r3
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033ba:	2202      	movs	r2, #2
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	fa93 f2a3 	rbit	r2, r3
 80033cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033d4:	601a      	str	r2, [r3, #0]
  return result;
 80033d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033da:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f043 0302 	orr.w	r3, r3, #2
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d102      	bne.n	80033fa <HAL_RCC_OscConfig+0xb4e>
 80033f4:	4b43      	ldr	r3, [pc, #268]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	e013      	b.n	8003422 <HAL_RCC_OscConfig+0xb76>
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003402:	2202      	movs	r2, #2
 8003404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	fa93 f2a3 	rbit	r2, r3
 8003414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003418:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	4b39      	ldr	r3, [pc, #228]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003426:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800342a:	2102      	movs	r1, #2
 800342c:	6011      	str	r1, [r2, #0]
 800342e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003432:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	fa92 f1a2 	rbit	r1, r2
 800343c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003440:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003444:	6011      	str	r1, [r2, #0]
  return result;
 8003446:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800344a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	fab2 f282 	clz	r2, r2
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f002 021f 	and.w	r2, r2, #31
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f202 	lsl.w	r2, r1, r2
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d184      	bne.n	8003376 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800346c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003474:	4b23      	ldr	r3, [pc, #140]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4a22      	ldr	r2, [pc, #136]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 800347a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800347e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003484:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8242 	beq.w	8003916 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003492:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <HAL_RCC_OscConfig+0xc58>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b08      	cmp	r3, #8
 800349c:	f000 8213 	beq.w	80038c6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	f040 8162 	bne.w	8003776 <HAL_RCC_OscConfig+0xeca>
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80034ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	fa93 f2a3 	rbit	r2, r3
 80034ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034d6:	601a      	str	r2, [r3, #0]
  return result;
 80034d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034dc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	461a      	mov	r2, r3
 80034f4:	2300      	movs	r3, #0
 80034f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe f936 	bl	8001768 <HAL_GetTick>
 80034fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003500:	e00c      	b.n	800351c <HAL_RCC_OscConfig+0xc70>
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe f92e 	bl	8001768 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1fd      	b.n	8003918 <HAL_RCC_OscConfig+0x106c>
 800351c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003520:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	fa93 f2a3 	rbit	r2, r3
 8003538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003540:	601a      	str	r2, [r3, #0]
  return result;
 8003542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003546:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800354a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d102      	bne.n	8003566 <HAL_RCC_OscConfig+0xcba>
 8003560:	4bb0      	ldr	r3, [pc, #704]	; (8003824 <HAL_RCC_OscConfig+0xf78>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	e027      	b.n	80035b6 <HAL_RCC_OscConfig+0xd0a>
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800356e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	fa93 f2a3 	rbit	r2, r3
 8003582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003586:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003594:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	fa93 f2a3 	rbit	r2, r3
 80035a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	4b9c      	ldr	r3, [pc, #624]	; (8003824 <HAL_RCC_OscConfig+0xf78>)
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80035be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035c2:	6011      	str	r1, [r2, #0]
 80035c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035c8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	fa92 f1a2 	rbit	r1, r2
 80035d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035da:	6011      	str	r1, [r2, #0]
  return result;
 80035dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	fab2 f282 	clz	r2, r2
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f042 0220 	orr.w	r2, r2, #32
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	f002 021f 	and.w	r2, r2, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d182      	bne.n	8003508 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003602:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCC_OscConfig+0xf78>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800360a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	430b      	orrs	r3, r1
 8003624:	497f      	ldr	r1, [pc, #508]	; (8003824 <HAL_RCC_OscConfig+0xf78>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]
 800362a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003632:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	fa93 f2a3 	rbit	r2, r3
 8003646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800364e:	601a      	str	r2, [r3, #0]
  return result;
 8003650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003654:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003658:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003664:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	461a      	mov	r2, r3
 800366c:	2301      	movs	r3, #1
 800366e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe f87a 	bl	8001768 <HAL_GetTick>
 8003674:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003678:	e009      	b.n	800368e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367a:	f7fe f875 	bl	8001768 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e144      	b.n	8003918 <HAL_RCC_OscConfig+0x106c>
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800369a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	fa93 f2a3 	rbit	r2, r3
 80036aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036b2:	601a      	str	r2, [r3, #0]
  return result;
 80036b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_RCC_OscConfig+0xe2c>
 80036d2:	4b54      	ldr	r3, [pc, #336]	; (8003824 <HAL_RCC_OscConfig+0xf78>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	e027      	b.n	8003728 <HAL_RCC_OscConfig+0xe7c>
 80036d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036dc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	fa93 f2a3 	rbit	r2, r3
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003706:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003710:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	fa93 f2a3 	rbit	r2, r3
 800371a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	4b3f      	ldr	r3, [pc, #252]	; (8003824 <HAL_RCC_OscConfig+0xf78>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800372c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003730:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003734:	6011      	str	r1, [r2, #0]
 8003736:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800373a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	fa92 f1a2 	rbit	r1, r2
 8003744:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003748:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800374c:	6011      	str	r1, [r2, #0]
  return result;
 800374e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003752:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	fab2 f282 	clz	r2, r2
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	f042 0220 	orr.w	r2, r2, #32
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	f002 021f 	and.w	r2, r2, #31
 8003768:	2101      	movs	r1, #1
 800376a:	fa01 f202 	lsl.w	r2, r1, r2
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d082      	beq.n	800367a <HAL_RCC_OscConfig+0xdce>
 8003774:	e0cf      	b.n	8003916 <HAL_RCC_OscConfig+0x106a>
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800377e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003788:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	fa93 f2a3 	rbit	r2, r3
 8003792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003796:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800379a:	601a      	str	r2, [r3, #0]
  return result;
 800379c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80037a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	461a      	mov	r2, r3
 80037b8:	2300      	movs	r3, #0
 80037ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd ffd4 	bl	8001768 <HAL_GetTick>
 80037c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c4:	e009      	b.n	80037da <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fd ffcf 	bl	8001768 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e09e      	b.n	8003918 <HAL_RCC_OscConfig+0x106c>
 80037da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037de:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fa93 f2a3 	rbit	r2, r3
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037fe:	601a      	str	r2, [r3, #0]
  return result;
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003808:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d104      	bne.n	8003828 <HAL_RCC_OscConfig+0xf7c>
 800381e:	4b01      	ldr	r3, [pc, #4]	; (8003824 <HAL_RCC_OscConfig+0xf78>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	e029      	b.n	8003878 <HAL_RCC_OscConfig+0xfcc>
 8003824:	40021000 	.word	0x40021000
 8003828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	fa93 f2a3 	rbit	r2, r3
 8003844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003848:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003852:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003860:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	fa93 f2a3 	rbit	r2, r3
 800386a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_RCC_OscConfig+0x1078>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800387c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003880:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003884:	6011      	str	r1, [r2, #0]
 8003886:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800388a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	fa92 f1a2 	rbit	r1, r2
 8003894:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003898:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800389c:	6011      	str	r1, [r2, #0]
  return result;
 800389e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038a2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	fab2 f282 	clz	r2, r2
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	f042 0220 	orr.w	r2, r2, #32
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f002 021f 	and.w	r2, r2, #31
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d180      	bne.n	80037c6 <HAL_RCC_OscConfig+0xf1a>
 80038c4:	e027      	b.n	8003916 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e01e      	b.n	8003918 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_RCC_OscConfig+0x1078>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d10b      	bne.n	8003912 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800390e:	429a      	cmp	r2, r3
 8003910:	d001      	beq.n	8003916 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000

08003928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b09e      	sub	sp, #120	; 0x78
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e162      	b.n	8003c06 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003940:	4b90      	ldr	r3, [pc, #576]	; (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d910      	bls.n	8003970 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b8d      	ldr	r3, [pc, #564]	; (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0207 	bic.w	r2, r3, #7
 8003956:	498b      	ldr	r1, [pc, #556]	; (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b89      	ldr	r3, [pc, #548]	; (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e14a      	b.n	8003c06 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800397c:	4b82      	ldr	r3, [pc, #520]	; (8003b88 <HAL_RCC_ClockConfig+0x260>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	497f      	ldr	r1, [pc, #508]	; (8003b88 <HAL_RCC_ClockConfig+0x260>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80dc 	beq.w	8003b54 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d13c      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xf6>
 80039a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ac:	fa93 f3a3 	rbit	r3, r3
 80039b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d102      	bne.n	80039ce <HAL_RCC_ClockConfig+0xa6>
 80039c8:	4b6f      	ldr	r3, [pc, #444]	; (8003b88 <HAL_RCC_ClockConfig+0x260>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	e00f      	b.n	80039ee <HAL_RCC_ClockConfig+0xc6>
 80039ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039d6:	fa93 f3a3 	rbit	r3, r3
 80039da:	667b      	str	r3, [r7, #100]	; 0x64
 80039dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e0:	663b      	str	r3, [r7, #96]	; 0x60
 80039e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ea:	4b67      	ldr	r3, [pc, #412]	; (8003b88 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80039f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039f6:	fa92 f2a2 	rbit	r2, r2
 80039fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80039fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039fe:	fab2 f282 	clz	r2, r2
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	f042 0220 	orr.w	r2, r2, #32
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	f002 021f 	and.w	r2, r2, #31
 8003a0e:	2101      	movs	r1, #1
 8003a10:	fa01 f202 	lsl.w	r2, r1, r2
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d17b      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0f3      	b.n	8003c06 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d13c      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x178>
 8003a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a2e:	fa93 f3a3 	rbit	r3, r3
 8003a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d102      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x128>
 8003a4a:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	e00f      	b.n	8003a70 <HAL_RCC_ClockConfig+0x148>
 8003a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a62:	643b      	str	r3, [r7, #64]	; 0x40
 8003a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6c:	4b46      	ldr	r3, [pc, #280]	; (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a74:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a78:	fa92 f2a2 	rbit	r2, r2
 8003a7c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a80:	fab2 f282 	clz	r2, r2
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	f042 0220 	orr.w	r2, r2, #32
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	f002 021f 	and.w	r2, r2, #31
 8003a90:	2101      	movs	r1, #1
 8003a92:	fa01 f202 	lsl.w	r2, r1, r2
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d13a      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0b2      	b.n	8003c06 <HAL_RCC_ClockConfig+0x2de>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d102      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x1a0>
 8003ac2:	4b31      	ldr	r3, [pc, #196]	; (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	e00d      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x1bc>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	61ba      	str	r2, [r7, #24]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	fa92 f2a2 	rbit	r2, r2
 8003aee:	617a      	str	r2, [r7, #20]
  return result;
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	fab2 f282 	clz	r2, r2
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	f042 0220 	orr.w	r2, r2, #32
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	f002 021f 	and.w	r2, r2, #31
 8003b02:	2101      	movs	r1, #1
 8003b04:	fa01 f202 	lsl.w	r2, r1, r2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e079      	b.n	8003c06 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	491a      	ldr	r1, [pc, #104]	; (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b24:	f7fd fe20 	bl	8001768 <HAL_GetTick>
 8003b28:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fd fe1c 	bl	8001768 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e061      	b.n	8003c06 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d214      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 0207 	bic.w	r2, r3, #7
 8003b6a:	4906      	ldr	r1, [pc, #24]	; (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <HAL_RCC_ClockConfig+0x25c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e040      	b.n	8003c06 <HAL_RCC_ClockConfig+0x2de>
 8003b84:	40022000 	.word	0x40022000
 8003b88:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b98:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <HAL_RCC_ClockConfig+0x2e8>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	491a      	ldr	r1, [pc, #104]	; (8003c10 <HAL_RCC_ClockConfig+0x2e8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <HAL_RCC_ClockConfig+0x2e8>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4912      	ldr	r1, [pc, #72]	; (8003c10 <HAL_RCC_ClockConfig+0x2e8>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bca:	f000 f829 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 8003bce:	4601      	mov	r1, r0
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <HAL_RCC_ClockConfig+0x2e8>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd8:	22f0      	movs	r2, #240	; 0xf0
 8003bda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	fa92 f2a2 	rbit	r2, r2
 8003be2:	60fa      	str	r2, [r7, #12]
  return result;
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	fab2 f282 	clz	r2, r2
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	40d3      	lsrs	r3, r2
 8003bee:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x2ec>)
 8003bf0:	5cd3      	ldrb	r3, [r2, r3]
 8003bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8003bf6:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <HAL_RCC_ClockConfig+0x2f0>)
 8003bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <HAL_RCC_ClockConfig+0x2f4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd fd6e 	bl	80016e0 <HAL_InitTick>
  
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3778      	adds	r7, #120	; 0x78
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	0800585c 	.word	0x0800585c
 8003c18:	2000000c 	.word	0x2000000c
 8003c1c:	20000010 	.word	0x20000010

08003c20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	2300      	movs	r3, #0
 8003c34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c3a:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d002      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x30>
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCC_GetSysClockFreq+0x36>
 8003c4e:	e026      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c52:	613b      	str	r3, [r7, #16]
      break;
 8003c54:	e026      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	0c9b      	lsrs	r3, r3, #18
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	4a17      	ldr	r2, [pc, #92]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c60:	5cd3      	ldrb	r3, [r2, r3]
 8003c62:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
 8003c70:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c7c:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	e004      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	613b      	str	r3, [r7, #16]
      break;
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ca0:	613b      	str	r3, [r7, #16]
      break;
 8003ca2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca4:	693b      	ldr	r3, [r7, #16]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	007a1200 	.word	0x007a1200
 8003cbc:	08005874 	.word	0x08005874
 8003cc0:	08005884 	.word	0x08005884
 8003cc4:	003d0900 	.word	0x003d0900

08003cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cce:	681b      	ldr	r3, [r3, #0]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	2000000c 	.word	0x2000000c

08003ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ce6:	f7ff ffef 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003cea:	4601      	mov	r1, r0
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cf4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003cf8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	fa92 f2a2 	rbit	r2, r2
 8003d00:	603a      	str	r2, [r7, #0]
  return result;
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	fab2 f282 	clz	r2, r2
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	40d3      	lsrs	r3, r2
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d0e:	5cd3      	ldrb	r3, [r2, r3]
 8003d10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	0800586c 	.word	0x0800586c

08003d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d2a:	f7ff ffcd 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003d2e:	4601      	mov	r1, r0
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	fa92 f2a2 	rbit	r2, r2
 8003d44:	603a      	str	r2, [r7, #0]
  return result;
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	fab2 f282 	clz	r2, r2
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	40d3      	lsrs	r3, r2
 8003d50:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d52:	5cd3      	ldrb	r3, [r2, r3]
 8003d54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	0800586c 	.word	0x0800586c

08003d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b092      	sub	sp, #72	; 0x48
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80cd 	beq.w	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8c:	4b8e      	ldr	r3, [pc, #568]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10e      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d98:	4b8b      	ldr	r3, [pc, #556]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	4a8a      	ldr	r2, [pc, #552]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da2:	61d3      	str	r3, [r2, #28]
 8003da4:	4b88      	ldr	r3, [pc, #544]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	4b85      	ldr	r3, [pc, #532]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d118      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc2:	4b82      	ldr	r3, [pc, #520]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a81      	ldr	r2, [pc, #516]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dce:	f7fd fccb 	bl	8001768 <HAL_GetTick>
 8003dd2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	e008      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fd fcc7 	bl	8001768 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b64      	cmp	r3, #100	; 0x64
 8003de2:	d901      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0ea      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	4b78      	ldr	r3, [pc, #480]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003df4:	4b74      	ldr	r3, [pc, #464]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d07d      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d076      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e12:	4b6d      	ldr	r3, [pc, #436]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e20:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b66      	ldr	r3, [pc, #408]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e50:	fab3 f383 	clz	r3, r3
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	4b5d      	ldr	r3, [pc, #372]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2300      	movs	r3, #0
 8003e62:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e64:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e68:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d045      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fd fc78 	bl	8001768 <HAL_GetTick>
 8003e78:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fc74 	bl	8001768 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e095      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003e92:	2302      	movs	r3, #2
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	623b      	str	r3, [r7, #32]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	61fb      	str	r3, [r7, #28]
  return result;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eac:	fab3 f383 	clz	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f043 0302 	orr.w	r3, r3, #2
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d102      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ec0:	4b41      	ldr	r3, [pc, #260]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	e007      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	613a      	str	r2, [r7, #16]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	fa92 f2a2 	rbit	r2, r2
 8003ee0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	fab2 f282 	clz	r2, r2
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	f002 021f 	and.w	r2, r2, #31
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0bd      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f00:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	492e      	ldr	r1, [pc, #184]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d105      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1a:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	4a2a      	ldr	r2, [pc, #168]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f24:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f32:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4922      	ldr	r1, [pc, #136]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f50:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	f023 0210 	bic.w	r2, r3, #16
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	491a      	ldr	r1, [pc, #104]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f6e:	4b16      	ldr	r3, [pc, #88]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	4913      	ldr	r1, [pc, #76]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f8c:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	490b      	ldr	r1, [pc, #44]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3748      	adds	r7, #72	; 0x48
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40007000 	.word	0x40007000
 8003fd0:	10908100 	.word	0x10908100

08003fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e040      	b.n	8004068 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fd fa10 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	; 0x24
 8004000:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f95e 	bl	80042dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f825 	bl	8004070 <UART_SetConfig>
 8004026:	4603      	mov	r3, r0
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e01b      	b.n	8004068 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800403e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800404e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f9dd 	bl	8004420 <UART_CheckIdleState>
 8004066:	4603      	mov	r3, r0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4b8a      	ldr	r3, [pc, #552]	; (80042c4 <UART_SetConfig+0x254>)
 800409c:	4013      	ands	r3, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	6979      	ldr	r1, [r7, #20]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	430a      	orrs	r2, r1
 80040e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a78      	ldr	r2, [pc, #480]	; (80042c8 <UART_SetConfig+0x258>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d120      	bne.n	800412e <UART_SetConfig+0xbe>
 80040ec:	4b77      	ldr	r3, [pc, #476]	; (80042cc <UART_SetConfig+0x25c>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d817      	bhi.n	8004128 <UART_SetConfig+0xb8>
 80040f8:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0x90>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	08004111 	.word	0x08004111
 8004104:	0800411d 	.word	0x0800411d
 8004108:	08004123 	.word	0x08004123
 800410c:	08004117 	.word	0x08004117
 8004110:	2300      	movs	r3, #0
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e01d      	b.n	8004152 <UART_SetConfig+0xe2>
 8004116:	2302      	movs	r3, #2
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e01a      	b.n	8004152 <UART_SetConfig+0xe2>
 800411c:	2304      	movs	r3, #4
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e017      	b.n	8004152 <UART_SetConfig+0xe2>
 8004122:	2308      	movs	r3, #8
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e014      	b.n	8004152 <UART_SetConfig+0xe2>
 8004128:	2310      	movs	r3, #16
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e011      	b.n	8004152 <UART_SetConfig+0xe2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a67      	ldr	r2, [pc, #412]	; (80042d0 <UART_SetConfig+0x260>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d102      	bne.n	800413e <UART_SetConfig+0xce>
 8004138:	2300      	movs	r3, #0
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e009      	b.n	8004152 <UART_SetConfig+0xe2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a64      	ldr	r2, [pc, #400]	; (80042d4 <UART_SetConfig+0x264>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d102      	bne.n	800414e <UART_SetConfig+0xde>
 8004148:	2300      	movs	r3, #0
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e001      	b.n	8004152 <UART_SetConfig+0xe2>
 800414e:	2310      	movs	r3, #16
 8004150:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415a:	d15a      	bne.n	8004212 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800415c:	7ffb      	ldrb	r3, [r7, #31]
 800415e:	2b08      	cmp	r3, #8
 8004160:	d827      	bhi.n	80041b2 <UART_SetConfig+0x142>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <UART_SetConfig+0xf8>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	0800418d 	.word	0x0800418d
 800416c:	08004195 	.word	0x08004195
 8004170:	0800419d 	.word	0x0800419d
 8004174:	080041b3 	.word	0x080041b3
 8004178:	080041a3 	.word	0x080041a3
 800417c:	080041b3 	.word	0x080041b3
 8004180:	080041b3 	.word	0x080041b3
 8004184:	080041b3 	.word	0x080041b3
 8004188:	080041ab 	.word	0x080041ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800418c:	f7ff fda8 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004190:	61b8      	str	r0, [r7, #24]
        break;
 8004192:	e013      	b.n	80041bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004194:	f7ff fdc6 	bl	8003d24 <HAL_RCC_GetPCLK2Freq>
 8004198:	61b8      	str	r0, [r7, #24]
        break;
 800419a:	e00f      	b.n	80041bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800419c:	4b4e      	ldr	r3, [pc, #312]	; (80042d8 <UART_SetConfig+0x268>)
 800419e:	61bb      	str	r3, [r7, #24]
        break;
 80041a0:	e00c      	b.n	80041bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041a2:	f7ff fd3d 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 80041a6:	61b8      	str	r0, [r7, #24]
        break;
 80041a8:	e008      	b.n	80041bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ae:	61bb      	str	r3, [r7, #24]
        break;
 80041b0:	e004      	b.n	80041bc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	77bb      	strb	r3, [r7, #30]
        break;
 80041ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d074      	beq.n	80042ac <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	005a      	lsls	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b0f      	cmp	r3, #15
 80041dc:	d916      	bls.n	800420c <UART_SetConfig+0x19c>
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e4:	d212      	bcs.n	800420c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f023 030f 	bic.w	r3, r3, #15
 80041ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	89fb      	ldrh	r3, [r7, #14]
 80041fe:	4313      	orrs	r3, r2
 8004200:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	89fa      	ldrh	r2, [r7, #14]
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	e04f      	b.n	80042ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	77bb      	strb	r3, [r7, #30]
 8004210:	e04c      	b.n	80042ac <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004212:	7ffb      	ldrb	r3, [r7, #31]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d828      	bhi.n	800426a <UART_SetConfig+0x1fa>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <UART_SetConfig+0x1b0>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	0800426b 	.word	0x0800426b
 8004230:	0800425b 	.word	0x0800425b
 8004234:	0800426b 	.word	0x0800426b
 8004238:	0800426b 	.word	0x0800426b
 800423c:	0800426b 	.word	0x0800426b
 8004240:	08004263 	.word	0x08004263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004244:	f7ff fd4c 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004248:	61b8      	str	r0, [r7, #24]
        break;
 800424a:	e013      	b.n	8004274 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7ff fd6a 	bl	8003d24 <HAL_RCC_GetPCLK2Freq>
 8004250:	61b8      	str	r0, [r7, #24]
        break;
 8004252:	e00f      	b.n	8004274 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004254:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <UART_SetConfig+0x268>)
 8004256:	61bb      	str	r3, [r7, #24]
        break;
 8004258:	e00c      	b.n	8004274 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425a:	f7ff fce1 	bl	8003c20 <HAL_RCC_GetSysClockFreq>
 800425e:	61b8      	str	r0, [r7, #24]
        break;
 8004260:	e008      	b.n	8004274 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004266:	61bb      	str	r3, [r7, #24]
        break;
 8004268:	e004      	b.n	8004274 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	77bb      	strb	r3, [r7, #30]
        break;
 8004272:	bf00      	nop
    }

    if (pclk != 0U)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d018      	beq.n	80042ac <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	085a      	lsrs	r2, r3, #1
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	441a      	add	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	fbb2 f3f3 	udiv	r3, r2, r3
 800428c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b0f      	cmp	r3, #15
 8004292:	d909      	bls.n	80042a8 <UART_SetConfig+0x238>
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429a:	d205      	bcs.n	80042a8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	b29a      	uxth	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	e001      	b.n	80042ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80042b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	efff69f3 	.word	0xefff69f3
 80042c8:	40013800 	.word	0x40013800
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40004400 	.word	0x40004400
 80042d4:	40004800 	.word	0x40004800
 80042d8:	007a1200 	.word	0x007a1200

080042dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01a      	beq.n	80043f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043da:	d10a      	bne.n	80043f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]
  }
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b098      	sub	sp, #96	; 0x60
 8004424:	af02      	add	r7, sp, #8
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004430:	f7fd f99a 	bl	8001768 <HAL_GetTick>
 8004434:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b08      	cmp	r3, #8
 8004442:	d12e      	bne.n	80044a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800444c:	2200      	movs	r2, #0
 800444e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f88c 	bl	8004570 <UART_WaitOnFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d021      	beq.n	80044a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800446c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004472:	653b      	str	r3, [r7, #80]	; 0x50
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447c:	647b      	str	r3, [r7, #68]	; 0x44
 800447e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800448a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e6      	bne.n	800445e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e062      	b.n	8004568 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d149      	bne.n	8004544 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b8:	2200      	movs	r2, #0
 80044ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f856 	bl	8004570 <UART_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03c      	beq.n	8004544 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	623b      	str	r3, [r7, #32]
   return(result);
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30
 80044ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e6      	bne.n	80044ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	60fb      	str	r3, [r7, #12]
   return(result);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	64bb      	str	r3, [r7, #72]	; 0x48
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451c:	61fa      	str	r2, [r7, #28]
 800451e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	69b9      	ldr	r1, [r7, #24]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	617b      	str	r3, [r7, #20]
   return(result);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e011      	b.n	8004568 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3758      	adds	r7, #88	; 0x58
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004580:	e04f      	b.n	8004622 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d04b      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7fd f8ed 	bl	8001768 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e04e      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d037      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d034      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d031      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d110      	bne.n	80045ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2208      	movs	r2, #8
 80045d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f838 	bl	800464a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2208      	movs	r2, #8
 80045de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e029      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fc:	d111      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f81e 	bl	800464a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e00f      	b.n	8004642 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4013      	ands	r3, r2
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	bf0c      	ite	eq
 8004632:	2301      	moveq	r3, #1
 8004634:	2300      	movne	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	461a      	mov	r2, r3
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	429a      	cmp	r2, r3
 800463e:	d0a0      	beq.n	8004582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800464a:	b480      	push	{r7}
 800464c:	b095      	sub	sp, #84	; 0x54
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004670:	643b      	str	r3, [r7, #64]	; 0x40
 8004672:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004676:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e6      	bne.n	8004652 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	61fb      	str	r3, [r7, #28]
   return(result);
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	64bb      	str	r3, [r7, #72]	; 0x48
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e5      	bne.n	8004684 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d118      	bne.n	80046f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f023 0310 	bic.w	r3, r3, #16
 80046d4:	647b      	str	r3, [r7, #68]	; 0x44
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6979      	ldr	r1, [r7, #20]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	613b      	str	r3, [r7, #16]
   return(result);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e6      	bne.n	80046c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004706:	bf00      	nop
 8004708:	3754      	adds	r7, #84	; 0x54
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <std>:
 8004714:	2300      	movs	r3, #0
 8004716:	b510      	push	{r4, lr}
 8004718:	4604      	mov	r4, r0
 800471a:	e9c0 3300 	strd	r3, r3, [r0]
 800471e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004722:	6083      	str	r3, [r0, #8]
 8004724:	8181      	strh	r1, [r0, #12]
 8004726:	6643      	str	r3, [r0, #100]	; 0x64
 8004728:	81c2      	strh	r2, [r0, #14]
 800472a:	6183      	str	r3, [r0, #24]
 800472c:	4619      	mov	r1, r3
 800472e:	2208      	movs	r2, #8
 8004730:	305c      	adds	r0, #92	; 0x5c
 8004732:	f000 f9e5 	bl	8004b00 <memset>
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <std+0x38>)
 8004738:	6263      	str	r3, [r4, #36]	; 0x24
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <std+0x3c>)
 800473c:	62a3      	str	r3, [r4, #40]	; 0x28
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <std+0x40>)
 8004740:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <std+0x44>)
 8004744:	6224      	str	r4, [r4, #32]
 8004746:	6323      	str	r3, [r4, #48]	; 0x30
 8004748:	bd10      	pop	{r4, pc}
 800474a:	bf00      	nop
 800474c:	08004951 	.word	0x08004951
 8004750:	08004973 	.word	0x08004973
 8004754:	080049ab 	.word	0x080049ab
 8004758:	080049cf 	.word	0x080049cf

0800475c <stdio_exit_handler>:
 800475c:	4a02      	ldr	r2, [pc, #8]	; (8004768 <stdio_exit_handler+0xc>)
 800475e:	4903      	ldr	r1, [pc, #12]	; (800476c <stdio_exit_handler+0x10>)
 8004760:	4803      	ldr	r0, [pc, #12]	; (8004770 <stdio_exit_handler+0x14>)
 8004762:	f000 b869 	b.w	8004838 <_fwalk_sglue>
 8004766:	bf00      	nop
 8004768:	20000018 	.word	0x20000018
 800476c:	08005499 	.word	0x08005499
 8004770:	20000024 	.word	0x20000024

08004774 <cleanup_stdio>:
 8004774:	6841      	ldr	r1, [r0, #4]
 8004776:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <cleanup_stdio+0x34>)
 8004778:	4299      	cmp	r1, r3
 800477a:	b510      	push	{r4, lr}
 800477c:	4604      	mov	r4, r0
 800477e:	d001      	beq.n	8004784 <cleanup_stdio+0x10>
 8004780:	f000 fe8a 	bl	8005498 <_fflush_r>
 8004784:	68a1      	ldr	r1, [r4, #8]
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <cleanup_stdio+0x38>)
 8004788:	4299      	cmp	r1, r3
 800478a:	d002      	beq.n	8004792 <cleanup_stdio+0x1e>
 800478c:	4620      	mov	r0, r4
 800478e:	f000 fe83 	bl	8005498 <_fflush_r>
 8004792:	68e1      	ldr	r1, [r4, #12]
 8004794:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <cleanup_stdio+0x3c>)
 8004796:	4299      	cmp	r1, r3
 8004798:	d004      	beq.n	80047a4 <cleanup_stdio+0x30>
 800479a:	4620      	mov	r0, r4
 800479c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a0:	f000 be7a 	b.w	8005498 <_fflush_r>
 80047a4:	bd10      	pop	{r4, pc}
 80047a6:	bf00      	nop
 80047a8:	20000178 	.word	0x20000178
 80047ac:	200001e0 	.word	0x200001e0
 80047b0:	20000248 	.word	0x20000248

080047b4 <global_stdio_init.part.0>:
 80047b4:	b510      	push	{r4, lr}
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <global_stdio_init.part.0+0x30>)
 80047b8:	4c0b      	ldr	r4, [pc, #44]	; (80047e8 <global_stdio_init.part.0+0x34>)
 80047ba:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <global_stdio_init.part.0+0x38>)
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	4620      	mov	r0, r4
 80047c0:	2200      	movs	r2, #0
 80047c2:	2104      	movs	r1, #4
 80047c4:	f7ff ffa6 	bl	8004714 <std>
 80047c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80047cc:	2201      	movs	r2, #1
 80047ce:	2109      	movs	r1, #9
 80047d0:	f7ff ffa0 	bl	8004714 <std>
 80047d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80047d8:	2202      	movs	r2, #2
 80047da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047de:	2112      	movs	r1, #18
 80047e0:	f7ff bf98 	b.w	8004714 <std>
 80047e4:	200002b0 	.word	0x200002b0
 80047e8:	20000178 	.word	0x20000178
 80047ec:	0800475d 	.word	0x0800475d

080047f0 <__sfp_lock_acquire>:
 80047f0:	4801      	ldr	r0, [pc, #4]	; (80047f8 <__sfp_lock_acquire+0x8>)
 80047f2:	f000 b9fd 	b.w	8004bf0 <__retarget_lock_acquire_recursive>
 80047f6:	bf00      	nop
 80047f8:	200002b9 	.word	0x200002b9

080047fc <__sfp_lock_release>:
 80047fc:	4801      	ldr	r0, [pc, #4]	; (8004804 <__sfp_lock_release+0x8>)
 80047fe:	f000 b9f8 	b.w	8004bf2 <__retarget_lock_release_recursive>
 8004802:	bf00      	nop
 8004804:	200002b9 	.word	0x200002b9

08004808 <__sinit>:
 8004808:	b510      	push	{r4, lr}
 800480a:	4604      	mov	r4, r0
 800480c:	f7ff fff0 	bl	80047f0 <__sfp_lock_acquire>
 8004810:	6a23      	ldr	r3, [r4, #32]
 8004812:	b11b      	cbz	r3, 800481c <__sinit+0x14>
 8004814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004818:	f7ff bff0 	b.w	80047fc <__sfp_lock_release>
 800481c:	4b04      	ldr	r3, [pc, #16]	; (8004830 <__sinit+0x28>)
 800481e:	6223      	str	r3, [r4, #32]
 8004820:	4b04      	ldr	r3, [pc, #16]	; (8004834 <__sinit+0x2c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f5      	bne.n	8004814 <__sinit+0xc>
 8004828:	f7ff ffc4 	bl	80047b4 <global_stdio_init.part.0>
 800482c:	e7f2      	b.n	8004814 <__sinit+0xc>
 800482e:	bf00      	nop
 8004830:	08004775 	.word	0x08004775
 8004834:	200002b0 	.word	0x200002b0

08004838 <_fwalk_sglue>:
 8004838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800483c:	4607      	mov	r7, r0
 800483e:	4688      	mov	r8, r1
 8004840:	4614      	mov	r4, r2
 8004842:	2600      	movs	r6, #0
 8004844:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004848:	f1b9 0901 	subs.w	r9, r9, #1
 800484c:	d505      	bpl.n	800485a <_fwalk_sglue+0x22>
 800484e:	6824      	ldr	r4, [r4, #0]
 8004850:	2c00      	cmp	r4, #0
 8004852:	d1f7      	bne.n	8004844 <_fwalk_sglue+0xc>
 8004854:	4630      	mov	r0, r6
 8004856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800485a:	89ab      	ldrh	r3, [r5, #12]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d907      	bls.n	8004870 <_fwalk_sglue+0x38>
 8004860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004864:	3301      	adds	r3, #1
 8004866:	d003      	beq.n	8004870 <_fwalk_sglue+0x38>
 8004868:	4629      	mov	r1, r5
 800486a:	4638      	mov	r0, r7
 800486c:	47c0      	blx	r8
 800486e:	4306      	orrs	r6, r0
 8004870:	3568      	adds	r5, #104	; 0x68
 8004872:	e7e9      	b.n	8004848 <_fwalk_sglue+0x10>

08004874 <iprintf>:
 8004874:	b40f      	push	{r0, r1, r2, r3}
 8004876:	b507      	push	{r0, r1, r2, lr}
 8004878:	4906      	ldr	r1, [pc, #24]	; (8004894 <iprintf+0x20>)
 800487a:	ab04      	add	r3, sp, #16
 800487c:	6808      	ldr	r0, [r1, #0]
 800487e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004882:	6881      	ldr	r1, [r0, #8]
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	f000 fad7 	bl	8004e38 <_vfiprintf_r>
 800488a:	b003      	add	sp, #12
 800488c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004890:	b004      	add	sp, #16
 8004892:	4770      	bx	lr
 8004894:	20000070 	.word	0x20000070

08004898 <_puts_r>:
 8004898:	6a03      	ldr	r3, [r0, #32]
 800489a:	b570      	push	{r4, r5, r6, lr}
 800489c:	6884      	ldr	r4, [r0, #8]
 800489e:	4605      	mov	r5, r0
 80048a0:	460e      	mov	r6, r1
 80048a2:	b90b      	cbnz	r3, 80048a8 <_puts_r+0x10>
 80048a4:	f7ff ffb0 	bl	8004808 <__sinit>
 80048a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048aa:	07db      	lsls	r3, r3, #31
 80048ac:	d405      	bmi.n	80048ba <_puts_r+0x22>
 80048ae:	89a3      	ldrh	r3, [r4, #12]
 80048b0:	0598      	lsls	r0, r3, #22
 80048b2:	d402      	bmi.n	80048ba <_puts_r+0x22>
 80048b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048b6:	f000 f99b 	bl	8004bf0 <__retarget_lock_acquire_recursive>
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	0719      	lsls	r1, r3, #28
 80048be:	d513      	bpl.n	80048e8 <_puts_r+0x50>
 80048c0:	6923      	ldr	r3, [r4, #16]
 80048c2:	b18b      	cbz	r3, 80048e8 <_puts_r+0x50>
 80048c4:	3e01      	subs	r6, #1
 80048c6:	68a3      	ldr	r3, [r4, #8]
 80048c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048cc:	3b01      	subs	r3, #1
 80048ce:	60a3      	str	r3, [r4, #8]
 80048d0:	b9e9      	cbnz	r1, 800490e <_puts_r+0x76>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	da2e      	bge.n	8004934 <_puts_r+0x9c>
 80048d6:	4622      	mov	r2, r4
 80048d8:	210a      	movs	r1, #10
 80048da:	4628      	mov	r0, r5
 80048dc:	f000 f87b 	bl	80049d6 <__swbuf_r>
 80048e0:	3001      	adds	r0, #1
 80048e2:	d007      	beq.n	80048f4 <_puts_r+0x5c>
 80048e4:	250a      	movs	r5, #10
 80048e6:	e007      	b.n	80048f8 <_puts_r+0x60>
 80048e8:	4621      	mov	r1, r4
 80048ea:	4628      	mov	r0, r5
 80048ec:	f000 f8b0 	bl	8004a50 <__swsetup_r>
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d0e7      	beq.n	80048c4 <_puts_r+0x2c>
 80048f4:	f04f 35ff 	mov.w	r5, #4294967295
 80048f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048fa:	07da      	lsls	r2, r3, #31
 80048fc:	d405      	bmi.n	800490a <_puts_r+0x72>
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	059b      	lsls	r3, r3, #22
 8004902:	d402      	bmi.n	800490a <_puts_r+0x72>
 8004904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004906:	f000 f974 	bl	8004bf2 <__retarget_lock_release_recursive>
 800490a:	4628      	mov	r0, r5
 800490c:	bd70      	pop	{r4, r5, r6, pc}
 800490e:	2b00      	cmp	r3, #0
 8004910:	da04      	bge.n	800491c <_puts_r+0x84>
 8004912:	69a2      	ldr	r2, [r4, #24]
 8004914:	429a      	cmp	r2, r3
 8004916:	dc06      	bgt.n	8004926 <_puts_r+0x8e>
 8004918:	290a      	cmp	r1, #10
 800491a:	d004      	beq.n	8004926 <_puts_r+0x8e>
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	6022      	str	r2, [r4, #0]
 8004922:	7019      	strb	r1, [r3, #0]
 8004924:	e7cf      	b.n	80048c6 <_puts_r+0x2e>
 8004926:	4622      	mov	r2, r4
 8004928:	4628      	mov	r0, r5
 800492a:	f000 f854 	bl	80049d6 <__swbuf_r>
 800492e:	3001      	adds	r0, #1
 8004930:	d1c9      	bne.n	80048c6 <_puts_r+0x2e>
 8004932:	e7df      	b.n	80048f4 <_puts_r+0x5c>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	250a      	movs	r5, #10
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	6022      	str	r2, [r4, #0]
 800493c:	701d      	strb	r5, [r3, #0]
 800493e:	e7db      	b.n	80048f8 <_puts_r+0x60>

08004940 <puts>:
 8004940:	4b02      	ldr	r3, [pc, #8]	; (800494c <puts+0xc>)
 8004942:	4601      	mov	r1, r0
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	f7ff bfa7 	b.w	8004898 <_puts_r>
 800494a:	bf00      	nop
 800494c:	20000070 	.word	0x20000070

08004950 <__sread>:
 8004950:	b510      	push	{r4, lr}
 8004952:	460c      	mov	r4, r1
 8004954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004958:	f000 f8fc 	bl	8004b54 <_read_r>
 800495c:	2800      	cmp	r0, #0
 800495e:	bfab      	itete	ge
 8004960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004962:	89a3      	ldrhlt	r3, [r4, #12]
 8004964:	181b      	addge	r3, r3, r0
 8004966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800496a:	bfac      	ite	ge
 800496c:	6563      	strge	r3, [r4, #84]	; 0x54
 800496e:	81a3      	strhlt	r3, [r4, #12]
 8004970:	bd10      	pop	{r4, pc}

08004972 <__swrite>:
 8004972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004976:	461f      	mov	r7, r3
 8004978:	898b      	ldrh	r3, [r1, #12]
 800497a:	05db      	lsls	r3, r3, #23
 800497c:	4605      	mov	r5, r0
 800497e:	460c      	mov	r4, r1
 8004980:	4616      	mov	r6, r2
 8004982:	d505      	bpl.n	8004990 <__swrite+0x1e>
 8004984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004988:	2302      	movs	r3, #2
 800498a:	2200      	movs	r2, #0
 800498c:	f000 f8d0 	bl	8004b30 <_lseek_r>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800499a:	81a3      	strh	r3, [r4, #12]
 800499c:	4632      	mov	r2, r6
 800499e:	463b      	mov	r3, r7
 80049a0:	4628      	mov	r0, r5
 80049a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049a6:	f000 b8e7 	b.w	8004b78 <_write_r>

080049aa <__sseek>:
 80049aa:	b510      	push	{r4, lr}
 80049ac:	460c      	mov	r4, r1
 80049ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b2:	f000 f8bd 	bl	8004b30 <_lseek_r>
 80049b6:	1c43      	adds	r3, r0, #1
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	bf15      	itete	ne
 80049bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80049be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049c6:	81a3      	strheq	r3, [r4, #12]
 80049c8:	bf18      	it	ne
 80049ca:	81a3      	strhne	r3, [r4, #12]
 80049cc:	bd10      	pop	{r4, pc}

080049ce <__sclose>:
 80049ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d2:	f000 b89d 	b.w	8004b10 <_close_r>

080049d6 <__swbuf_r>:
 80049d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d8:	460e      	mov	r6, r1
 80049da:	4614      	mov	r4, r2
 80049dc:	4605      	mov	r5, r0
 80049de:	b118      	cbz	r0, 80049e8 <__swbuf_r+0x12>
 80049e0:	6a03      	ldr	r3, [r0, #32]
 80049e2:	b90b      	cbnz	r3, 80049e8 <__swbuf_r+0x12>
 80049e4:	f7ff ff10 	bl	8004808 <__sinit>
 80049e8:	69a3      	ldr	r3, [r4, #24]
 80049ea:	60a3      	str	r3, [r4, #8]
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	071a      	lsls	r2, r3, #28
 80049f0:	d525      	bpl.n	8004a3e <__swbuf_r+0x68>
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	b31b      	cbz	r3, 8004a3e <__swbuf_r+0x68>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	6922      	ldr	r2, [r4, #16]
 80049fa:	1a98      	subs	r0, r3, r2
 80049fc:	6963      	ldr	r3, [r4, #20]
 80049fe:	b2f6      	uxtb	r6, r6
 8004a00:	4283      	cmp	r3, r0
 8004a02:	4637      	mov	r7, r6
 8004a04:	dc04      	bgt.n	8004a10 <__swbuf_r+0x3a>
 8004a06:	4621      	mov	r1, r4
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f000 fd45 	bl	8005498 <_fflush_r>
 8004a0e:	b9e0      	cbnz	r0, 8004a4a <__swbuf_r+0x74>
 8004a10:	68a3      	ldr	r3, [r4, #8]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	6022      	str	r2, [r4, #0]
 8004a1c:	701e      	strb	r6, [r3, #0]
 8004a1e:	6962      	ldr	r2, [r4, #20]
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d004      	beq.n	8004a30 <__swbuf_r+0x5a>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	07db      	lsls	r3, r3, #31
 8004a2a:	d506      	bpl.n	8004a3a <__swbuf_r+0x64>
 8004a2c:	2e0a      	cmp	r6, #10
 8004a2e:	d104      	bne.n	8004a3a <__swbuf_r+0x64>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 fd30 	bl	8005498 <_fflush_r>
 8004a38:	b938      	cbnz	r0, 8004a4a <__swbuf_r+0x74>
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a3e:	4621      	mov	r1, r4
 8004a40:	4628      	mov	r0, r5
 8004a42:	f000 f805 	bl	8004a50 <__swsetup_r>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d0d5      	beq.n	80049f6 <__swbuf_r+0x20>
 8004a4a:	f04f 37ff 	mov.w	r7, #4294967295
 8004a4e:	e7f4      	b.n	8004a3a <__swbuf_r+0x64>

08004a50 <__swsetup_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	4b2a      	ldr	r3, [pc, #168]	; (8004afc <__swsetup_r+0xac>)
 8004a54:	4605      	mov	r5, r0
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	460c      	mov	r4, r1
 8004a5a:	b118      	cbz	r0, 8004a64 <__swsetup_r+0x14>
 8004a5c:	6a03      	ldr	r3, [r0, #32]
 8004a5e:	b90b      	cbnz	r3, 8004a64 <__swsetup_r+0x14>
 8004a60:	f7ff fed2 	bl	8004808 <__sinit>
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a6a:	0718      	lsls	r0, r3, #28
 8004a6c:	d422      	bmi.n	8004ab4 <__swsetup_r+0x64>
 8004a6e:	06d9      	lsls	r1, r3, #27
 8004a70:	d407      	bmi.n	8004a82 <__swsetup_r+0x32>
 8004a72:	2309      	movs	r3, #9
 8004a74:	602b      	str	r3, [r5, #0]
 8004a76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a7a:	81a3      	strh	r3, [r4, #12]
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	e034      	b.n	8004aec <__swsetup_r+0x9c>
 8004a82:	0758      	lsls	r0, r3, #29
 8004a84:	d512      	bpl.n	8004aac <__swsetup_r+0x5c>
 8004a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a88:	b141      	cbz	r1, 8004a9c <__swsetup_r+0x4c>
 8004a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	d002      	beq.n	8004a98 <__swsetup_r+0x48>
 8004a92:	4628      	mov	r0, r5
 8004a94:	f000 f8ae 	bl	8004bf4 <_free_r>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6363      	str	r3, [r4, #52]	; 0x34
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004aa2:	81a3      	strh	r3, [r4, #12]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	6063      	str	r3, [r4, #4]
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	f043 0308 	orr.w	r3, r3, #8
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	6923      	ldr	r3, [r4, #16]
 8004ab6:	b94b      	cbnz	r3, 8004acc <__swsetup_r+0x7c>
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac2:	d003      	beq.n	8004acc <__swsetup_r+0x7c>
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 fd34 	bl	8005534 <__smakebuf_r>
 8004acc:	89a0      	ldrh	r0, [r4, #12]
 8004ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ad2:	f010 0301 	ands.w	r3, r0, #1
 8004ad6:	d00a      	beq.n	8004aee <__swsetup_r+0x9e>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60a3      	str	r3, [r4, #8]
 8004adc:	6963      	ldr	r3, [r4, #20]
 8004ade:	425b      	negs	r3, r3
 8004ae0:	61a3      	str	r3, [r4, #24]
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	b943      	cbnz	r3, 8004af8 <__swsetup_r+0xa8>
 8004ae6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004aea:	d1c4      	bne.n	8004a76 <__swsetup_r+0x26>
 8004aec:	bd38      	pop	{r3, r4, r5, pc}
 8004aee:	0781      	lsls	r1, r0, #30
 8004af0:	bf58      	it	pl
 8004af2:	6963      	ldrpl	r3, [r4, #20]
 8004af4:	60a3      	str	r3, [r4, #8]
 8004af6:	e7f4      	b.n	8004ae2 <__swsetup_r+0x92>
 8004af8:	2000      	movs	r0, #0
 8004afa:	e7f7      	b.n	8004aec <__swsetup_r+0x9c>
 8004afc:	20000070 	.word	0x20000070

08004b00 <memset>:
 8004b00:	4402      	add	r2, r0
 8004b02:	4603      	mov	r3, r0
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d100      	bne.n	8004b0a <memset+0xa>
 8004b08:	4770      	bx	lr
 8004b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0e:	e7f9      	b.n	8004b04 <memset+0x4>

08004b10 <_close_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4d06      	ldr	r5, [pc, #24]	; (8004b2c <_close_r+0x1c>)
 8004b14:	2300      	movs	r3, #0
 8004b16:	4604      	mov	r4, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	f7fc fd23 	bl	8001566 <_close>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_close_r+0x1a>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_close_r+0x1a>
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	200002b4 	.word	0x200002b4

08004b30 <_lseek_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4d07      	ldr	r5, [pc, #28]	; (8004b50 <_lseek_r+0x20>)
 8004b34:	4604      	mov	r4, r0
 8004b36:	4608      	mov	r0, r1
 8004b38:	4611      	mov	r1, r2
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	602a      	str	r2, [r5, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f7fc fd38 	bl	80015b4 <_lseek>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_lseek_r+0x1e>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_lseek_r+0x1e>
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	200002b4 	.word	0x200002b4

08004b54 <_read_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	4d07      	ldr	r5, [pc, #28]	; (8004b74 <_read_r+0x20>)
 8004b58:	4604      	mov	r4, r0
 8004b5a:	4608      	mov	r0, r1
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	2200      	movs	r2, #0
 8004b60:	602a      	str	r2, [r5, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f7fc fcc6 	bl	80014f4 <_read>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_read_r+0x1e>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_read_r+0x1e>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	200002b4 	.word	0x200002b4

08004b78 <_write_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4d07      	ldr	r5, [pc, #28]	; (8004b98 <_write_r+0x20>)
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	4608      	mov	r0, r1
 8004b80:	4611      	mov	r1, r2
 8004b82:	2200      	movs	r2, #0
 8004b84:	602a      	str	r2, [r5, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f7fc fcd1 	bl	800152e <_write>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d102      	bne.n	8004b96 <_write_r+0x1e>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	b103      	cbz	r3, 8004b96 <_write_r+0x1e>
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	200002b4 	.word	0x200002b4

08004b9c <__errno>:
 8004b9c:	4b01      	ldr	r3, [pc, #4]	; (8004ba4 <__errno+0x8>)
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000070 	.word	0x20000070

08004ba8 <__libc_init_array>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	4d0d      	ldr	r5, [pc, #52]	; (8004be0 <__libc_init_array+0x38>)
 8004bac:	4c0d      	ldr	r4, [pc, #52]	; (8004be4 <__libc_init_array+0x3c>)
 8004bae:	1b64      	subs	r4, r4, r5
 8004bb0:	10a4      	asrs	r4, r4, #2
 8004bb2:	2600      	movs	r6, #0
 8004bb4:	42a6      	cmp	r6, r4
 8004bb6:	d109      	bne.n	8004bcc <__libc_init_array+0x24>
 8004bb8:	4d0b      	ldr	r5, [pc, #44]	; (8004be8 <__libc_init_array+0x40>)
 8004bba:	4c0c      	ldr	r4, [pc, #48]	; (8004bec <__libc_init_array+0x44>)
 8004bbc:	f000 fd28 	bl	8005610 <_init>
 8004bc0:	1b64      	subs	r4, r4, r5
 8004bc2:	10a4      	asrs	r4, r4, #2
 8004bc4:	2600      	movs	r6, #0
 8004bc6:	42a6      	cmp	r6, r4
 8004bc8:	d105      	bne.n	8004bd6 <__libc_init_array+0x2e>
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd0:	4798      	blx	r3
 8004bd2:	3601      	adds	r6, #1
 8004bd4:	e7ee      	b.n	8004bb4 <__libc_init_array+0xc>
 8004bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bda:	4798      	blx	r3
 8004bdc:	3601      	adds	r6, #1
 8004bde:	e7f2      	b.n	8004bc6 <__libc_init_array+0x1e>
 8004be0:	080058c8 	.word	0x080058c8
 8004be4:	080058c8 	.word	0x080058c8
 8004be8:	080058c8 	.word	0x080058c8
 8004bec:	080058cc 	.word	0x080058cc

08004bf0 <__retarget_lock_acquire_recursive>:
 8004bf0:	4770      	bx	lr

08004bf2 <__retarget_lock_release_recursive>:
 8004bf2:	4770      	bx	lr

08004bf4 <_free_r>:
 8004bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bf6:	2900      	cmp	r1, #0
 8004bf8:	d044      	beq.n	8004c84 <_free_r+0x90>
 8004bfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bfe:	9001      	str	r0, [sp, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f1a1 0404 	sub.w	r4, r1, #4
 8004c06:	bfb8      	it	lt
 8004c08:	18e4      	addlt	r4, r4, r3
 8004c0a:	f000 f8df 	bl	8004dcc <__malloc_lock>
 8004c0e:	4a1e      	ldr	r2, [pc, #120]	; (8004c88 <_free_r+0x94>)
 8004c10:	9801      	ldr	r0, [sp, #4]
 8004c12:	6813      	ldr	r3, [r2, #0]
 8004c14:	b933      	cbnz	r3, 8004c24 <_free_r+0x30>
 8004c16:	6063      	str	r3, [r4, #4]
 8004c18:	6014      	str	r4, [r2, #0]
 8004c1a:	b003      	add	sp, #12
 8004c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c20:	f000 b8da 	b.w	8004dd8 <__malloc_unlock>
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	d908      	bls.n	8004c3a <_free_r+0x46>
 8004c28:	6825      	ldr	r5, [r4, #0]
 8004c2a:	1961      	adds	r1, r4, r5
 8004c2c:	428b      	cmp	r3, r1
 8004c2e:	bf01      	itttt	eq
 8004c30:	6819      	ldreq	r1, [r3, #0]
 8004c32:	685b      	ldreq	r3, [r3, #4]
 8004c34:	1949      	addeq	r1, r1, r5
 8004c36:	6021      	streq	r1, [r4, #0]
 8004c38:	e7ed      	b.n	8004c16 <_free_r+0x22>
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	b10b      	cbz	r3, 8004c44 <_free_r+0x50>
 8004c40:	42a3      	cmp	r3, r4
 8004c42:	d9fa      	bls.n	8004c3a <_free_r+0x46>
 8004c44:	6811      	ldr	r1, [r2, #0]
 8004c46:	1855      	adds	r5, r2, r1
 8004c48:	42a5      	cmp	r5, r4
 8004c4a:	d10b      	bne.n	8004c64 <_free_r+0x70>
 8004c4c:	6824      	ldr	r4, [r4, #0]
 8004c4e:	4421      	add	r1, r4
 8004c50:	1854      	adds	r4, r2, r1
 8004c52:	42a3      	cmp	r3, r4
 8004c54:	6011      	str	r1, [r2, #0]
 8004c56:	d1e0      	bne.n	8004c1a <_free_r+0x26>
 8004c58:	681c      	ldr	r4, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	6053      	str	r3, [r2, #4]
 8004c5e:	440c      	add	r4, r1
 8004c60:	6014      	str	r4, [r2, #0]
 8004c62:	e7da      	b.n	8004c1a <_free_r+0x26>
 8004c64:	d902      	bls.n	8004c6c <_free_r+0x78>
 8004c66:	230c      	movs	r3, #12
 8004c68:	6003      	str	r3, [r0, #0]
 8004c6a:	e7d6      	b.n	8004c1a <_free_r+0x26>
 8004c6c:	6825      	ldr	r5, [r4, #0]
 8004c6e:	1961      	adds	r1, r4, r5
 8004c70:	428b      	cmp	r3, r1
 8004c72:	bf04      	itt	eq
 8004c74:	6819      	ldreq	r1, [r3, #0]
 8004c76:	685b      	ldreq	r3, [r3, #4]
 8004c78:	6063      	str	r3, [r4, #4]
 8004c7a:	bf04      	itt	eq
 8004c7c:	1949      	addeq	r1, r1, r5
 8004c7e:	6021      	streq	r1, [r4, #0]
 8004c80:	6054      	str	r4, [r2, #4]
 8004c82:	e7ca      	b.n	8004c1a <_free_r+0x26>
 8004c84:	b003      	add	sp, #12
 8004c86:	bd30      	pop	{r4, r5, pc}
 8004c88:	200002bc 	.word	0x200002bc

08004c8c <sbrk_aligned>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4e0e      	ldr	r6, [pc, #56]	; (8004cc8 <sbrk_aligned+0x3c>)
 8004c90:	460c      	mov	r4, r1
 8004c92:	6831      	ldr	r1, [r6, #0]
 8004c94:	4605      	mov	r5, r0
 8004c96:	b911      	cbnz	r1, 8004c9e <sbrk_aligned+0x12>
 8004c98:	f000 fcaa 	bl	80055f0 <_sbrk_r>
 8004c9c:	6030      	str	r0, [r6, #0]
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f000 fca5 	bl	80055f0 <_sbrk_r>
 8004ca6:	1c43      	adds	r3, r0, #1
 8004ca8:	d00a      	beq.n	8004cc0 <sbrk_aligned+0x34>
 8004caa:	1cc4      	adds	r4, r0, #3
 8004cac:	f024 0403 	bic.w	r4, r4, #3
 8004cb0:	42a0      	cmp	r0, r4
 8004cb2:	d007      	beq.n	8004cc4 <sbrk_aligned+0x38>
 8004cb4:	1a21      	subs	r1, r4, r0
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 fc9a 	bl	80055f0 <_sbrk_r>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d101      	bne.n	8004cc4 <sbrk_aligned+0x38>
 8004cc0:	f04f 34ff 	mov.w	r4, #4294967295
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	200002c0 	.word	0x200002c0

08004ccc <_malloc_r>:
 8004ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd0:	1ccd      	adds	r5, r1, #3
 8004cd2:	f025 0503 	bic.w	r5, r5, #3
 8004cd6:	3508      	adds	r5, #8
 8004cd8:	2d0c      	cmp	r5, #12
 8004cda:	bf38      	it	cc
 8004cdc:	250c      	movcc	r5, #12
 8004cde:	2d00      	cmp	r5, #0
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	db01      	blt.n	8004ce8 <_malloc_r+0x1c>
 8004ce4:	42a9      	cmp	r1, r5
 8004ce6:	d905      	bls.n	8004cf4 <_malloc_r+0x28>
 8004ce8:	230c      	movs	r3, #12
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	2600      	movs	r6, #0
 8004cee:	4630      	mov	r0, r6
 8004cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004dc8 <_malloc_r+0xfc>
 8004cf8:	f000 f868 	bl	8004dcc <__malloc_lock>
 8004cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8004d00:	461c      	mov	r4, r3
 8004d02:	bb5c      	cbnz	r4, 8004d5c <_malloc_r+0x90>
 8004d04:	4629      	mov	r1, r5
 8004d06:	4638      	mov	r0, r7
 8004d08:	f7ff ffc0 	bl	8004c8c <sbrk_aligned>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	4604      	mov	r4, r0
 8004d10:	d155      	bne.n	8004dbe <_malloc_r+0xf2>
 8004d12:	f8d8 4000 	ldr.w	r4, [r8]
 8004d16:	4626      	mov	r6, r4
 8004d18:	2e00      	cmp	r6, #0
 8004d1a:	d145      	bne.n	8004da8 <_malloc_r+0xdc>
 8004d1c:	2c00      	cmp	r4, #0
 8004d1e:	d048      	beq.n	8004db2 <_malloc_r+0xe6>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	4631      	mov	r1, r6
 8004d24:	4638      	mov	r0, r7
 8004d26:	eb04 0903 	add.w	r9, r4, r3
 8004d2a:	f000 fc61 	bl	80055f0 <_sbrk_r>
 8004d2e:	4581      	cmp	r9, r0
 8004d30:	d13f      	bne.n	8004db2 <_malloc_r+0xe6>
 8004d32:	6821      	ldr	r1, [r4, #0]
 8004d34:	1a6d      	subs	r5, r5, r1
 8004d36:	4629      	mov	r1, r5
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f7ff ffa7 	bl	8004c8c <sbrk_aligned>
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d037      	beq.n	8004db2 <_malloc_r+0xe6>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	442b      	add	r3, r5
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	f8d8 3000 	ldr.w	r3, [r8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d038      	beq.n	8004dc2 <_malloc_r+0xf6>
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	42a2      	cmp	r2, r4
 8004d54:	d12b      	bne.n	8004dae <_malloc_r+0xe2>
 8004d56:	2200      	movs	r2, #0
 8004d58:	605a      	str	r2, [r3, #4]
 8004d5a:	e00f      	b.n	8004d7c <_malloc_r+0xb0>
 8004d5c:	6822      	ldr	r2, [r4, #0]
 8004d5e:	1b52      	subs	r2, r2, r5
 8004d60:	d41f      	bmi.n	8004da2 <_malloc_r+0xd6>
 8004d62:	2a0b      	cmp	r2, #11
 8004d64:	d917      	bls.n	8004d96 <_malloc_r+0xca>
 8004d66:	1961      	adds	r1, r4, r5
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	6025      	str	r5, [r4, #0]
 8004d6c:	bf18      	it	ne
 8004d6e:	6059      	strne	r1, [r3, #4]
 8004d70:	6863      	ldr	r3, [r4, #4]
 8004d72:	bf08      	it	eq
 8004d74:	f8c8 1000 	streq.w	r1, [r8]
 8004d78:	5162      	str	r2, [r4, r5]
 8004d7a:	604b      	str	r3, [r1, #4]
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	f104 060b 	add.w	r6, r4, #11
 8004d82:	f000 f829 	bl	8004dd8 <__malloc_unlock>
 8004d86:	f026 0607 	bic.w	r6, r6, #7
 8004d8a:	1d23      	adds	r3, r4, #4
 8004d8c:	1af2      	subs	r2, r6, r3
 8004d8e:	d0ae      	beq.n	8004cee <_malloc_r+0x22>
 8004d90:	1b9b      	subs	r3, r3, r6
 8004d92:	50a3      	str	r3, [r4, r2]
 8004d94:	e7ab      	b.n	8004cee <_malloc_r+0x22>
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	6862      	ldr	r2, [r4, #4]
 8004d9a:	d1dd      	bne.n	8004d58 <_malloc_r+0x8c>
 8004d9c:	f8c8 2000 	str.w	r2, [r8]
 8004da0:	e7ec      	b.n	8004d7c <_malloc_r+0xb0>
 8004da2:	4623      	mov	r3, r4
 8004da4:	6864      	ldr	r4, [r4, #4]
 8004da6:	e7ac      	b.n	8004d02 <_malloc_r+0x36>
 8004da8:	4634      	mov	r4, r6
 8004daa:	6876      	ldr	r6, [r6, #4]
 8004dac:	e7b4      	b.n	8004d18 <_malloc_r+0x4c>
 8004dae:	4613      	mov	r3, r2
 8004db0:	e7cc      	b.n	8004d4c <_malloc_r+0x80>
 8004db2:	230c      	movs	r3, #12
 8004db4:	603b      	str	r3, [r7, #0]
 8004db6:	4638      	mov	r0, r7
 8004db8:	f000 f80e 	bl	8004dd8 <__malloc_unlock>
 8004dbc:	e797      	b.n	8004cee <_malloc_r+0x22>
 8004dbe:	6025      	str	r5, [r4, #0]
 8004dc0:	e7dc      	b.n	8004d7c <_malloc_r+0xb0>
 8004dc2:	605b      	str	r3, [r3, #4]
 8004dc4:	deff      	udf	#255	; 0xff
 8004dc6:	bf00      	nop
 8004dc8:	200002bc 	.word	0x200002bc

08004dcc <__malloc_lock>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__malloc_lock+0x8>)
 8004dce:	f7ff bf0f 	b.w	8004bf0 <__retarget_lock_acquire_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	200002b8 	.word	0x200002b8

08004dd8 <__malloc_unlock>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <__malloc_unlock+0x8>)
 8004dda:	f7ff bf0a 	b.w	8004bf2 <__retarget_lock_release_recursive>
 8004dde:	bf00      	nop
 8004de0:	200002b8 	.word	0x200002b8

08004de4 <__sfputc_r>:
 8004de4:	6893      	ldr	r3, [r2, #8]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	b410      	push	{r4}
 8004dec:	6093      	str	r3, [r2, #8]
 8004dee:	da08      	bge.n	8004e02 <__sfputc_r+0x1e>
 8004df0:	6994      	ldr	r4, [r2, #24]
 8004df2:	42a3      	cmp	r3, r4
 8004df4:	db01      	blt.n	8004dfa <__sfputc_r+0x16>
 8004df6:	290a      	cmp	r1, #10
 8004df8:	d103      	bne.n	8004e02 <__sfputc_r+0x1e>
 8004dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dfe:	f7ff bdea 	b.w	80049d6 <__swbuf_r>
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	1c58      	adds	r0, r3, #1
 8004e06:	6010      	str	r0, [r2, #0]
 8004e08:	7019      	strb	r1, [r3, #0]
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <__sfputs_r>:
 8004e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e14:	4606      	mov	r6, r0
 8004e16:	460f      	mov	r7, r1
 8004e18:	4614      	mov	r4, r2
 8004e1a:	18d5      	adds	r5, r2, r3
 8004e1c:	42ac      	cmp	r4, r5
 8004e1e:	d101      	bne.n	8004e24 <__sfputs_r+0x12>
 8004e20:	2000      	movs	r0, #0
 8004e22:	e007      	b.n	8004e34 <__sfputs_r+0x22>
 8004e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e28:	463a      	mov	r2, r7
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f7ff ffda 	bl	8004de4 <__sfputc_r>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d1f3      	bne.n	8004e1c <__sfputs_r+0xa>
 8004e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e38 <_vfiprintf_r>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	460d      	mov	r5, r1
 8004e3e:	b09d      	sub	sp, #116	; 0x74
 8004e40:	4614      	mov	r4, r2
 8004e42:	4698      	mov	r8, r3
 8004e44:	4606      	mov	r6, r0
 8004e46:	b118      	cbz	r0, 8004e50 <_vfiprintf_r+0x18>
 8004e48:	6a03      	ldr	r3, [r0, #32]
 8004e4a:	b90b      	cbnz	r3, 8004e50 <_vfiprintf_r+0x18>
 8004e4c:	f7ff fcdc 	bl	8004808 <__sinit>
 8004e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e52:	07d9      	lsls	r1, r3, #31
 8004e54:	d405      	bmi.n	8004e62 <_vfiprintf_r+0x2a>
 8004e56:	89ab      	ldrh	r3, [r5, #12]
 8004e58:	059a      	lsls	r2, r3, #22
 8004e5a:	d402      	bmi.n	8004e62 <_vfiprintf_r+0x2a>
 8004e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e5e:	f7ff fec7 	bl	8004bf0 <__retarget_lock_acquire_recursive>
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	071b      	lsls	r3, r3, #28
 8004e66:	d501      	bpl.n	8004e6c <_vfiprintf_r+0x34>
 8004e68:	692b      	ldr	r3, [r5, #16]
 8004e6a:	b99b      	cbnz	r3, 8004e94 <_vfiprintf_r+0x5c>
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f7ff fdee 	bl	8004a50 <__swsetup_r>
 8004e74:	b170      	cbz	r0, 8004e94 <_vfiprintf_r+0x5c>
 8004e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e78:	07dc      	lsls	r4, r3, #31
 8004e7a:	d504      	bpl.n	8004e86 <_vfiprintf_r+0x4e>
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	b01d      	add	sp, #116	; 0x74
 8004e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e86:	89ab      	ldrh	r3, [r5, #12]
 8004e88:	0598      	lsls	r0, r3, #22
 8004e8a:	d4f7      	bmi.n	8004e7c <_vfiprintf_r+0x44>
 8004e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e8e:	f7ff feb0 	bl	8004bf2 <__retarget_lock_release_recursive>
 8004e92:	e7f3      	b.n	8004e7c <_vfiprintf_r+0x44>
 8004e94:	2300      	movs	r3, #0
 8004e96:	9309      	str	r3, [sp, #36]	; 0x24
 8004e98:	2320      	movs	r3, #32
 8004e9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ea2:	2330      	movs	r3, #48	; 0x30
 8004ea4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005058 <_vfiprintf_r+0x220>
 8004ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eac:	f04f 0901 	mov.w	r9, #1
 8004eb0:	4623      	mov	r3, r4
 8004eb2:	469a      	mov	sl, r3
 8004eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eb8:	b10a      	cbz	r2, 8004ebe <_vfiprintf_r+0x86>
 8004eba:	2a25      	cmp	r2, #37	; 0x25
 8004ebc:	d1f9      	bne.n	8004eb2 <_vfiprintf_r+0x7a>
 8004ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8004ec2:	d00b      	beq.n	8004edc <_vfiprintf_r+0xa4>
 8004ec4:	465b      	mov	r3, fp
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7ff ffa1 	bl	8004e12 <__sfputs_r>
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	f000 80a9 	beq.w	8005028 <_vfiprintf_r+0x1f0>
 8004ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ed8:	445a      	add	r2, fp
 8004eda:	9209      	str	r2, [sp, #36]	; 0x24
 8004edc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80a1 	beq.w	8005028 <_vfiprintf_r+0x1f0>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ef0:	f10a 0a01 	add.w	sl, sl, #1
 8004ef4:	9304      	str	r3, [sp, #16]
 8004ef6:	9307      	str	r3, [sp, #28]
 8004ef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004efc:	931a      	str	r3, [sp, #104]	; 0x68
 8004efe:	4654      	mov	r4, sl
 8004f00:	2205      	movs	r2, #5
 8004f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f06:	4854      	ldr	r0, [pc, #336]	; (8005058 <_vfiprintf_r+0x220>)
 8004f08:	f7fb f962 	bl	80001d0 <memchr>
 8004f0c:	9a04      	ldr	r2, [sp, #16]
 8004f0e:	b9d8      	cbnz	r0, 8004f48 <_vfiprintf_r+0x110>
 8004f10:	06d1      	lsls	r1, r2, #27
 8004f12:	bf44      	itt	mi
 8004f14:	2320      	movmi	r3, #32
 8004f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f1a:	0713      	lsls	r3, r2, #28
 8004f1c:	bf44      	itt	mi
 8004f1e:	232b      	movmi	r3, #43	; 0x2b
 8004f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f24:	f89a 3000 	ldrb.w	r3, [sl]
 8004f28:	2b2a      	cmp	r3, #42	; 0x2a
 8004f2a:	d015      	beq.n	8004f58 <_vfiprintf_r+0x120>
 8004f2c:	9a07      	ldr	r2, [sp, #28]
 8004f2e:	4654      	mov	r4, sl
 8004f30:	2000      	movs	r0, #0
 8004f32:	f04f 0c0a 	mov.w	ip, #10
 8004f36:	4621      	mov	r1, r4
 8004f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f3c:	3b30      	subs	r3, #48	; 0x30
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	d94d      	bls.n	8004fde <_vfiprintf_r+0x1a6>
 8004f42:	b1b0      	cbz	r0, 8004f72 <_vfiprintf_r+0x13a>
 8004f44:	9207      	str	r2, [sp, #28]
 8004f46:	e014      	b.n	8004f72 <_vfiprintf_r+0x13a>
 8004f48:	eba0 0308 	sub.w	r3, r0, r8
 8004f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f50:	4313      	orrs	r3, r2
 8004f52:	9304      	str	r3, [sp, #16]
 8004f54:	46a2      	mov	sl, r4
 8004f56:	e7d2      	b.n	8004efe <_vfiprintf_r+0xc6>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	1d19      	adds	r1, r3, #4
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	9103      	str	r1, [sp, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bfbb      	ittet	lt
 8004f64:	425b      	neglt	r3, r3
 8004f66:	f042 0202 	orrlt.w	r2, r2, #2
 8004f6a:	9307      	strge	r3, [sp, #28]
 8004f6c:	9307      	strlt	r3, [sp, #28]
 8004f6e:	bfb8      	it	lt
 8004f70:	9204      	strlt	r2, [sp, #16]
 8004f72:	7823      	ldrb	r3, [r4, #0]
 8004f74:	2b2e      	cmp	r3, #46	; 0x2e
 8004f76:	d10c      	bne.n	8004f92 <_vfiprintf_r+0x15a>
 8004f78:	7863      	ldrb	r3, [r4, #1]
 8004f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7c:	d134      	bne.n	8004fe8 <_vfiprintf_r+0x1b0>
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	1d1a      	adds	r2, r3, #4
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	9203      	str	r2, [sp, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bfb8      	it	lt
 8004f8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f8e:	3402      	adds	r4, #2
 8004f90:	9305      	str	r3, [sp, #20]
 8004f92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005068 <_vfiprintf_r+0x230>
 8004f96:	7821      	ldrb	r1, [r4, #0]
 8004f98:	2203      	movs	r2, #3
 8004f9a:	4650      	mov	r0, sl
 8004f9c:	f7fb f918 	bl	80001d0 <memchr>
 8004fa0:	b138      	cbz	r0, 8004fb2 <_vfiprintf_r+0x17a>
 8004fa2:	9b04      	ldr	r3, [sp, #16]
 8004fa4:	eba0 000a 	sub.w	r0, r0, sl
 8004fa8:	2240      	movs	r2, #64	; 0x40
 8004faa:	4082      	lsls	r2, r0
 8004fac:	4313      	orrs	r3, r2
 8004fae:	3401      	adds	r4, #1
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb6:	4829      	ldr	r0, [pc, #164]	; (800505c <_vfiprintf_r+0x224>)
 8004fb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fbc:	2206      	movs	r2, #6
 8004fbe:	f7fb f907 	bl	80001d0 <memchr>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d03f      	beq.n	8005046 <_vfiprintf_r+0x20e>
 8004fc6:	4b26      	ldr	r3, [pc, #152]	; (8005060 <_vfiprintf_r+0x228>)
 8004fc8:	bb1b      	cbnz	r3, 8005012 <_vfiprintf_r+0x1da>
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	3307      	adds	r3, #7
 8004fce:	f023 0307 	bic.w	r3, r3, #7
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	9303      	str	r3, [sp, #12]
 8004fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd8:	443b      	add	r3, r7
 8004fda:	9309      	str	r3, [sp, #36]	; 0x24
 8004fdc:	e768      	b.n	8004eb0 <_vfiprintf_r+0x78>
 8004fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	e7a6      	b.n	8004f36 <_vfiprintf_r+0xfe>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	3401      	adds	r4, #1
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f04f 0c0a 	mov.w	ip, #10
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ffa:	3a30      	subs	r2, #48	; 0x30
 8004ffc:	2a09      	cmp	r2, #9
 8004ffe:	d903      	bls.n	8005008 <_vfiprintf_r+0x1d0>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0c6      	beq.n	8004f92 <_vfiprintf_r+0x15a>
 8005004:	9105      	str	r1, [sp, #20]
 8005006:	e7c4      	b.n	8004f92 <_vfiprintf_r+0x15a>
 8005008:	fb0c 2101 	mla	r1, ip, r1, r2
 800500c:	4604      	mov	r4, r0
 800500e:	2301      	movs	r3, #1
 8005010:	e7f0      	b.n	8004ff4 <_vfiprintf_r+0x1bc>
 8005012:	ab03      	add	r3, sp, #12
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	462a      	mov	r2, r5
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <_vfiprintf_r+0x22c>)
 800501a:	a904      	add	r1, sp, #16
 800501c:	4630      	mov	r0, r6
 800501e:	f3af 8000 	nop.w
 8005022:	4607      	mov	r7, r0
 8005024:	1c78      	adds	r0, r7, #1
 8005026:	d1d6      	bne.n	8004fd6 <_vfiprintf_r+0x19e>
 8005028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800502a:	07d9      	lsls	r1, r3, #31
 800502c:	d405      	bmi.n	800503a <_vfiprintf_r+0x202>
 800502e:	89ab      	ldrh	r3, [r5, #12]
 8005030:	059a      	lsls	r2, r3, #22
 8005032:	d402      	bmi.n	800503a <_vfiprintf_r+0x202>
 8005034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005036:	f7ff fddc 	bl	8004bf2 <__retarget_lock_release_recursive>
 800503a:	89ab      	ldrh	r3, [r5, #12]
 800503c:	065b      	lsls	r3, r3, #25
 800503e:	f53f af1d 	bmi.w	8004e7c <_vfiprintf_r+0x44>
 8005042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005044:	e71c      	b.n	8004e80 <_vfiprintf_r+0x48>
 8005046:	ab03      	add	r3, sp, #12
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	462a      	mov	r2, r5
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <_vfiprintf_r+0x22c>)
 800504e:	a904      	add	r1, sp, #16
 8005050:	4630      	mov	r0, r6
 8005052:	f000 f879 	bl	8005148 <_printf_i>
 8005056:	e7e4      	b.n	8005022 <_vfiprintf_r+0x1ea>
 8005058:	08005894 	.word	0x08005894
 800505c:	0800589e 	.word	0x0800589e
 8005060:	00000000 	.word	0x00000000
 8005064:	08004e13 	.word	0x08004e13
 8005068:	0800589a 	.word	0x0800589a

0800506c <_printf_common>:
 800506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	4616      	mov	r6, r2
 8005072:	4699      	mov	r9, r3
 8005074:	688a      	ldr	r2, [r1, #8]
 8005076:	690b      	ldr	r3, [r1, #16]
 8005078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800507c:	4293      	cmp	r3, r2
 800507e:	bfb8      	it	lt
 8005080:	4613      	movlt	r3, r2
 8005082:	6033      	str	r3, [r6, #0]
 8005084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005088:	4607      	mov	r7, r0
 800508a:	460c      	mov	r4, r1
 800508c:	b10a      	cbz	r2, 8005092 <_printf_common+0x26>
 800508e:	3301      	adds	r3, #1
 8005090:	6033      	str	r3, [r6, #0]
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	0699      	lsls	r1, r3, #26
 8005096:	bf42      	ittt	mi
 8005098:	6833      	ldrmi	r3, [r6, #0]
 800509a:	3302      	addmi	r3, #2
 800509c:	6033      	strmi	r3, [r6, #0]
 800509e:	6825      	ldr	r5, [r4, #0]
 80050a0:	f015 0506 	ands.w	r5, r5, #6
 80050a4:	d106      	bne.n	80050b4 <_printf_common+0x48>
 80050a6:	f104 0a19 	add.w	sl, r4, #25
 80050aa:	68e3      	ldr	r3, [r4, #12]
 80050ac:	6832      	ldr	r2, [r6, #0]
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	42ab      	cmp	r3, r5
 80050b2:	dc26      	bgt.n	8005102 <_printf_common+0x96>
 80050b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050b8:	1e13      	subs	r3, r2, #0
 80050ba:	6822      	ldr	r2, [r4, #0]
 80050bc:	bf18      	it	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	0692      	lsls	r2, r2, #26
 80050c2:	d42b      	bmi.n	800511c <_printf_common+0xb0>
 80050c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050c8:	4649      	mov	r1, r9
 80050ca:	4638      	mov	r0, r7
 80050cc:	47c0      	blx	r8
 80050ce:	3001      	adds	r0, #1
 80050d0:	d01e      	beq.n	8005110 <_printf_common+0xa4>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	6922      	ldr	r2, [r4, #16]
 80050d6:	f003 0306 	and.w	r3, r3, #6
 80050da:	2b04      	cmp	r3, #4
 80050dc:	bf02      	ittt	eq
 80050de:	68e5      	ldreq	r5, [r4, #12]
 80050e0:	6833      	ldreq	r3, [r6, #0]
 80050e2:	1aed      	subeq	r5, r5, r3
 80050e4:	68a3      	ldr	r3, [r4, #8]
 80050e6:	bf0c      	ite	eq
 80050e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050ec:	2500      	movne	r5, #0
 80050ee:	4293      	cmp	r3, r2
 80050f0:	bfc4      	itt	gt
 80050f2:	1a9b      	subgt	r3, r3, r2
 80050f4:	18ed      	addgt	r5, r5, r3
 80050f6:	2600      	movs	r6, #0
 80050f8:	341a      	adds	r4, #26
 80050fa:	42b5      	cmp	r5, r6
 80050fc:	d11a      	bne.n	8005134 <_printf_common+0xc8>
 80050fe:	2000      	movs	r0, #0
 8005100:	e008      	b.n	8005114 <_printf_common+0xa8>
 8005102:	2301      	movs	r3, #1
 8005104:	4652      	mov	r2, sl
 8005106:	4649      	mov	r1, r9
 8005108:	4638      	mov	r0, r7
 800510a:	47c0      	blx	r8
 800510c:	3001      	adds	r0, #1
 800510e:	d103      	bne.n	8005118 <_printf_common+0xac>
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005118:	3501      	adds	r5, #1
 800511a:	e7c6      	b.n	80050aa <_printf_common+0x3e>
 800511c:	18e1      	adds	r1, r4, r3
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	2030      	movs	r0, #48	; 0x30
 8005122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005126:	4422      	add	r2, r4
 8005128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800512c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005130:	3302      	adds	r3, #2
 8005132:	e7c7      	b.n	80050c4 <_printf_common+0x58>
 8005134:	2301      	movs	r3, #1
 8005136:	4622      	mov	r2, r4
 8005138:	4649      	mov	r1, r9
 800513a:	4638      	mov	r0, r7
 800513c:	47c0      	blx	r8
 800513e:	3001      	adds	r0, #1
 8005140:	d0e6      	beq.n	8005110 <_printf_common+0xa4>
 8005142:	3601      	adds	r6, #1
 8005144:	e7d9      	b.n	80050fa <_printf_common+0x8e>
	...

08005148 <_printf_i>:
 8005148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800514c:	7e0f      	ldrb	r7, [r1, #24]
 800514e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005150:	2f78      	cmp	r7, #120	; 0x78
 8005152:	4691      	mov	r9, r2
 8005154:	4680      	mov	r8, r0
 8005156:	460c      	mov	r4, r1
 8005158:	469a      	mov	sl, r3
 800515a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800515e:	d807      	bhi.n	8005170 <_printf_i+0x28>
 8005160:	2f62      	cmp	r7, #98	; 0x62
 8005162:	d80a      	bhi.n	800517a <_printf_i+0x32>
 8005164:	2f00      	cmp	r7, #0
 8005166:	f000 80d4 	beq.w	8005312 <_printf_i+0x1ca>
 800516a:	2f58      	cmp	r7, #88	; 0x58
 800516c:	f000 80c0 	beq.w	80052f0 <_printf_i+0x1a8>
 8005170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005178:	e03a      	b.n	80051f0 <_printf_i+0xa8>
 800517a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800517e:	2b15      	cmp	r3, #21
 8005180:	d8f6      	bhi.n	8005170 <_printf_i+0x28>
 8005182:	a101      	add	r1, pc, #4	; (adr r1, 8005188 <_printf_i+0x40>)
 8005184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005188:	080051e1 	.word	0x080051e1
 800518c:	080051f5 	.word	0x080051f5
 8005190:	08005171 	.word	0x08005171
 8005194:	08005171 	.word	0x08005171
 8005198:	08005171 	.word	0x08005171
 800519c:	08005171 	.word	0x08005171
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	08005171 	.word	0x08005171
 80051a8:	08005171 	.word	0x08005171
 80051ac:	08005171 	.word	0x08005171
 80051b0:	08005171 	.word	0x08005171
 80051b4:	080052f9 	.word	0x080052f9
 80051b8:	08005221 	.word	0x08005221
 80051bc:	080052b3 	.word	0x080052b3
 80051c0:	08005171 	.word	0x08005171
 80051c4:	08005171 	.word	0x08005171
 80051c8:	0800531b 	.word	0x0800531b
 80051cc:	08005171 	.word	0x08005171
 80051d0:	08005221 	.word	0x08005221
 80051d4:	08005171 	.word	0x08005171
 80051d8:	08005171 	.word	0x08005171
 80051dc:	080052bb 	.word	0x080052bb
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	1d1a      	adds	r2, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	602a      	str	r2, [r5, #0]
 80051e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f0:	2301      	movs	r3, #1
 80051f2:	e09f      	b.n	8005334 <_printf_i+0x1ec>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	682b      	ldr	r3, [r5, #0]
 80051f8:	0607      	lsls	r7, r0, #24
 80051fa:	f103 0104 	add.w	r1, r3, #4
 80051fe:	6029      	str	r1, [r5, #0]
 8005200:	d501      	bpl.n	8005206 <_printf_i+0xbe>
 8005202:	681e      	ldr	r6, [r3, #0]
 8005204:	e003      	b.n	800520e <_printf_i+0xc6>
 8005206:	0646      	lsls	r6, r0, #25
 8005208:	d5fb      	bpl.n	8005202 <_printf_i+0xba>
 800520a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800520e:	2e00      	cmp	r6, #0
 8005210:	da03      	bge.n	800521a <_printf_i+0xd2>
 8005212:	232d      	movs	r3, #45	; 0x2d
 8005214:	4276      	negs	r6, r6
 8005216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800521a:	485a      	ldr	r0, [pc, #360]	; (8005384 <_printf_i+0x23c>)
 800521c:	230a      	movs	r3, #10
 800521e:	e012      	b.n	8005246 <_printf_i+0xfe>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	6820      	ldr	r0, [r4, #0]
 8005224:	1d19      	adds	r1, r3, #4
 8005226:	6029      	str	r1, [r5, #0]
 8005228:	0605      	lsls	r5, r0, #24
 800522a:	d501      	bpl.n	8005230 <_printf_i+0xe8>
 800522c:	681e      	ldr	r6, [r3, #0]
 800522e:	e002      	b.n	8005236 <_printf_i+0xee>
 8005230:	0641      	lsls	r1, r0, #25
 8005232:	d5fb      	bpl.n	800522c <_printf_i+0xe4>
 8005234:	881e      	ldrh	r6, [r3, #0]
 8005236:	4853      	ldr	r0, [pc, #332]	; (8005384 <_printf_i+0x23c>)
 8005238:	2f6f      	cmp	r7, #111	; 0x6f
 800523a:	bf0c      	ite	eq
 800523c:	2308      	moveq	r3, #8
 800523e:	230a      	movne	r3, #10
 8005240:	2100      	movs	r1, #0
 8005242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005246:	6865      	ldr	r5, [r4, #4]
 8005248:	60a5      	str	r5, [r4, #8]
 800524a:	2d00      	cmp	r5, #0
 800524c:	bfa2      	ittt	ge
 800524e:	6821      	ldrge	r1, [r4, #0]
 8005250:	f021 0104 	bicge.w	r1, r1, #4
 8005254:	6021      	strge	r1, [r4, #0]
 8005256:	b90e      	cbnz	r6, 800525c <_printf_i+0x114>
 8005258:	2d00      	cmp	r5, #0
 800525a:	d04b      	beq.n	80052f4 <_printf_i+0x1ac>
 800525c:	4615      	mov	r5, r2
 800525e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005262:	fb03 6711 	mls	r7, r3, r1, r6
 8005266:	5dc7      	ldrb	r7, [r0, r7]
 8005268:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800526c:	4637      	mov	r7, r6
 800526e:	42bb      	cmp	r3, r7
 8005270:	460e      	mov	r6, r1
 8005272:	d9f4      	bls.n	800525e <_printf_i+0x116>
 8005274:	2b08      	cmp	r3, #8
 8005276:	d10b      	bne.n	8005290 <_printf_i+0x148>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	07de      	lsls	r6, r3, #31
 800527c:	d508      	bpl.n	8005290 <_printf_i+0x148>
 800527e:	6923      	ldr	r3, [r4, #16]
 8005280:	6861      	ldr	r1, [r4, #4]
 8005282:	4299      	cmp	r1, r3
 8005284:	bfde      	ittt	le
 8005286:	2330      	movle	r3, #48	; 0x30
 8005288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800528c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005290:	1b52      	subs	r2, r2, r5
 8005292:	6122      	str	r2, [r4, #16]
 8005294:	f8cd a000 	str.w	sl, [sp]
 8005298:	464b      	mov	r3, r9
 800529a:	aa03      	add	r2, sp, #12
 800529c:	4621      	mov	r1, r4
 800529e:	4640      	mov	r0, r8
 80052a0:	f7ff fee4 	bl	800506c <_printf_common>
 80052a4:	3001      	adds	r0, #1
 80052a6:	d14a      	bne.n	800533e <_printf_i+0x1f6>
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	b004      	add	sp, #16
 80052ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	f043 0320 	orr.w	r3, r3, #32
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	4833      	ldr	r0, [pc, #204]	; (8005388 <_printf_i+0x240>)
 80052bc:	2778      	movs	r7, #120	; 0x78
 80052be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	6829      	ldr	r1, [r5, #0]
 80052c6:	061f      	lsls	r7, r3, #24
 80052c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80052cc:	d402      	bmi.n	80052d4 <_printf_i+0x18c>
 80052ce:	065f      	lsls	r7, r3, #25
 80052d0:	bf48      	it	mi
 80052d2:	b2b6      	uxthmi	r6, r6
 80052d4:	07df      	lsls	r7, r3, #31
 80052d6:	bf48      	it	mi
 80052d8:	f043 0320 	orrmi.w	r3, r3, #32
 80052dc:	6029      	str	r1, [r5, #0]
 80052de:	bf48      	it	mi
 80052e0:	6023      	strmi	r3, [r4, #0]
 80052e2:	b91e      	cbnz	r6, 80052ec <_printf_i+0x1a4>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	f023 0320 	bic.w	r3, r3, #32
 80052ea:	6023      	str	r3, [r4, #0]
 80052ec:	2310      	movs	r3, #16
 80052ee:	e7a7      	b.n	8005240 <_printf_i+0xf8>
 80052f0:	4824      	ldr	r0, [pc, #144]	; (8005384 <_printf_i+0x23c>)
 80052f2:	e7e4      	b.n	80052be <_printf_i+0x176>
 80052f4:	4615      	mov	r5, r2
 80052f6:	e7bd      	b.n	8005274 <_printf_i+0x12c>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	6826      	ldr	r6, [r4, #0]
 80052fc:	6961      	ldr	r1, [r4, #20]
 80052fe:	1d18      	adds	r0, r3, #4
 8005300:	6028      	str	r0, [r5, #0]
 8005302:	0635      	lsls	r5, r6, #24
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	d501      	bpl.n	800530c <_printf_i+0x1c4>
 8005308:	6019      	str	r1, [r3, #0]
 800530a:	e002      	b.n	8005312 <_printf_i+0x1ca>
 800530c:	0670      	lsls	r0, r6, #25
 800530e:	d5fb      	bpl.n	8005308 <_printf_i+0x1c0>
 8005310:	8019      	strh	r1, [r3, #0]
 8005312:	2300      	movs	r3, #0
 8005314:	6123      	str	r3, [r4, #16]
 8005316:	4615      	mov	r5, r2
 8005318:	e7bc      	b.n	8005294 <_printf_i+0x14c>
 800531a:	682b      	ldr	r3, [r5, #0]
 800531c:	1d1a      	adds	r2, r3, #4
 800531e:	602a      	str	r2, [r5, #0]
 8005320:	681d      	ldr	r5, [r3, #0]
 8005322:	6862      	ldr	r2, [r4, #4]
 8005324:	2100      	movs	r1, #0
 8005326:	4628      	mov	r0, r5
 8005328:	f7fa ff52 	bl	80001d0 <memchr>
 800532c:	b108      	cbz	r0, 8005332 <_printf_i+0x1ea>
 800532e:	1b40      	subs	r0, r0, r5
 8005330:	6060      	str	r0, [r4, #4]
 8005332:	6863      	ldr	r3, [r4, #4]
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	2300      	movs	r3, #0
 8005338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533c:	e7aa      	b.n	8005294 <_printf_i+0x14c>
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	462a      	mov	r2, r5
 8005342:	4649      	mov	r1, r9
 8005344:	4640      	mov	r0, r8
 8005346:	47d0      	blx	sl
 8005348:	3001      	adds	r0, #1
 800534a:	d0ad      	beq.n	80052a8 <_printf_i+0x160>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	079b      	lsls	r3, r3, #30
 8005350:	d413      	bmi.n	800537a <_printf_i+0x232>
 8005352:	68e0      	ldr	r0, [r4, #12]
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	4298      	cmp	r0, r3
 8005358:	bfb8      	it	lt
 800535a:	4618      	movlt	r0, r3
 800535c:	e7a6      	b.n	80052ac <_printf_i+0x164>
 800535e:	2301      	movs	r3, #1
 8005360:	4632      	mov	r2, r6
 8005362:	4649      	mov	r1, r9
 8005364:	4640      	mov	r0, r8
 8005366:	47d0      	blx	sl
 8005368:	3001      	adds	r0, #1
 800536a:	d09d      	beq.n	80052a8 <_printf_i+0x160>
 800536c:	3501      	adds	r5, #1
 800536e:	68e3      	ldr	r3, [r4, #12]
 8005370:	9903      	ldr	r1, [sp, #12]
 8005372:	1a5b      	subs	r3, r3, r1
 8005374:	42ab      	cmp	r3, r5
 8005376:	dcf2      	bgt.n	800535e <_printf_i+0x216>
 8005378:	e7eb      	b.n	8005352 <_printf_i+0x20a>
 800537a:	2500      	movs	r5, #0
 800537c:	f104 0619 	add.w	r6, r4, #25
 8005380:	e7f5      	b.n	800536e <_printf_i+0x226>
 8005382:	bf00      	nop
 8005384:	080058a5 	.word	0x080058a5
 8005388:	080058b6 	.word	0x080058b6

0800538c <__sflush_r>:
 800538c:	898a      	ldrh	r2, [r1, #12]
 800538e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005392:	4605      	mov	r5, r0
 8005394:	0710      	lsls	r0, r2, #28
 8005396:	460c      	mov	r4, r1
 8005398:	d458      	bmi.n	800544c <__sflush_r+0xc0>
 800539a:	684b      	ldr	r3, [r1, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	dc05      	bgt.n	80053ac <__sflush_r+0x20>
 80053a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	dc02      	bgt.n	80053ac <__sflush_r+0x20>
 80053a6:	2000      	movs	r0, #0
 80053a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053ae:	2e00      	cmp	r6, #0
 80053b0:	d0f9      	beq.n	80053a6 <__sflush_r+0x1a>
 80053b2:	2300      	movs	r3, #0
 80053b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053b8:	682f      	ldr	r7, [r5, #0]
 80053ba:	6a21      	ldr	r1, [r4, #32]
 80053bc:	602b      	str	r3, [r5, #0]
 80053be:	d032      	beq.n	8005426 <__sflush_r+0x9a>
 80053c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	075a      	lsls	r2, r3, #29
 80053c6:	d505      	bpl.n	80053d4 <__sflush_r+0x48>
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	1ac0      	subs	r0, r0, r3
 80053cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053ce:	b10b      	cbz	r3, 80053d4 <__sflush_r+0x48>
 80053d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053d2:	1ac0      	subs	r0, r0, r3
 80053d4:	2300      	movs	r3, #0
 80053d6:	4602      	mov	r2, r0
 80053d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053da:	6a21      	ldr	r1, [r4, #32]
 80053dc:	4628      	mov	r0, r5
 80053de:	47b0      	blx	r6
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	d106      	bne.n	80053f4 <__sflush_r+0x68>
 80053e6:	6829      	ldr	r1, [r5, #0]
 80053e8:	291d      	cmp	r1, #29
 80053ea:	d82b      	bhi.n	8005444 <__sflush_r+0xb8>
 80053ec:	4a29      	ldr	r2, [pc, #164]	; (8005494 <__sflush_r+0x108>)
 80053ee:	410a      	asrs	r2, r1
 80053f0:	07d6      	lsls	r6, r2, #31
 80053f2:	d427      	bmi.n	8005444 <__sflush_r+0xb8>
 80053f4:	2200      	movs	r2, #0
 80053f6:	6062      	str	r2, [r4, #4]
 80053f8:	04d9      	lsls	r1, r3, #19
 80053fa:	6922      	ldr	r2, [r4, #16]
 80053fc:	6022      	str	r2, [r4, #0]
 80053fe:	d504      	bpl.n	800540a <__sflush_r+0x7e>
 8005400:	1c42      	adds	r2, r0, #1
 8005402:	d101      	bne.n	8005408 <__sflush_r+0x7c>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b903      	cbnz	r3, 800540a <__sflush_r+0x7e>
 8005408:	6560      	str	r0, [r4, #84]	; 0x54
 800540a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800540c:	602f      	str	r7, [r5, #0]
 800540e:	2900      	cmp	r1, #0
 8005410:	d0c9      	beq.n	80053a6 <__sflush_r+0x1a>
 8005412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005416:	4299      	cmp	r1, r3
 8005418:	d002      	beq.n	8005420 <__sflush_r+0x94>
 800541a:	4628      	mov	r0, r5
 800541c:	f7ff fbea 	bl	8004bf4 <_free_r>
 8005420:	2000      	movs	r0, #0
 8005422:	6360      	str	r0, [r4, #52]	; 0x34
 8005424:	e7c0      	b.n	80053a8 <__sflush_r+0x1c>
 8005426:	2301      	movs	r3, #1
 8005428:	4628      	mov	r0, r5
 800542a:	47b0      	blx	r6
 800542c:	1c41      	adds	r1, r0, #1
 800542e:	d1c8      	bne.n	80053c2 <__sflush_r+0x36>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0c5      	beq.n	80053c2 <__sflush_r+0x36>
 8005436:	2b1d      	cmp	r3, #29
 8005438:	d001      	beq.n	800543e <__sflush_r+0xb2>
 800543a:	2b16      	cmp	r3, #22
 800543c:	d101      	bne.n	8005442 <__sflush_r+0xb6>
 800543e:	602f      	str	r7, [r5, #0]
 8005440:	e7b1      	b.n	80053a6 <__sflush_r+0x1a>
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	e7ad      	b.n	80053a8 <__sflush_r+0x1c>
 800544c:	690f      	ldr	r7, [r1, #16]
 800544e:	2f00      	cmp	r7, #0
 8005450:	d0a9      	beq.n	80053a6 <__sflush_r+0x1a>
 8005452:	0793      	lsls	r3, r2, #30
 8005454:	680e      	ldr	r6, [r1, #0]
 8005456:	bf08      	it	eq
 8005458:	694b      	ldreq	r3, [r1, #20]
 800545a:	600f      	str	r7, [r1, #0]
 800545c:	bf18      	it	ne
 800545e:	2300      	movne	r3, #0
 8005460:	eba6 0807 	sub.w	r8, r6, r7
 8005464:	608b      	str	r3, [r1, #8]
 8005466:	f1b8 0f00 	cmp.w	r8, #0
 800546a:	dd9c      	ble.n	80053a6 <__sflush_r+0x1a>
 800546c:	6a21      	ldr	r1, [r4, #32]
 800546e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005470:	4643      	mov	r3, r8
 8005472:	463a      	mov	r2, r7
 8005474:	4628      	mov	r0, r5
 8005476:	47b0      	blx	r6
 8005478:	2800      	cmp	r0, #0
 800547a:	dc06      	bgt.n	800548a <__sflush_r+0xfe>
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	e78e      	b.n	80053a8 <__sflush_r+0x1c>
 800548a:	4407      	add	r7, r0
 800548c:	eba8 0800 	sub.w	r8, r8, r0
 8005490:	e7e9      	b.n	8005466 <__sflush_r+0xda>
 8005492:	bf00      	nop
 8005494:	dfbffffe 	.word	0xdfbffffe

08005498 <_fflush_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	690b      	ldr	r3, [r1, #16]
 800549c:	4605      	mov	r5, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	b913      	cbnz	r3, 80054a8 <_fflush_r+0x10>
 80054a2:	2500      	movs	r5, #0
 80054a4:	4628      	mov	r0, r5
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	b118      	cbz	r0, 80054b2 <_fflush_r+0x1a>
 80054aa:	6a03      	ldr	r3, [r0, #32]
 80054ac:	b90b      	cbnz	r3, 80054b2 <_fflush_r+0x1a>
 80054ae:	f7ff f9ab 	bl	8004808 <__sinit>
 80054b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f3      	beq.n	80054a2 <_fflush_r+0xa>
 80054ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054bc:	07d0      	lsls	r0, r2, #31
 80054be:	d404      	bmi.n	80054ca <_fflush_r+0x32>
 80054c0:	0599      	lsls	r1, r3, #22
 80054c2:	d402      	bmi.n	80054ca <_fflush_r+0x32>
 80054c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054c6:	f7ff fb93 	bl	8004bf0 <__retarget_lock_acquire_recursive>
 80054ca:	4628      	mov	r0, r5
 80054cc:	4621      	mov	r1, r4
 80054ce:	f7ff ff5d 	bl	800538c <__sflush_r>
 80054d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054d4:	07da      	lsls	r2, r3, #31
 80054d6:	4605      	mov	r5, r0
 80054d8:	d4e4      	bmi.n	80054a4 <_fflush_r+0xc>
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	059b      	lsls	r3, r3, #22
 80054de:	d4e1      	bmi.n	80054a4 <_fflush_r+0xc>
 80054e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054e2:	f7ff fb86 	bl	8004bf2 <__retarget_lock_release_recursive>
 80054e6:	e7dd      	b.n	80054a4 <_fflush_r+0xc>

080054e8 <__swhatbuf_r>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	460c      	mov	r4, r1
 80054ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f0:	2900      	cmp	r1, #0
 80054f2:	b096      	sub	sp, #88	; 0x58
 80054f4:	4615      	mov	r5, r2
 80054f6:	461e      	mov	r6, r3
 80054f8:	da0d      	bge.n	8005516 <__swhatbuf_r+0x2e>
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005500:	f04f 0100 	mov.w	r1, #0
 8005504:	bf0c      	ite	eq
 8005506:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800550a:	2340      	movne	r3, #64	; 0x40
 800550c:	2000      	movs	r0, #0
 800550e:	6031      	str	r1, [r6, #0]
 8005510:	602b      	str	r3, [r5, #0]
 8005512:	b016      	add	sp, #88	; 0x58
 8005514:	bd70      	pop	{r4, r5, r6, pc}
 8005516:	466a      	mov	r2, sp
 8005518:	f000 f848 	bl	80055ac <_fstat_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	dbec      	blt.n	80054fa <__swhatbuf_r+0x12>
 8005520:	9901      	ldr	r1, [sp, #4]
 8005522:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005526:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800552a:	4259      	negs	r1, r3
 800552c:	4159      	adcs	r1, r3
 800552e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005532:	e7eb      	b.n	800550c <__swhatbuf_r+0x24>

08005534 <__smakebuf_r>:
 8005534:	898b      	ldrh	r3, [r1, #12]
 8005536:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005538:	079d      	lsls	r5, r3, #30
 800553a:	4606      	mov	r6, r0
 800553c:	460c      	mov	r4, r1
 800553e:	d507      	bpl.n	8005550 <__smakebuf_r+0x1c>
 8005540:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	6123      	str	r3, [r4, #16]
 8005548:	2301      	movs	r3, #1
 800554a:	6163      	str	r3, [r4, #20]
 800554c:	b002      	add	sp, #8
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	ab01      	add	r3, sp, #4
 8005552:	466a      	mov	r2, sp
 8005554:	f7ff ffc8 	bl	80054e8 <__swhatbuf_r>
 8005558:	9900      	ldr	r1, [sp, #0]
 800555a:	4605      	mov	r5, r0
 800555c:	4630      	mov	r0, r6
 800555e:	f7ff fbb5 	bl	8004ccc <_malloc_r>
 8005562:	b948      	cbnz	r0, 8005578 <__smakebuf_r+0x44>
 8005564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005568:	059a      	lsls	r2, r3, #22
 800556a:	d4ef      	bmi.n	800554c <__smakebuf_r+0x18>
 800556c:	f023 0303 	bic.w	r3, r3, #3
 8005570:	f043 0302 	orr.w	r3, r3, #2
 8005574:	81a3      	strh	r3, [r4, #12]
 8005576:	e7e3      	b.n	8005540 <__smakebuf_r+0xc>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	6020      	str	r0, [r4, #0]
 800557c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005580:	81a3      	strh	r3, [r4, #12]
 8005582:	9b00      	ldr	r3, [sp, #0]
 8005584:	6163      	str	r3, [r4, #20]
 8005586:	9b01      	ldr	r3, [sp, #4]
 8005588:	6120      	str	r0, [r4, #16]
 800558a:	b15b      	cbz	r3, 80055a4 <__smakebuf_r+0x70>
 800558c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005590:	4630      	mov	r0, r6
 8005592:	f000 f81d 	bl	80055d0 <_isatty_r>
 8005596:	b128      	cbz	r0, 80055a4 <__smakebuf_r+0x70>
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	81a3      	strh	r3, [r4, #12]
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	431d      	orrs	r5, r3
 80055a8:	81a5      	strh	r5, [r4, #12]
 80055aa:	e7cf      	b.n	800554c <__smakebuf_r+0x18>

080055ac <_fstat_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4d07      	ldr	r5, [pc, #28]	; (80055cc <_fstat_r+0x20>)
 80055b0:	2300      	movs	r3, #0
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	602b      	str	r3, [r5, #0]
 80055ba:	f7fb ffe0 	bl	800157e <_fstat>
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	d102      	bne.n	80055c8 <_fstat_r+0x1c>
 80055c2:	682b      	ldr	r3, [r5, #0]
 80055c4:	b103      	cbz	r3, 80055c8 <_fstat_r+0x1c>
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	bd38      	pop	{r3, r4, r5, pc}
 80055ca:	bf00      	nop
 80055cc:	200002b4 	.word	0x200002b4

080055d0 <_isatty_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d06      	ldr	r5, [pc, #24]	; (80055ec <_isatty_r+0x1c>)
 80055d4:	2300      	movs	r3, #0
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	602b      	str	r3, [r5, #0]
 80055dc:	f7fb ffdf 	bl	800159e <_isatty>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_isatty_r+0x1a>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_isatty_r+0x1a>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	200002b4 	.word	0x200002b4

080055f0 <_sbrk_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4d06      	ldr	r5, [pc, #24]	; (800560c <_sbrk_r+0x1c>)
 80055f4:	2300      	movs	r3, #0
 80055f6:	4604      	mov	r4, r0
 80055f8:	4608      	mov	r0, r1
 80055fa:	602b      	str	r3, [r5, #0]
 80055fc:	f7fb ffe8 	bl	80015d0 <_sbrk>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d102      	bne.n	800560a <_sbrk_r+0x1a>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	b103      	cbz	r3, 800560a <_sbrk_r+0x1a>
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	200002b4 	.word	0x200002b4

08005610 <_init>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	bf00      	nop
 8005614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005616:	bc08      	pop	{r3}
 8005618:	469e      	mov	lr, r3
 800561a:	4770      	bx	lr

0800561c <_fini>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr
