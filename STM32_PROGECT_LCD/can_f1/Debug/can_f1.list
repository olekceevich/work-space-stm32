
can_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  080036f4  080036f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e8c  08003e8c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e8c  08003e8c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e8c  08003e8c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e8c  08003e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000005c  08003ef0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08003ef0  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000902e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ce  00000000  00000000  000290f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  0002aac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000621  00000000  00000000  0002b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001731c  00000000  00000000  0002b8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009721  00000000  00000000  00042bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084bee  00000000  00000000  0004c316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024ac  00000000  00000000  000d0f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d33b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080036dc 	.word	0x080036dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080036dc 	.word	0x080036dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CAN_Init>:
void LogMessage(const char *message);
void LogError(const char *message);
void change_node_id_and_save(uint8_t new_id);
uint8_t received_data[8]; // Глобальный массив для хранения полученных данных

void CAN_Init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    CAN_ConfigFilter();
 8000160:	f000 fb4e 	bl	8000800 <CAN_ConfigFilter>

    if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000164:	480e      	ldr	r0, [pc, #56]	; (80001a0 <CAN_Init+0x44>)
 8000166:	f001 f87d 	bl	8001264 <HAL_CAN_Start>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d003      	beq.n	8000178 <CAN_Init+0x1c>
        LogError("CAN_Init: Error starting CAN");
 8000170:	480c      	ldr	r0, [pc, #48]	; (80001a4 <CAN_Init+0x48>)
 8000172:	f000 fb99 	bl	80008a8 <LogError>
 8000176:	e002      	b.n	800017e <CAN_Init+0x22>
    } else {
        LogMessage("CAN_Init: CAN started successfully");
 8000178:	480b      	ldr	r0, [pc, #44]	; (80001a8 <CAN_Init+0x4c>)
 800017a:	f000 fb77 	bl	800086c <LogMessage>
    }

    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800017e:	2102      	movs	r1, #2
 8000180:	4807      	ldr	r0, [pc, #28]	; (80001a0 <CAN_Init+0x44>)
 8000182:	f001 fac6 	bl	8001712 <HAL_CAN_ActivateNotification>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d003      	beq.n	8000194 <CAN_Init+0x38>
        LogError("CAN_Init: Error activating CAN notifications");
 800018c:	4807      	ldr	r0, [pc, #28]	; (80001ac <CAN_Init+0x50>)
 800018e:	f000 fb8b 	bl	80008a8 <LogError>
    } else {
        LogMessage("CAN_Init: Notifications activated");
    }
}
 8000192:	e002      	b.n	800019a <CAN_Init+0x3e>
        LogMessage("CAN_Init: Notifications activated");
 8000194:	4806      	ldr	r0, [pc, #24]	; (80001b0 <CAN_Init+0x54>)
 8000196:	f000 fb69 	bl	800086c <LogMessage>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	080036f4 	.word	0x080036f4
 80001a8:	08003714 	.word	0x08003714
 80001ac:	08003738 	.word	0x08003738
 80001b0:	08003768 	.word	0x08003768

080001b4 <StartActivationProcess>:

void StartActivationProcess(void) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
    currentState = STATE_WAIT_BOOTLOADER_HEARTBEAT;
 80001b8:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <StartActivationProcess+0x20>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	701a      	strb	r2, [r3, #0]
    stateTimer = HAL_GetTick();
 80001be:	f000 fe5f 	bl	8000e80 <HAL_GetTick>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <StartActivationProcess+0x24>)
 80001c6:	6013      	str	r3, [r2, #0]
    LogMessage("Starting activation process...");
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <StartActivationProcess+0x28>)
 80001ca:	f000 fb4f 	bl	800086c <LogMessage>
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000078 	.word	0x20000078
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800378c 	.word	0x0800378c

080001e0 <CAN_ProcessStateMachine>:

void CAN_ProcessStateMachine(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af00      	add	r7, sp, #0
    uint8_t activation_data[2] = {0x10, 0x10};
 80001e6:	f241 0310 	movw	r3, #4112	; 0x1010
 80001ea:	82bb      	strh	r3, [r7, #20]
    uint8_t firmware_confirmation_data[2] = {0xAA, 0xBB};
 80001ec:	f64b 33aa 	movw	r3, #48042	; 0xbbaa
 80001f0:	823b      	strh	r3, [r7, #16]
    uint8_t bootloader_version_query_data[2] = {0x20, 0x20};
 80001f2:	f242 0320 	movw	r3, #8224	; 0x2020
 80001f6:	81bb      	strh	r3, [r7, #12]
    uint8_t expected_response_id[] = {0xCC, 0xDD};
 80001f8:	f64d 53cc 	movw	r3, #56780	; 0xddcc
 80001fc:	813b      	strh	r3, [r7, #8]
    uint8_t expected_version[] = {0x00, 0x01};
 80001fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000202:	80bb      	strh	r3, [r7, #4]
    uint8_t soft_reset_command[] = {0x81, 0x00};  // Команда для сброса устройства
 8000204:	2381      	movs	r3, #129	; 0x81
 8000206:	803b      	strh	r3, [r7, #0]
    uint8_t diagnostic_counter = 0;  // Счетчик для диагностических сообщений
 8000208:	2300      	movs	r3, #0
 800020a:	77fb      	strb	r3, [r7, #31]

    switch (currentState) {
 800020c:	4b9c      	ldr	r3, [pc, #624]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	3b01      	subs	r3, #1
 8000212:	2b08      	cmp	r3, #8
 8000214:	f200 8126 	bhi.w	8000464 <CAN_ProcessStateMachine+0x284>
 8000218:	a201      	add	r2, pc, #4	; (adr r2, 8000220 <CAN_ProcessStateMachine+0x40>)
 800021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021e:	bf00      	nop
 8000220:	08000245 	.word	0x08000245
 8000224:	08000295 	.word	0x08000295
 8000228:	080002d3 	.word	0x080002d3
 800022c:	08000345 	.word	0x08000345
 8000230:	080003f1 	.word	0x080003f1
 8000234:	08000435 	.word	0x08000435
 8000238:	08000457 	.word	0x08000457
 800023c:	08000449 	.word	0x08000449
 8000240:	080003bf 	.word	0x080003bf
        case STATE_WAIT_BOOTLOADER_HEARTBEAT:
            LogMessage("STATE_WAIT_BOOTLOADER_HEARTBEAT");
 8000244:	488f      	ldr	r0, [pc, #572]	; (8000484 <CAN_ProcessStateMachine+0x2a4>)
 8000246:	f000 fb11 	bl	800086c <LogMessage>
            if (wait_for_heartbeat(6000)) {
 800024a:	f241 7070 	movw	r0, #6000	; 0x1770
 800024e:	f000 fa91 	bl	8000774 <wait_for_heartbeat>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d00b      	beq.n	8000270 <CAN_ProcessStateMachine+0x90>
                LogMessage("Bootloader heartbeat received.");
 8000258:	488b      	ldr	r0, [pc, #556]	; (8000488 <CAN_ProcessStateMachine+0x2a8>)
 800025a:	f000 fb07 	bl	800086c <LogMessage>
                currentState = STATE_SEND_ACTIVATION;
 800025e:	4b88      	ldr	r3, [pc, #544]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 8000260:	2202      	movs	r2, #2
 8000262:	701a      	strb	r2, [r3, #0]
                stateTimer = HAL_GetTick();
 8000264:	f000 fe0c 	bl	8000e80 <HAL_GetTick>
 8000268:	4603      	mov	r3, r0
 800026a:	4a88      	ldr	r2, [pc, #544]	; (800048c <CAN_ProcessStateMachine+0x2ac>)
 800026c:	6013      	str	r3, [r2, #0]
            } else if (HAL_GetTick() - stateTimer > 5000) {
                LogError("Failed to receive bootloader heartbeat.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;
 800026e:	e0fb      	b.n	8000468 <CAN_ProcessStateMachine+0x288>
            } else if (HAL_GetTick() - stateTimer > 5000) {
 8000270:	f000 fe06 	bl	8000e80 <HAL_GetTick>
 8000274:	4602      	mov	r2, r0
 8000276:	4b85      	ldr	r3, [pc, #532]	; (800048c <CAN_ProcessStateMachine+0x2ac>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	1ad3      	subs	r3, r2, r3
 800027c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000280:	4293      	cmp	r3, r2
 8000282:	f240 80f1 	bls.w	8000468 <CAN_ProcessStateMachine+0x288>
                LogError("Failed to receive bootloader heartbeat.");
 8000286:	4882      	ldr	r0, [pc, #520]	; (8000490 <CAN_ProcessStateMachine+0x2b0>)
 8000288:	f000 fb0e 	bl	80008a8 <LogError>
                currentState = STATE_ACTIVATION_FAILED;
 800028c:	4b7c      	ldr	r3, [pc, #496]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 800028e:	2207      	movs	r2, #7
 8000290:	701a      	strb	r2, [r3, #0]
            break;
 8000292:	e0e9      	b.n	8000468 <CAN_ProcessStateMachine+0x288>

        case STATE_SEND_ACTIVATION:
            LogMessage("STATE_SEND_ACTIVATION");
 8000294:	487f      	ldr	r0, [pc, #508]	; (8000494 <CAN_ProcessStateMachine+0x2b4>)
 8000296:	f000 fae9 	bl	800086c <LogMessage>
            if (send_command(activation_data, sizeof(activation_data))) {
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	2102      	movs	r1, #2
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fa1b 	bl	80006dc <send_command>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d00b      	beq.n	80002c4 <CAN_ProcessStateMachine+0xe4>
                LogMessage("Activation command sent, waiting for firmware response.");
 80002ac:	487a      	ldr	r0, [pc, #488]	; (8000498 <CAN_ProcessStateMachine+0x2b8>)
 80002ae:	f000 fadd 	bl	800086c <LogMessage>
                stateTimer = HAL_GetTick();
 80002b2:	f000 fde5 	bl	8000e80 <HAL_GetTick>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4a74      	ldr	r2, [pc, #464]	; (800048c <CAN_ProcessStateMachine+0x2ac>)
 80002ba:	6013      	str	r3, [r2, #0]
                currentState = STATE_WAIT_FIRMWARE_CONFIRMATION;
 80002bc:	4b70      	ldr	r3, [pc, #448]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 80002be:	2203      	movs	r2, #3
 80002c0:	701a      	strb	r2, [r3, #0]
            } else {
                LogError("Failed to send activation command.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;
 80002c2:	e0d8      	b.n	8000476 <CAN_ProcessStateMachine+0x296>
                LogError("Failed to send activation command.");
 80002c4:	4875      	ldr	r0, [pc, #468]	; (800049c <CAN_ProcessStateMachine+0x2bc>)
 80002c6:	f000 faef 	bl	80008a8 <LogError>
                currentState = STATE_ACTIVATION_FAILED;
 80002ca:	4b6d      	ldr	r3, [pc, #436]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 80002cc:	2207      	movs	r2, #7
 80002ce:	701a      	strb	r2, [r3, #0]
            break;
 80002d0:	e0d1      	b.n	8000476 <CAN_ProcessStateMachine+0x296>

        case STATE_WAIT_FIRMWARE_CONFIRMATION:
            LogMessage("STATE_WAIT_FIRMWARE_CONFIRMATION");
 80002d2:	4873      	ldr	r0, [pc, #460]	; (80004a0 <CAN_ProcessStateMachine+0x2c0>)
 80002d4:	f000 faca 	bl	800086c <LogMessage>
            if (HAL_GetTick() - stateTimer > 3000) {
 80002d8:	f000 fdd2 	bl	8000e80 <HAL_GetTick>
 80002dc:	4602      	mov	r2, r0
 80002de:	4b6b      	ldr	r3, [pc, #428]	; (800048c <CAN_ProcessStateMachine+0x2ac>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	1ad3      	subs	r3, r2, r3
 80002e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d906      	bls.n	80002fa <CAN_ProcessStateMachine+0x11a>
                LogError("Timeout waiting for firmware confirmation.");
 80002ec:	486d      	ldr	r0, [pc, #436]	; (80004a4 <CAN_ProcessStateMachine+0x2c4>)
 80002ee:	f000 fadb 	bl	80008a8 <LogError>
                currentState = STATE_ACTIVATION_FAILED;
 80002f2:	4b63      	ldr	r3, [pc, #396]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 80002f4:	2207      	movs	r2, #7
 80002f6:	701a      	strb	r2, [r3, #0]
                    stateTimer = HAL_GetTick();
                } else {
                    LogMessage("Received message, but it does not match firmware confirmation (AA BB).");
                }
            }
            break;
 80002f8:	e0b8      	b.n	800046c <CAN_ProcessStateMachine+0x28c>
            } else if (heartbeat_received || canopen_confirmation_received) {
 80002fa:	4b6b      	ldr	r3, [pc, #428]	; (80004a8 <CAN_ProcessStateMachine+0x2c8>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	2b00      	cmp	r3, #0
 8000302:	d105      	bne.n	8000310 <CAN_ProcessStateMachine+0x130>
 8000304:	4b69      	ldr	r3, [pc, #420]	; (80004ac <CAN_ProcessStateMachine+0x2cc>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	2b00      	cmp	r3, #0
 800030c:	f000 80ae 	beq.w	800046c <CAN_ProcessStateMachine+0x28c>
                if (memcmp(received_data, firmware_confirmation_data, sizeof(firmware_confirmation_data)) == 0) {
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	2202      	movs	r2, #2
 8000316:	4619      	mov	r1, r3
 8000318:	4865      	ldr	r0, [pc, #404]	; (80004b0 <CAN_ProcessStateMachine+0x2d0>)
 800031a:	f002 fd3d 	bl	8002d98 <memcmp>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10b      	bne.n	800033c <CAN_ProcessStateMachine+0x15c>
                    LogMessage("Firmware confirmation received (AA BB). Proceeding to bootloader version query.");
 8000324:	4863      	ldr	r0, [pc, #396]	; (80004b4 <CAN_ProcessStateMachine+0x2d4>)
 8000326:	f000 faa1 	bl	800086c <LogMessage>
                    currentState = STATE_GET_BOOTLOADER_VERSION;
 800032a:	4b55      	ldr	r3, [pc, #340]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 800032c:	2204      	movs	r2, #4
 800032e:	701a      	strb	r2, [r3, #0]
                    stateTimer = HAL_GetTick();
 8000330:	f000 fda6 	bl	8000e80 <HAL_GetTick>
 8000334:	4603      	mov	r3, r0
 8000336:	4a55      	ldr	r2, [pc, #340]	; (800048c <CAN_ProcessStateMachine+0x2ac>)
 8000338:	6013      	str	r3, [r2, #0]
            break;
 800033a:	e097      	b.n	800046c <CAN_ProcessStateMachine+0x28c>
                    LogMessage("Received message, but it does not match firmware confirmation (AA BB).");
 800033c:	485e      	ldr	r0, [pc, #376]	; (80004b8 <CAN_ProcessStateMachine+0x2d8>)
 800033e:	f000 fa95 	bl	800086c <LogMessage>
            break;
 8000342:	e093      	b.n	800046c <CAN_ProcessStateMachine+0x28c>

        case STATE_GET_BOOTLOADER_VERSION:
            LogMessage("STATE_GET_BOOTLOADER_VERSION");
 8000344:	485d      	ldr	r0, [pc, #372]	; (80004bc <CAN_ProcessStateMachine+0x2dc>)
 8000346:	f000 fa91 	bl	800086c <LogMessage>
            if (send_command(bootloader_version_query_data, sizeof(bootloader_version_query_data))) {
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	2102      	movs	r1, #2
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f9c3 	bl	80006dc <send_command>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d029      	beq.n	80003b0 <CAN_ProcessStateMachine+0x1d0>
                LogMessage("Bootloader version query command [0x20 0x20] sent, waiting for response.");
 800035c:	4858      	ldr	r0, [pc, #352]	; (80004c0 <CAN_ProcessStateMachine+0x2e0>)
 800035e:	f000 fa85 	bl	800086c <LogMessage>

                uint32_t start_time = HAL_GetTick();
 8000362:	f000 fd8d 	bl	8000e80 <HAL_GetTick>
 8000366:	61b8      	str	r0, [r7, #24]

                while (HAL_GetTick() - start_time < 6000) {
 8000368:	e00d      	b.n	8000386 <CAN_ProcessStateMachine+0x1a6>
                    if (heartbeat_received) {
 800036a:	4b4f      	ldr	r3, [pc, #316]	; (80004a8 <CAN_ProcessStateMachine+0x2c8>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	b2db      	uxtb	r3, r3
 8000370:	2b00      	cmp	r3, #0
 8000372:	d005      	beq.n	8000380 <CAN_ProcessStateMachine+0x1a0>
                        LogMessage("Received expected heartbeat during version check.");
 8000374:	4853      	ldr	r0, [pc, #332]	; (80004c4 <CAN_ProcessStateMachine+0x2e4>)
 8000376:	f000 fa79 	bl	800086c <LogMessage>
                        heartbeat_received = 0; // сбрасываем флаг после получения сообщения
 800037a:	4b4b      	ldr	r3, [pc, #300]	; (80004a8 <CAN_ProcessStateMachine+0x2c8>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
                    }
                    HAL_Delay(10);
 8000380:	200a      	movs	r0, #10
 8000382:	f000 fd87 	bl	8000e94 <HAL_Delay>
                while (HAL_GetTick() - start_time < 6000) {
 8000386:	f000 fd7b 	bl	8000e80 <HAL_GetTick>
 800038a:	4602      	mov	r2, r0
 800038c:	69bb      	ldr	r3, [r7, #24]
 800038e:	1ad3      	subs	r3, r2, r3
 8000390:	f241 726f 	movw	r2, #5999	; 0x176f
 8000394:	4293      	cmp	r3, r2
 8000396:	d9e8      	bls.n	800036a <CAN_ProcessStateMachine+0x18a>
                }

                if (!heartbeat_received) {
 8000398:	4b43      	ldr	r3, [pc, #268]	; (80004a8 <CAN_ProcessStateMachine+0x2c8>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d166      	bne.n	8000470 <CAN_ProcessStateMachine+0x290>
                    LogError("Timeout waiting for bootloader version response.");
 80003a2:	4849      	ldr	r0, [pc, #292]	; (80004c8 <CAN_ProcessStateMachine+0x2e8>)
 80003a4:	f000 fa80 	bl	80008a8 <LogError>
                    currentState = STATE_ACTIVATION_FAILED;
 80003a8:	4b35      	ldr	r3, [pc, #212]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 80003aa:	2207      	movs	r2, #7
 80003ac:	701a      	strb	r2, [r3, #0]
                }
            } else {
                LogError("Failed to send bootloader version query command.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;
 80003ae:	e05f      	b.n	8000470 <CAN_ProcessStateMachine+0x290>
                LogError("Failed to send bootloader version query command.");
 80003b0:	4846      	ldr	r0, [pc, #280]	; (80004cc <CAN_ProcessStateMachine+0x2ec>)
 80003b2:	f000 fa79 	bl	80008a8 <LogError>
                currentState = STATE_ACTIVATION_FAILED;
 80003b6:	4b32      	ldr	r3, [pc, #200]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 80003b8:	2207      	movs	r2, #7
 80003ba:	701a      	strb	r2, [r3, #0]
            break;
 80003bc:	e058      	b.n	8000470 <CAN_ProcessStateMachine+0x290>
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;
*/
        case STATE_SOFT_RESET:
            LogMessage("STATE_SOFT_RESET: Performing soft reset");
 80003be:	4844      	ldr	r0, [pc, #272]	; (80004d0 <CAN_ProcessStateMachine+0x2f0>)
 80003c0:	f000 fa54 	bl	800086c <LogMessage>
            if (send_command(soft_reset_command, sizeof(soft_reset_command))) {
 80003c4:	463b      	mov	r3, r7
 80003c6:	2102      	movs	r1, #2
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f987 	bl	80006dc <send_command>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d006      	beq.n	80003e2 <CAN_ProcessStateMachine+0x202>
                LogMessage("Soft reset command sent successfully.");
 80003d4:	483f      	ldr	r0, [pc, #252]	; (80004d4 <CAN_ProcessStateMachine+0x2f4>)
 80003d6:	f000 fa49 	bl	800086c <LogMessage>
                currentState = STATE_INIT;  // Возврат в начальное состояние после сброса
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
            } else {
                LogError("Failed to send soft reset command.");
                currentState = STATE_ACTIVATION_FAILED;  // Переход в состояние ошибки, если сброс не удался
            }
            break;
 80003e0:	e049      	b.n	8000476 <CAN_ProcessStateMachine+0x296>
                LogError("Failed to send soft reset command.");
 80003e2:	483d      	ldr	r0, [pc, #244]	; (80004d8 <CAN_ProcessStateMachine+0x2f8>)
 80003e4:	f000 fa60 	bl	80008a8 <LogError>
                currentState = STATE_ACTIVATION_FAILED;  // Переход в состояние ошибки, если сброс не удался
 80003e8:	4b25      	ldr	r3, [pc, #148]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 80003ea:	2207      	movs	r2, #7
 80003ec:	701a      	strb	r2, [r3, #0]
            break;
 80003ee:	e042      	b.n	8000476 <CAN_ProcessStateMachine+0x296>

        case STATE_CONFIRM_CANOPEN_MODE:
            LogMessage("STATE_CONFIRM_CANOPEN_MODE");
 80003f0:	483a      	ldr	r0, [pc, #232]	; (80004dc <CAN_ProcessStateMachine+0x2fc>)
 80003f2:	f000 fa3b 	bl	800086c <LogMessage>
            if (wait_for_heartbeat(5000)) {
 80003f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80003fa:	f000 f9bb 	bl	8000774 <wait_for_heartbeat>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d006      	beq.n	8000412 <CAN_ProcessStateMachine+0x232>
                LogMessage("CANopen mode confirmed.");
 8000404:	4836      	ldr	r0, [pc, #216]	; (80004e0 <CAN_ProcessStateMachine+0x300>)
 8000406:	f000 fa31 	bl	800086c <LogMessage>
                currentState = STATE_CHANGE_NODE_ID;
 800040a:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 800040c:	2206      	movs	r2, #6
 800040e:	701a      	strb	r2, [r3, #0]
            } else if (HAL_GetTick() - stateTimer > 5000) {
                LogError("Failed to confirm CANopen mode.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;
 8000410:	e030      	b.n	8000474 <CAN_ProcessStateMachine+0x294>
            } else if (HAL_GetTick() - stateTimer > 5000) {
 8000412:	f000 fd35 	bl	8000e80 <HAL_GetTick>
 8000416:	4602      	mov	r2, r0
 8000418:	4b1c      	ldr	r3, [pc, #112]	; (800048c <CAN_ProcessStateMachine+0x2ac>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000422:	4293      	cmp	r3, r2
 8000424:	d926      	bls.n	8000474 <CAN_ProcessStateMachine+0x294>
                LogError("Failed to confirm CANopen mode.");
 8000426:	482f      	ldr	r0, [pc, #188]	; (80004e4 <CAN_ProcessStateMachine+0x304>)
 8000428:	f000 fa3e 	bl	80008a8 <LogError>
                currentState = STATE_ACTIVATION_FAILED;
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 800042e:	2207      	movs	r2, #7
 8000430:	701a      	strb	r2, [r3, #0]
            break;
 8000432:	e01f      	b.n	8000474 <CAN_ProcessStateMachine+0x294>

        case STATE_CHANGE_NODE_ID:
            LogMessage("STATE_CHANGE_NODE_ID: Changing Node-ID");
 8000434:	482c      	ldr	r0, [pc, #176]	; (80004e8 <CAN_ProcessStateMachine+0x308>)
 8000436:	f000 fa19 	bl	800086c <LogMessage>
            change_node_id_and_save(0x02);
 800043a:	2002      	movs	r0, #2
 800043c:	f000 f8ca 	bl	80005d4 <change_node_id_and_save>
            currentState = STATE_ACTIVATION_COMPLETE;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 8000442:	2208      	movs	r2, #8
 8000444:	701a      	strb	r2, [r3, #0]
            break;
 8000446:	e016      	b.n	8000476 <CAN_ProcessStateMachine+0x296>

        case STATE_ACTIVATION_COMPLETE:
            LogMessage("Activation process completed successfully.");
 8000448:	4828      	ldr	r0, [pc, #160]	; (80004ec <CAN_ProcessStateMachine+0x30c>)
 800044a:	f000 fa0f 	bl	800086c <LogMessage>
            currentState = STATE_SOFT_RESET;  // Переход в состояние программного сброса
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 8000450:	2209      	movs	r2, #9
 8000452:	701a      	strb	r2, [r3, #0]
            break;
 8000454:	e00f      	b.n	8000476 <CAN_ProcessStateMachine+0x296>

        case STATE_ACTIVATION_FAILED:
            LogError("Activation failed.");
 8000456:	4826      	ldr	r0, [pc, #152]	; (80004f0 <CAN_ProcessStateMachine+0x310>)
 8000458:	f000 fa26 	bl	80008a8 <LogError>
            currentState = STATE_INIT;
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <CAN_ProcessStateMachine+0x2a0>)
 800045e:	2200      	movs	r2, #0
 8000460:	701a      	strb	r2, [r3, #0]
            break;
 8000462:	e008      	b.n	8000476 <CAN_ProcessStateMachine+0x296>

        default:
            break;
 8000464:	bf00      	nop
 8000466:	e006      	b.n	8000476 <CAN_ProcessStateMachine+0x296>
            break;
 8000468:	bf00      	nop
 800046a:	e004      	b.n	8000476 <CAN_ProcessStateMachine+0x296>
            break;
 800046c:	bf00      	nop
 800046e:	e002      	b.n	8000476 <CAN_ProcessStateMachine+0x296>
            break;
 8000470:	bf00      	nop
 8000472:	e000      	b.n	8000476 <CAN_ProcessStateMachine+0x296>
            break;
 8000474:	bf00      	nop
    }
}
 8000476:	bf00      	nop
 8000478:	3720      	adds	r7, #32
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000078 	.word	0x20000078
 8000484:	080037ac 	.word	0x080037ac
 8000488:	080037cc 	.word	0x080037cc
 800048c:	2000007c 	.word	0x2000007c
 8000490:	080037ec 	.word	0x080037ec
 8000494:	08003814 	.word	0x08003814
 8000498:	0800382c 	.word	0x0800382c
 800049c:	08003864 	.word	0x08003864
 80004a0:	08003888 	.word	0x08003888
 80004a4:	080038ac 	.word	0x080038ac
 80004a8:	20000080 	.word	0x20000080
 80004ac:	20000081 	.word	0x20000081
 80004b0:	20000084 	.word	0x20000084
 80004b4:	080038d8 	.word	0x080038d8
 80004b8:	08003928 	.word	0x08003928
 80004bc:	08003970 	.word	0x08003970
 80004c0:	08003990 	.word	0x08003990
 80004c4:	080039dc 	.word	0x080039dc
 80004c8:	08003a10 	.word	0x08003a10
 80004cc:	08003a44 	.word	0x08003a44
 80004d0:	08003a78 	.word	0x08003a78
 80004d4:	08003aa0 	.word	0x08003aa0
 80004d8:	08003ac8 	.word	0x08003ac8
 80004dc:	08003aec 	.word	0x08003aec
 80004e0:	08003b08 	.word	0x08003b08
 80004e4:	08003b20 	.word	0x08003b20
 80004e8:	08003b40 	.word	0x08003b40
 80004ec:	08003b68 	.word	0x08003b68
 80004f0:	08003b94 	.word	0x08003b94

080004f4 <process_CAN_message>:



void process_CAN_message(uint16_t received_ID, uint8_t *data, uint8_t DLC) {
 80004f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f6:	b0c3      	sub	sp, #268	; 0x10c
 80004f8:	af0a      	add	r7, sp, #40	; 0x28
 80004fa:	4603      	mov	r3, r0
 80004fc:	6139      	str	r1, [r7, #16]
 80004fe:	82fb      	strh	r3, [r7, #22]
 8000500:	4613      	mov	r3, r2
 8000502:	757b      	strb	r3, [r7, #21]
    char logBuffer[200];
    snprintf(logBuffer, sizeof(logBuffer),
 8000504:	8af9      	ldrh	r1, [r7, #22]
 8000506:	7d7b      	ldrb	r3, [r7, #21]
             "Received CAN message: ID=0x%X, DLC=%d, Data=[%02X, %02X, %02X, %02X, %02X, %02X, %02X, %02X]",
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 8000508:	693a      	ldr	r2, [r7, #16]
 800050a:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 800050c:	4614      	mov	r4, r2
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	3201      	adds	r2, #1
 8000512:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 8000514:	4615      	mov	r5, r2
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 8000516:	693a      	ldr	r2, [r7, #16]
 8000518:	3202      	adds	r2, #2
 800051a:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 800051c:	4616      	mov	r6, r2
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 800051e:	693a      	ldr	r2, [r7, #16]
 8000520:	3203      	adds	r2, #3
 8000522:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 8000524:	60fa      	str	r2, [r7, #12]
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	3204      	adds	r2, #4
 800052a:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 800052c:	60ba      	str	r2, [r7, #8]
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	3205      	adds	r2, #5
 8000532:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 8000534:	607a      	str	r2, [r7, #4]
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	3206      	adds	r2, #6
 800053a:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 800053c:	603a      	str	r2, [r7, #0]
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	3207      	adds	r2, #7
 8000542:	7812      	ldrb	r2, [r2, #0]
    snprintf(logBuffer, sizeof(logBuffer),
 8000544:	f107 0018 	add.w	r0, r7, #24
 8000548:	9208      	str	r2, [sp, #32]
 800054a:	f8d7 c000 	ldr.w	ip, [r7]
 800054e:	f8cd c01c 	str.w	ip, [sp, #28]
 8000552:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8000556:	f8cd c018 	str.w	ip, [sp, #24]
 800055a:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800055e:	f8cd c014 	str.w	ip, [sp, #20]
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	9204      	str	r2, [sp, #16]
 8000566:	9603      	str	r6, [sp, #12]
 8000568:	9502      	str	r5, [sp, #8]
 800056a:	9401      	str	r4, [sp, #4]
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	460b      	mov	r3, r1
 8000570:	4a15      	ldr	r2, [pc, #84]	; (80005c8 <process_CAN_message+0xd4>)
 8000572:	21c8      	movs	r1, #200	; 0xc8
 8000574:	f002 fbdc 	bl	8002d30 <sniprintf>
    LogMessage(logBuffer);
 8000578:	f107 0318 	add.w	r3, r7, #24
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f975 	bl	800086c <LogMessage>

    // Проверка на ответ версии загрузчика
    if (received_ID == (RAW_CAN_RESPONSE_ARBITRATION_CODE | LEFT_WHEEL_ID) &&
 8000582:	8afb      	ldrh	r3, [r7, #22]
 8000584:	f240 5283 	movw	r2, #1411	; 0x583
 8000588:	4293      	cmp	r3, r2
 800058a:	d118      	bne.n	80005be <process_CAN_message+0xca>
        data[0] == 0xCC && data[1] == 0xDD && data[2] == 0x00 && data[3] == 0x01) {
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	781b      	ldrb	r3, [r3, #0]
    if (received_ID == (RAW_CAN_RESPONSE_ARBITRATION_CODE | LEFT_WHEEL_ID) &&
 8000590:	2bcc      	cmp	r3, #204	; 0xcc
 8000592:	d114      	bne.n	80005be <process_CAN_message+0xca>
        data[0] == 0xCC && data[1] == 0xDD && data[2] == 0x00 && data[3] == 0x01) {
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	3301      	adds	r3, #1
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2bdd      	cmp	r3, #221	; 0xdd
 800059c:	d10f      	bne.n	80005be <process_CAN_message+0xca>
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	3302      	adds	r3, #2
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d10a      	bne.n	80005be <process_CAN_message+0xca>
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	3303      	adds	r3, #3
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d105      	bne.n	80005be <process_CAN_message+0xca>
        LogMessage("Bootloader version response received: Version 0x0100.");
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <process_CAN_message+0xd8>)
 80005b4:	f000 f95a 	bl	800086c <LogMessage>
        heartbeat_received = 1;  // Используем флаг для перехода к следующему шагу
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <process_CAN_message+0xdc>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
    }
}
 80005be:	bf00      	nop
 80005c0:	37e4      	adds	r7, #228	; 0xe4
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c6:	bf00      	nop
 80005c8:	08003ba8 	.word	0x08003ba8
 80005cc:	08003c08 	.word	0x08003c08
 80005d0:	20000080 	.word	0x20000080

080005d4 <change_node_id_and_save>:
        LogMessage("CANopen confirmation message received.");
        canopen_confirmation_received = 1;
    }
}
*/
void change_node_id_and_save(uint8_t new_id) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
    uint8_t change_id_command[] = {0x2F, 0x01, 0x18, 0x00, new_id, 0x00, 0x00, 0x00};
 80005de:	232f      	movs	r3, #47	; 0x2f
 80005e0:	763b      	strb	r3, [r7, #24]
 80005e2:	2301      	movs	r3, #1
 80005e4:	767b      	strb	r3, [r7, #25]
 80005e6:	2318      	movs	r3, #24
 80005e8:	76bb      	strb	r3, [r7, #26]
 80005ea:	2300      	movs	r3, #0
 80005ec:	76fb      	strb	r3, [r7, #27]
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	773b      	strb	r3, [r7, #28]
 80005f2:	2300      	movs	r3, #0
 80005f4:	777b      	strb	r3, [r7, #29]
 80005f6:	2300      	movs	r3, #0
 80005f8:	77bb      	strb	r3, [r7, #30]
 80005fa:	2300      	movs	r3, #0
 80005fc:	77fb      	strb	r3, [r7, #31]

    if (send_command(change_id_command, sizeof(change_id_command))) {
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	2108      	movs	r1, #8
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f869 	bl	80006dc <send_command>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d032      	beq.n	8000676 <change_node_id_and_save+0xa2>
        LogMessage("Node-ID change command sent successfully.");
 8000610:	481c      	ldr	r0, [pc, #112]	; (8000684 <change_node_id_and_save+0xb0>)
 8000612:	f000 f92b 	bl	800086c <LogMessage>
        HAL_Delay(100);
 8000616:	2064      	movs	r0, #100	; 0x64
 8000618:	f000 fc3c 	bl	8000e94 <HAL_Delay>

        uint8_t save_id_command[] = {0x2B, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00};
 800061c:	4a1a      	ldr	r2, [pc, #104]	; (8000688 <change_node_id_and_save+0xb4>)
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000626:	e883 0003 	stmia.w	r3, {r0, r1}
        if (send_command(save_id_command, sizeof(save_id_command))) {
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	2108      	movs	r1, #8
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f853 	bl	80006dc <send_command>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d018      	beq.n	800066e <change_node_id_and_save+0x9a>
            LogMessage("Node-ID saved successfully.");
 800063c:	4813      	ldr	r0, [pc, #76]	; (800068c <change_node_id_and_save+0xb8>)
 800063e:	f000 f915 	bl	800086c <LogMessage>
            HAL_Delay(100);
 8000642:	2064      	movs	r0, #100	; 0x64
 8000644:	f000 fc26 	bl	8000e94 <HAL_Delay>

            uint8_t reset_command[] = {0x81, 0x00};
 8000648:	2381      	movs	r3, #129	; 0x81
 800064a:	81bb      	strh	r3, [r7, #12]
            if (send_command(reset_command, sizeof(reset_command))) {
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f842 	bl	80006dc <send_command>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <change_node_id_and_save+0x92>
                LogMessage("Soft reset command sent successfully.");
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <change_node_id_and_save+0xbc>)
 8000660:	f000 f904 	bl	800086c <LogMessage>
            LogError("Failed to save new Node-ID.");
        }
    } else {
        LogError("Failed to send Node-ID change command.");
    }
}
 8000664:	e00a      	b.n	800067c <change_node_id_and_save+0xa8>
                LogError("Failed to send soft reset command.");
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <change_node_id_and_save+0xc0>)
 8000668:	f000 f91e 	bl	80008a8 <LogError>
}
 800066c:	e006      	b.n	800067c <change_node_id_and_save+0xa8>
            LogError("Failed to save new Node-ID.");
 800066e:	480a      	ldr	r0, [pc, #40]	; (8000698 <change_node_id_and_save+0xc4>)
 8000670:	f000 f91a 	bl	80008a8 <LogError>
}
 8000674:	e002      	b.n	800067c <change_node_id_and_save+0xa8>
        LogError("Failed to send Node-ID change command.");
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <change_node_id_and_save+0xc8>)
 8000678:	f000 f916 	bl	80008a8 <LogError>
}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	08003c40 	.word	0x08003c40
 8000688:	08003ccc 	.word	0x08003ccc
 800068c:	08003c6c 	.word	0x08003c6c
 8000690:	08003aa0 	.word	0x08003aa0
 8000694:	08003ac8 	.word	0x08003ac8
 8000698:	08003c88 	.word	0x08003c88
 800069c:	08003ca4 	.word	0x08003ca4

080006a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	; 0x30
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    while (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80006a8:	e008      	b.n	80006bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
        process_CAN_message(RxHeader.StdId, RxData, RxHeader.DLC);
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	f107 010c 	add.w	r1, r7, #12
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff1c 	bl	80004f4 <process_CAN_message>
    while (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	f107 0214 	add.w	r2, r7, #20
 80006c4:	2100      	movs	r1, #0
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 ff02 	bl	80014d0 <HAL_CAN_GetRxMessage>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0eb      	beq.n	80006aa <HAL_CAN_RxFifo0MsgPendingCallback+0xa>
    }
}
 80006d2:	bf00      	nop
 80006d4:	bf00      	nop
 80006d6:	3730      	adds	r7, #48	; 0x30
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <send_command>:

static uint8_t send_command(uint8_t *data, uint8_t len) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    TxHeader.StdId = LEFT_WHEEL_ID;
 80006e8:	2303      	movs	r3, #3
 80006ea:	60fb      	str	r3, [r7, #12]
    TxHeader.RTR = CAN_RTR_DATA;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
    TxHeader.DLC = len;
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	61fb      	str	r3, [r7, #28]

    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) != HAL_OK) {
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	f107 010c 	add.w	r1, r7, #12
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4817      	ldr	r0, [pc, #92]	; (8000760 <send_command+0x84>)
 8000704:	f000 fdf2 	bl	80012ec <HAL_CAN_AddTxMessage>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <send_command+0x3c>
        LogError("Error sending command to CAN.");
 800070e:	4815      	ldr	r0, [pc, #84]	; (8000764 <send_command+0x88>)
 8000710:	f000 f8ca 	bl	80008a8 <LogError>
        return 0;
 8000714:	2300      	movs	r3, #0
 8000716:	e01f      	b.n	8000758 <send_command+0x7c>
    } else {
        LogMessage("Command sent successfully to CAN");
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <send_command+0x8c>)
 800071a:	f000 f8a7 	bl	800086c <LogMessage>
    }

    uint32_t startTime = HAL_GetTick();
 800071e:	f000 fbaf 	bl	8000e80 <HAL_GetTick>
 8000722:	6278      	str	r0, [r7, #36]	; 0x24
    while (HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)) {
 8000724:	e00c      	b.n	8000740 <send_command+0x64>
        if (HAL_GetTick() - startTime > 500) {
 8000726:	f000 fbab 	bl	8000e80 <HAL_GetTick>
 800072a:	4602      	mov	r2, r0
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000734:	d904      	bls.n	8000740 <send_command+0x64>
            LogError("Timeout waiting for message to be sent.");
 8000736:	480d      	ldr	r0, [pc, #52]	; (800076c <send_command+0x90>)
 8000738:	f000 f8b6 	bl	80008a8 <LogError>
            return 0;
 800073c:	2300      	movs	r3, #0
 800073e:	e00b      	b.n	8000758 <send_command+0x7c>
    while (HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)) {
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4619      	mov	r1, r3
 8000744:	4806      	ldr	r0, [pc, #24]	; (8000760 <send_command+0x84>)
 8000746:	f000 fea0 	bl	800148a <HAL_CAN_IsTxMessagePending>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1ea      	bne.n	8000726 <send_command+0x4a>
        }
    }
    LogMessage("Message sent successfully from TxMailbox");
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <send_command+0x94>)
 8000752:	f000 f88b 	bl	800086c <LogMessage>
    return 1;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3728      	adds	r7, #40	; 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000008c 	.word	0x2000008c
 8000764:	08003cd4 	.word	0x08003cd4
 8000768:	08003cf4 	.word	0x08003cf4
 800076c:	08003d18 	.word	0x08003d18
 8000770:	08003d40 	.word	0x08003d40

08000774 <wait_for_heartbeat>:

static uint8_t wait_for_heartbeat(uint32_t timeout_ms) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();
 800077c:	f000 fb80 	bl	8000e80 <HAL_GetTick>
 8000780:	60f8      	str	r0, [r7, #12]

    heartbeat_received = 0;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <wait_for_heartbeat+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
    canopen_confirmation_received = 0;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <wait_for_heartbeat+0x78>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]

    while ((HAL_GetTick() - start_time) < timeout_ms) {
 800078e:	e01a      	b.n	80007c6 <wait_for_heartbeat+0x52>
        if (currentState == STATE_CONFIRM_CANOPEN_MODE && canopen_confirmation_received) {
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <wait_for_heartbeat+0x7c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b05      	cmp	r3, #5
 8000796:	d109      	bne.n	80007ac <wait_for_heartbeat+0x38>
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <wait_for_heartbeat+0x78>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d004      	beq.n	80007ac <wait_for_heartbeat+0x38>
            LogMessage("CANopen mode confirmed.");
 80007a2:	4814      	ldr	r0, [pc, #80]	; (80007f4 <wait_for_heartbeat+0x80>)
 80007a4:	f000 f862 	bl	800086c <LogMessage>
            return 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e018      	b.n	80007de <wait_for_heartbeat+0x6a>
        }
        if (heartbeat_received) {
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <wait_for_heartbeat+0x74>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <wait_for_heartbeat+0x4c>
            LogMessage("Expected heartbeat received.");
 80007b6:	4810      	ldr	r0, [pc, #64]	; (80007f8 <wait_for_heartbeat+0x84>)
 80007b8:	f000 f858 	bl	800086c <LogMessage>
            return 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	e00e      	b.n	80007de <wait_for_heartbeat+0x6a>
        }
        HAL_Delay(10);
 80007c0:	200a      	movs	r0, #10
 80007c2:	f000 fb67 	bl	8000e94 <HAL_Delay>
    while ((HAL_GetTick() - start_time) < timeout_ms) {
 80007c6:	f000 fb5b 	bl	8000e80 <HAL_GetTick>
 80007ca:	4602      	mov	r2, r0
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d8dc      	bhi.n	8000790 <wait_for_heartbeat+0x1c>
    }
    LogMessage("Timeout: heartbeat not received.");
 80007d6:	4809      	ldr	r0, [pc, #36]	; (80007fc <wait_for_heartbeat+0x88>)
 80007d8:	f000 f848 	bl	800086c <LogMessage>
    return 0;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000080 	.word	0x20000080
 80007ec:	20000081 	.word	0x20000081
 80007f0:	20000078 	.word	0x20000078
 80007f4:	08003b08 	.word	0x08003b08
 80007f8:	08003d6c 	.word	0x08003d6c
 80007fc:	08003d8c 	.word	0x08003d8c

08000800 <CAN_ConfigFilter>:

static void CAN_ConfigFilter(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef FilterConfig = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2228      	movs	r2, #40	; 0x28
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fad3 	bl	8002db8 <memset>
    FilterConfig.FilterBank = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterIdHigh = 0x0000;
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
    FilterConfig.FilterIdLow = 0x0000;
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
    FilterConfig.FilterMaskIdHigh = 0x0000;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
    FilterConfig.FilterMaskIdLow = 0x0000;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
    FilterConfig.FilterActivation = ENABLE;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]

    if (HAL_CAN_ConfigFilter(&hcan, &FilterConfig) != HAL_OK) {
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <CAN_ConfigFilter+0x60>)
 800083c:	f000 fc49 	bl	80010d2 <HAL_CAN_ConfigFilter>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d005      	beq.n	8000852 <CAN_ConfigFilter+0x52>
        LogError("CAN_ConfigFilter: Filter configuration failed");
 8000846:	4807      	ldr	r0, [pc, #28]	; (8000864 <CAN_ConfigFilter+0x64>)
 8000848:	f000 f82e 	bl	80008a8 <LogError>
        Error_Handler();
 800084c:	f000 f920 	bl	8000a90 <Error_Handler>
    } else {
        LogMessage("CAN_ConfigFilter: Filter configured successfully (all messages pass)");
    }
}
 8000850:	e002      	b.n	8000858 <CAN_ConfigFilter+0x58>
        LogMessage("CAN_ConfigFilter: Filter configured successfully (all messages pass)");
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <CAN_ConfigFilter+0x68>)
 8000854:	f000 f80a 	bl	800086c <LogMessage>
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000008c 	.word	0x2000008c
 8000864:	08003db0 	.word	0x08003db0
 8000868:	08003de0 	.word	0x08003de0

0800086c <LogMessage>:

void LogMessage(const char *message) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff fc69 	bl	800014c <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b29a      	uxth	r2, r3
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <LogMessage+0x34>)
 8000886:	f002 f87f 	bl	8002988 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
 800088e:	2202      	movs	r2, #2
 8000890:	4904      	ldr	r1, [pc, #16]	; (80008a4 <LogMessage+0x38>)
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <LogMessage+0x34>)
 8000894:	f002 f878 	bl	8002988 <HAL_UART_Transmit>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000b4 	.word	0x200000b4
 80008a4:	08003e28 	.word	0x08003e28

080008a8 <LogError>:

void LogError(const char *message) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    LogMessage(message);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ffdb 	bl	800086c <LogMessage>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f000 fa85 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f810 	bl	80008ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f000 f8b3 	bl	8000a34 <MX_GPIO_Init>
  MX_CAN_Init();
 80008ce:	f000 f851 	bl	8000974 <MX_CAN_Init>
  MX_USART2_UART_Init();
 80008d2:	f000 f885 	bl	80009e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // �?нициализация CAN
     CAN_Init();
 80008d6:	f7ff fc41 	bl	800015c <CAN_Init>

     // Запуск процесса активации
     StartActivationProcess();
 80008da:	f7ff fc6b 	bl	80001b4 <StartActivationProcess>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CAN_ProcessStateMachine();
 80008de:	f7ff fc7f 	bl	80001e0 <CAN_ProcessStateMachine>
	  HAL_Delay(100);
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f000 fad6 	bl	8000e94 <HAL_Delay>
	  CAN_ProcessStateMachine();
 80008e8:	e7f9      	b.n	80008de <main+0x20>

080008ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b090      	sub	sp, #64	; 0x40
 80008ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	2228      	movs	r2, #40	; 0x28
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fa5d 	bl	8002db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000914:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091a:	2301      	movs	r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000928:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800092c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 0318 	add.w	r3, r7, #24
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fbc8 	bl	80020c8 <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800093e:	f000 f8a7 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2302      	movs	r3, #2
 8000948:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000952:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2102      	movs	r1, #2
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fe35 	bl	80025cc <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000968:	f000 f892 	bl	8000a90 <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3740      	adds	r7, #64	; 0x40
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_CAN_Init+0x64>)
 800097a:	4a18      	ldr	r2, [pc, #96]	; (80009dc <MX_CAN_Init+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_CAN_Init+0x64>)
 8000980:	2209      	movs	r2, #9
 8000982:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_CAN_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_CAN_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_CAN_Init+0x64>)
 8000992:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000996:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_CAN_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_CAN_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_CAN_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_CAN_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_CAN_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_CAN_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_CAN_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_CAN_Init+0x64>)
 80009c4:	f000 fa8a 	bl	8000edc <HAL_CAN_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80009ce:	f000 f85f 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000008c 	.word	0x2000008c
 80009dc:	40006400 	.word	0x40006400

080009e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_USART2_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a18:	f001 ff66 	bl	80028e8 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a22:	f000 f835 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000b4 	.word	0x200000b4
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_GPIO_Init+0x58>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <MX_GPIO_Init+0x58>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_GPIO_Init+0x58>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_GPIO_Init+0x58>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <MX_GPIO_Init+0x58>)
 8000a58:	f043 0320 	orr.w	r3, r3, #32
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_GPIO_Init+0x58>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f003 0320 	and.w	r3, r3, #32
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_GPIO_Init+0x58>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <MX_GPIO_Init+0x58>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <MX_GPIO_Init+0x58>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	40021000 	.word	0x40021000

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_MspInit+0x5c>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <HAL_MspInit+0x5c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6193      	str	r3, [r2, #24]
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_MspInit+0x5c>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x5c>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_MspInit+0x5c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_MspInit+0x5c>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_MspInit+0x60>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_MspInit+0x60>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010000 	.word	0x40010000

08000b00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a2c      	ldr	r2, [pc, #176]	; (8000bcc <HAL_CAN_MspInit+0xcc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d151      	bne.n	8000bc4 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <HAL_CAN_MspInit+0xd0>)
 8000b22:	69db      	ldr	r3, [r3, #28]
 8000b24:	4a2a      	ldr	r2, [pc, #168]	; (8000bd0 <HAL_CAN_MspInit+0xd0>)
 8000b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2a:	61d3      	str	r3, [r2, #28]
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <HAL_CAN_MspInit+0xd0>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <HAL_CAN_MspInit+0xd0>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a24      	ldr	r2, [pc, #144]	; (8000bd0 <HAL_CAN_MspInit+0xd0>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_CAN_MspInit+0xd0>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	4619      	mov	r1, r3
 8000b64:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <HAL_CAN_MspInit+0xd4>)
 8000b66:	f001 f92b 	bl	8001dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <HAL_CAN_MspInit+0xd4>)
 8000b80:	f001 f91e 	bl	8001dc0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2013      	movs	r0, #19
 8000b8a:	f001 f8e2 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000b8e:	2013      	movs	r0, #19
 8000b90:	f001 f8fb 	bl	8001d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	2014      	movs	r0, #20
 8000b9a:	f001 f8da 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000b9e:	2014      	movs	r0, #20
 8000ba0:	f001 f8f3 	bl	8001d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2015      	movs	r0, #21
 8000baa:	f001 f8d2 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bae:	2015      	movs	r0, #21
 8000bb0:	f001 f8eb 	bl	8001d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2016      	movs	r0, #22
 8000bba:	f001 f8ca 	bl	8001d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000bbe:	2016      	movs	r0, #22
 8000bc0:	f001 f8e3 	bl	8001d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40006400 	.word	0x40006400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010800 	.word	0x40010800

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d12f      	bne.n	8000c58 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c02:	61d3      	str	r3, [r2, #28]
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <HAL_UART_MspInit+0x90>)
 8000c3c:	f001 f8c0 	bl	8001dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c40:	2308      	movs	r3, #8
 8000c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_UART_MspInit+0x90>)
 8000c54:	f001 f8b4 	bl	8001dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3720      	adds	r7, #32
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010800 	.word	0x40010800

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb2:	f000 f8d3 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000cc2:	f000 fd4b 	bl	800175c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000008c 	.word	0x2000008c

08000cd0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cd6:	f000 fd41 	bl	800175c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000008c 	.word	0x2000008c

08000ce4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <CAN1_RX1_IRQHandler+0x10>)
 8000cea:	f000 fd37 	bl	800175c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000008c 	.word	0x2000008c

08000cf8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <CAN1_SCE_IRQHandler+0x10>)
 8000cfe:	f000 fd2d 	bl	800175c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000008c 	.word	0x2000008c

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f002 f844 	bl	8002dc8 <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20005000 	.word	0x20005000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	200000fc 	.word	0x200000fc
 8000d74:	20000250 	.word	0x20000250

08000d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d84:	f7ff fff8 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d8a:	490c      	ldr	r1, [pc, #48]	; (8000dbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da0:	4c09      	ldr	r4, [pc, #36]	; (8000dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f002 f811 	bl	8002dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fd84 	bl	80008be <main>
  bx lr
 8000db6:	4770      	bx	lr
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dc0:	08003e94 	.word	0x08003e94
  ldr r2, =_sbss
 8000dc4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dc8:	2000024c 	.word	0x2000024c

08000dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_2_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x28>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x28>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 ffab 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe56 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 ffc3 	bl	8001da6 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 ff8b 	bl	8001d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x1c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x20>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <HAL_IncTick+0x20>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000100 	.word	0x20000100

08000e80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <HAL_GetTick+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	20000100 	.word	0x20000100

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff fff0 	bl	8000e80 <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffe0 	bl	8000e80 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008

08000edc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0ed      	b.n	80010ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d102      	bne.n	8000f00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fe00 	bl	8000b00 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0201 	orr.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f10:	f7ff ffb6 	bl	8000e80 <HAL_GetTick>
 8000f14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f16:	e012      	b.n	8000f3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f18:	f7ff ffb2 	bl	8000e80 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b0a      	cmp	r3, #10
 8000f24:	d90b      	bls.n	8000f3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2205      	movs	r2, #5
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0c5      	b.n	80010ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0e5      	beq.n	8000f18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0202 	bic.w	r2, r2, #2
 8000f5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f5c:	f7ff ff90 	bl	8000e80 <HAL_GetTick>
 8000f60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f62:	e012      	b.n	8000f8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f64:	f7ff ff8c 	bl	8000e80 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b0a      	cmp	r3, #10
 8000f70:	d90b      	bls.n	8000f8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2205      	movs	r2, #5
 8000f82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e09f      	b.n	80010ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1e5      	bne.n	8000f64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7e1b      	ldrb	r3, [r3, #24]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d108      	bne.n	8000fb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e007      	b.n	8000fc2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7e5b      	ldrb	r3, [r3, #25]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d108      	bne.n	8000fdc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e007      	b.n	8000fec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7e9b      	ldrb	r3, [r3, #26]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d108      	bne.n	8001006 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0220 	orr.w	r2, r2, #32
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	e007      	b.n	8001016 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0220 	bic.w	r2, r2, #32
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7edb      	ldrb	r3, [r3, #27]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d108      	bne.n	8001030 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 0210 	bic.w	r2, r2, #16
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e007      	b.n	8001040 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0210 	orr.w	r2, r2, #16
 800103e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7f1b      	ldrb	r3, [r3, #28]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d108      	bne.n	800105a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0208 	orr.w	r2, r2, #8
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	e007      	b.n	800106a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0208 	bic.w	r2, r2, #8
 8001068:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7f5b      	ldrb	r3, [r3, #29]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d108      	bne.n	8001084 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f042 0204 	orr.w	r2, r2, #4
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e007      	b.n	8001094 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0204 	bic.w	r2, r2, #4
 8001092:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	ea42 0103 	orr.w	r1, r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b087      	sub	sp, #28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010ea:	7cfb      	ldrb	r3, [r7, #19]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d003      	beq.n	80010f8 <HAL_CAN_ConfigFilter+0x26>
 80010f0:	7cfb      	ldrb	r3, [r7, #19]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	f040 80aa 	bne.w	800124c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	2201      	movs	r2, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d123      	bne.n	800117a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	401a      	ands	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001154:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3248      	adds	r2, #72	; 0x48
 800115a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800116e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001170:	6979      	ldr	r1, [r7, #20]
 8001172:	3348      	adds	r3, #72	; 0x48
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d122      	bne.n	80011c8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	431a      	orrs	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3248      	adds	r2, #72	; 0x48
 80011a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011be:	6979      	ldr	r1, [r7, #20]
 80011c0:	3348      	adds	r3, #72	; 0x48
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	440b      	add	r3, r1
 80011c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d109      	bne.n	80011e4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011e2:	e007      	b.n	80011f4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	431a      	orrs	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d109      	bne.n	8001210 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43db      	mvns	r3, r3
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800120e:	e007      	b.n	8001220 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	431a      	orrs	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d107      	bne.n	8001238 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	431a      	orrs	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800123e:	f023 0201 	bic.w	r2, r3, #1
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	e006      	b.n	800125a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
  }
}
 800125a:	4618      	mov	r0, r3
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d12e      	bne.n	80012d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2202      	movs	r2, #2
 800127c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001290:	f7ff fdf6 	bl	8000e80 <HAL_GetTick>
 8001294:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001296:	e012      	b.n	80012be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001298:	f7ff fdf2 	bl	8000e80 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b0a      	cmp	r3, #10
 80012a4:	d90b      	bls.n	80012be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2205      	movs	r2, #5
 80012b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e012      	b.n	80012e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e5      	bne.n	8001298 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e006      	b.n	80012e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
  }
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001300:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800130a:	7ffb      	ldrb	r3, [r7, #31]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d003      	beq.n	8001318 <HAL_CAN_AddTxMessage+0x2c>
 8001310:	7ffb      	ldrb	r3, [r7, #31]
 8001312:	2b02      	cmp	r3, #2
 8001314:	f040 80ad 	bne.w	8001472 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10a      	bne.n	8001338 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001328:	2b00      	cmp	r3, #0
 800132a:	d105      	bne.n	8001338 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8095 	beq.w	8001462 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	0e1b      	lsrs	r3, r3, #24
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001342:	2201      	movs	r2, #1
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10d      	bne.n	8001370 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800135e:	68f9      	ldr	r1, [r7, #12]
 8001360:	6809      	ldr	r1, [r1, #0]
 8001362:	431a      	orrs	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3318      	adds	r3, #24
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	440b      	add	r3, r1
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	e00f      	b.n	8001390 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800137a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001380:	68f9      	ldr	r1, [r7, #12]
 8001382:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001384:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3318      	adds	r3, #24
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	440b      	add	r3, r1
 800138e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6819      	ldr	r1, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3318      	adds	r3, #24
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	440b      	add	r3, r1
 80013a0:	3304      	adds	r3, #4
 80013a2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	7d1b      	ldrb	r3, [r3, #20]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d111      	bne.n	80013d0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3318      	adds	r3, #24
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4413      	add	r3, r2
 80013b8:	3304      	adds	r3, #4
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	6811      	ldr	r1, [r2, #0]
 80013c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3318      	adds	r3, #24
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	440b      	add	r3, r1
 80013cc:	3304      	adds	r3, #4
 80013ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3307      	adds	r3, #7
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	061a      	lsls	r2, r3, #24
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3306      	adds	r3, #6
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	041b      	lsls	r3, r3, #16
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3305      	adds	r3, #5
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	4313      	orrs	r3, r2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	3204      	adds	r2, #4
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	4610      	mov	r0, r2
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	6811      	ldr	r1, [r2, #0]
 80013f8:	ea43 0200 	orr.w	r2, r3, r0
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	440b      	add	r3, r1
 8001402:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001406:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3303      	adds	r3, #3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	061a      	lsls	r2, r3, #24
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3302      	adds	r3, #2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3301      	adds	r3, #1
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	4313      	orrs	r3, r2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	4610      	mov	r0, r2
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	6811      	ldr	r1, [r2, #0]
 800142e:	ea43 0200 	orr.w	r2, r3, r0
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	440b      	add	r3, r1
 8001438:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800143c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3318      	adds	r3, #24
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4413      	add	r3, r2
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	6811      	ldr	r1, [r2, #0]
 8001450:	f043 0201 	orr.w	r2, r3, #1
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3318      	adds	r3, #24
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	440b      	add	r3, r1
 800145c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e00e      	b.n	8001480 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001466:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e006      	b.n	8001480 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
  }
}
 8001480:	4618      	mov	r0, r3
 8001482:	3724      	adds	r7, #36	; 0x24
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800148a:	b480      	push	{r7}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80014a0:	7afb      	ldrb	r3, [r7, #11]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d002      	beq.n	80014ac <HAL_CAN_IsTxMessagePending+0x22>
 80014a6:	7afb      	ldrb	r3, [r7, #11]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d10b      	bne.n	80014c4 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	069b      	lsls	r3, r3, #26
 80014b6:	401a      	ands	r2, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	069b      	lsls	r3, r3, #26
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80014c0:	2301      	movs	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80014c4:	68fb      	ldr	r3, [r7, #12]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d003      	beq.n	80014f4 <HAL_CAN_GetRxMessage+0x24>
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	f040 8103 	bne.w	80016fa <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10e      	bne.n	8001518 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d116      	bne.n	8001536 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0f7      	b.n	8001708 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d107      	bne.n	8001536 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0e8      	b.n	8001708 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	331b      	adds	r3, #27
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0204 	and.w	r2, r3, #4
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10c      	bne.n	800156e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	331b      	adds	r3, #27
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	4413      	add	r3, r2
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0d5b      	lsrs	r3, r3, #21
 8001564:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e00b      	b.n	8001586 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	331b      	adds	r3, #27
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	08db      	lsrs	r3, r3, #3
 800157e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	331b      	adds	r3, #27
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	4413      	add	r3, r2
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0202 	and.w	r2, r3, #2
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	331b      	adds	r3, #27
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	4413      	add	r3, r2
 80015a8:	3304      	adds	r3, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2208      	movs	r2, #8
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	e00b      	b.n	80015d4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	331b      	adds	r3, #27
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	4413      	add	r3, r2
 80015c8:	3304      	adds	r3, #4
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 020f 	and.w	r2, r3, #15
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	331b      	adds	r3, #27
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	4413      	add	r3, r2
 80015e0:	3304      	adds	r3, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	331b      	adds	r3, #27
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	4413      	add	r3, r2
 80015f8:	3304      	adds	r3, #4
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0c1b      	lsrs	r3, r3, #16
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	4413      	add	r3, r2
 800160e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	0a1a      	lsrs	r2, r3, #8
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4413      	add	r3, r2
 800163e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0c1a      	lsrs	r2, r3, #16
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3302      	adds	r3, #2
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	4413      	add	r3, r2
 8001658:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0e1a      	lsrs	r2, r3, #24
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	3303      	adds	r3, #3
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4413      	add	r3, r2
 8001672:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	3304      	adds	r3, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	4413      	add	r3, r2
 800168a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0a1a      	lsrs	r2, r3, #8
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	3305      	adds	r3, #5
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0c1a      	lsrs	r2, r3, #16
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	3306      	adds	r3, #6
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	4413      	add	r3, r2
 80016be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0e1a      	lsrs	r2, r3, #24
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	3307      	adds	r3, #7
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d108      	bne.n	80016e6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0220 	orr.w	r2, r2, #32
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	e007      	b.n	80016f6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0220 	orr.w	r2, r2, #32
 80016f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e006      	b.n	8001708 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
  }
}
 8001708:	4618      	mov	r0, r3
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001722:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d002      	beq.n	8001730 <HAL_CAN_ActivateNotification+0x1e>
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d109      	bne.n	8001744 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6959      	ldr	r1, [r3, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	e006      	b.n	8001752 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
  }
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d07c      	beq.n	800189c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d023      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2201      	movs	r2, #1
 80017b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f983 	bl	8001aca <HAL_CAN_TxMailbox0CompleteCallback>
 80017c4:	e016      	b.n	80017f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
 80017d8:	e00c      	b.n	80017f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
 80017ec:	e002      	b.n	80017f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f986 	bl	8001b00 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d024      	beq.n	8001848 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001806:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f962 	bl	8001adc <HAL_CAN_TxMailbox1CompleteCallback>
 8001818:	e016      	b.n	8001848 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	e00c      	b.n	8001848 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
 8001840:	e002      	b.n	8001848 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f965 	bl	8001b12 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d024      	beq.n	800189c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800185a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f941 	bl	8001aee <HAL_CAN_TxMailbox2CompleteCallback>
 800186c:	e016      	b.n	800189c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
 8001880:	e00c      	b.n	800189c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	e002      	b.n	800189c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f944 	bl	8001b24 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2210      	movs	r2, #16
 80018be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2208      	movs	r2, #8
 80018da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f92a 	bl	8001b36 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe fed0 	bl	80006a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00c      	beq.n	8001924 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2210      	movs	r2, #16
 8001922:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2208      	movs	r2, #8
 800193e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f90a 	bl	8001b5a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	d009      	beq.n	8001964 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f8f2 	bl	8001b48 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2210      	movs	r2, #16
 800197e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f8f3 	bl	8001b6c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00b      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2208      	movs	r2, #8
 80019a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f8eb 	bl	8001b7e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d07b      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d072      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d043      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d03e      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a2a:	2b60      	cmp	r3, #96	; 0x60
 8001a2c:	d02b      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x32a>
 8001a2e:	2b60      	cmp	r3, #96	; 0x60
 8001a30:	d82e      	bhi.n	8001a90 <HAL_CAN_IRQHandler+0x334>
 8001a32:	2b50      	cmp	r3, #80	; 0x50
 8001a34:	d022      	beq.n	8001a7c <HAL_CAN_IRQHandler+0x320>
 8001a36:	2b50      	cmp	r3, #80	; 0x50
 8001a38:	d82a      	bhi.n	8001a90 <HAL_CAN_IRQHandler+0x334>
 8001a3a:	2b40      	cmp	r3, #64	; 0x40
 8001a3c:	d019      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x316>
 8001a3e:	2b40      	cmp	r3, #64	; 0x40
 8001a40:	d826      	bhi.n	8001a90 <HAL_CAN_IRQHandler+0x334>
 8001a42:	2b30      	cmp	r3, #48	; 0x30
 8001a44:	d010      	beq.n	8001a68 <HAL_CAN_IRQHandler+0x30c>
 8001a46:	2b30      	cmp	r3, #48	; 0x30
 8001a48:	d822      	bhi.n	8001a90 <HAL_CAN_IRQHandler+0x334>
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d002      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x2f8>
 8001a4e:	2b20      	cmp	r3, #32
 8001a50:	d005      	beq.n	8001a5e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a52:	e01d      	b.n	8001a90 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	f043 0308 	orr.w	r3, r3, #8
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a5c:	e019      	b.n	8001a92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f043 0310 	orr.w	r3, r3, #16
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a66:	e014      	b.n	8001a92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	f043 0320 	orr.w	r3, r3, #32
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a70:	e00f      	b.n	8001a92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a7a:	e00a      	b.n	8001a92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a84:	e005      	b.n	8001a92 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a8e:	e000      	b.n	8001a92 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a90:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001aa0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f867 	bl	8001b90 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
	...

08001ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	60d3      	str	r3, [r2, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f003 0307 	and.w	r3, r3, #7
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db0b      	blt.n	8001c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	4906      	ldr	r1, [pc, #24]	; (8001c3c <__NVIC_EnableIRQ+0x34>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	2001      	movs	r0, #1
 8001c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	; (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d08:	d301      	bcc.n	8001d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00f      	b.n	8001d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <SysTick_Config+0x40>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d16:	210f      	movs	r1, #15
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f7ff ff90 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <SysTick_Config+0x40>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SysTick_Config+0x40>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000e010 	.word	0xe000e010

08001d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff2d 	bl	8001ba4 <__NVIC_SetPriorityGrouping>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d64:	f7ff ff42 	bl	8001bec <__NVIC_GetPriorityGrouping>
 8001d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	6978      	ldr	r0, [r7, #20]
 8001d70:	f7ff ff90 	bl	8001c94 <NVIC_EncodePriority>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff5f 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff35 	bl	8001c08 <__NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffa2 	bl	8001cf8 <SysTick_Config>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b08b      	sub	sp, #44	; 0x2c
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd2:	e169      	b.n	80020a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f040 8158 	bne.w	80020a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4a9a      	ldr	r2, [pc, #616]	; (8002060 <HAL_GPIO_Init+0x2a0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d05e      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
 8001dfc:	4a98      	ldr	r2, [pc, #608]	; (8002060 <HAL_GPIO_Init+0x2a0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d875      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e02:	4a98      	ldr	r2, [pc, #608]	; (8002064 <HAL_GPIO_Init+0x2a4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d058      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
 8001e08:	4a96      	ldr	r2, [pc, #600]	; (8002064 <HAL_GPIO_Init+0x2a4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d86f      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e0e:	4a96      	ldr	r2, [pc, #600]	; (8002068 <HAL_GPIO_Init+0x2a8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d052      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
 8001e14:	4a94      	ldr	r2, [pc, #592]	; (8002068 <HAL_GPIO_Init+0x2a8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d869      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e1a:	4a94      	ldr	r2, [pc, #592]	; (800206c <HAL_GPIO_Init+0x2ac>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d04c      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
 8001e20:	4a92      	ldr	r2, [pc, #584]	; (800206c <HAL_GPIO_Init+0x2ac>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d863      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e26:	4a92      	ldr	r2, [pc, #584]	; (8002070 <HAL_GPIO_Init+0x2b0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d046      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
 8001e2c:	4a90      	ldr	r2, [pc, #576]	; (8002070 <HAL_GPIO_Init+0x2b0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d85d      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e32:	2b12      	cmp	r3, #18
 8001e34:	d82a      	bhi.n	8001e8c <HAL_GPIO_Init+0xcc>
 8001e36:	2b12      	cmp	r3, #18
 8001e38:	d859      	bhi.n	8001eee <HAL_GPIO_Init+0x12e>
 8001e3a:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <HAL_GPIO_Init+0x80>)
 8001e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e40:	08001ebb 	.word	0x08001ebb
 8001e44:	08001e95 	.word	0x08001e95
 8001e48:	08001ea7 	.word	0x08001ea7
 8001e4c:	08001ee9 	.word	0x08001ee9
 8001e50:	08001eef 	.word	0x08001eef
 8001e54:	08001eef 	.word	0x08001eef
 8001e58:	08001eef 	.word	0x08001eef
 8001e5c:	08001eef 	.word	0x08001eef
 8001e60:	08001eef 	.word	0x08001eef
 8001e64:	08001eef 	.word	0x08001eef
 8001e68:	08001eef 	.word	0x08001eef
 8001e6c:	08001eef 	.word	0x08001eef
 8001e70:	08001eef 	.word	0x08001eef
 8001e74:	08001eef 	.word	0x08001eef
 8001e78:	08001eef 	.word	0x08001eef
 8001e7c:	08001eef 	.word	0x08001eef
 8001e80:	08001eef 	.word	0x08001eef
 8001e84:	08001e9d 	.word	0x08001e9d
 8001e88:	08001eb1 	.word	0x08001eb1
 8001e8c:	4a79      	ldr	r2, [pc, #484]	; (8002074 <HAL_GPIO_Init+0x2b4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e92:	e02c      	b.n	8001eee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e029      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	e024      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	3308      	adds	r3, #8
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e01f      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	330c      	adds	r3, #12
 8001eb6:	623b      	str	r3, [r7, #32]
          break;
 8001eb8:	e01a      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	623b      	str	r3, [r7, #32]
          break;
 8001ec6:	e013      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	611a      	str	r2, [r3, #16]
          break;
 8001eda:	e009      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001edc:	2308      	movs	r3, #8
 8001ede:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	615a      	str	r2, [r3, #20]
          break;
 8001ee6:	e003      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
          break;
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x130>
          break;
 8001eee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d801      	bhi.n	8001efa <HAL_GPIO_Init+0x13a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	e001      	b.n	8001efe <HAL_GPIO_Init+0x13e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2bff      	cmp	r3, #255	; 0xff
 8001f04:	d802      	bhi.n	8001f0c <HAL_GPIO_Init+0x14c>
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	e002      	b.n	8001f12 <HAL_GPIO_Init+0x152>
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	3b08      	subs	r3, #8
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	210f      	movs	r1, #15
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	401a      	ands	r2, r3
 8001f24:	6a39      	ldr	r1, [r7, #32]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80b1 	beq.w	80020a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f40:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <HAL_GPIO_Init+0x2b8>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	4a4c      	ldr	r2, [pc, #304]	; (8002078 <HAL_GPIO_Init+0x2b8>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6193      	str	r3, [r2, #24]
 8001f4c:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <HAL_GPIO_Init+0x2b8>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f58:	4a48      	ldr	r2, [pc, #288]	; (800207c <HAL_GPIO_Init+0x2bc>)
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	220f      	movs	r2, #15
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a40      	ldr	r2, [pc, #256]	; (8002080 <HAL_GPIO_Init+0x2c0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d013      	beq.n	8001fac <HAL_GPIO_Init+0x1ec>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3f      	ldr	r2, [pc, #252]	; (8002084 <HAL_GPIO_Init+0x2c4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_GPIO_Init+0x1e8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3e      	ldr	r2, [pc, #248]	; (8002088 <HAL_GPIO_Init+0x2c8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d007      	beq.n	8001fa4 <HAL_GPIO_Init+0x1e4>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3d      	ldr	r2, [pc, #244]	; (800208c <HAL_GPIO_Init+0x2cc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_GPIO_Init+0x1e0>
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e006      	b.n	8001fae <HAL_GPIO_Init+0x1ee>
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	e004      	b.n	8001fae <HAL_GPIO_Init+0x1ee>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_Init+0x1ee>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_GPIO_Init+0x1ee>
 8001fac:	2300      	movs	r3, #0
 8001fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb0:	f002 0203 	and.w	r2, r2, #3
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	4093      	lsls	r3, r2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fbe:	492f      	ldr	r1, [pc, #188]	; (800207c <HAL_GPIO_Init+0x2bc>)
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	492c      	ldr	r1, [pc, #176]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	608b      	str	r3, [r1, #8]
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4928      	ldr	r1, [pc, #160]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	4922      	ldr	r1, [pc, #136]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	43db      	mvns	r3, r3
 8002016:	491e      	ldr	r1, [pc, #120]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8002018:	4013      	ands	r3, r2
 800201a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4918      	ldr	r1, [pc, #96]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002036:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	4914      	ldr	r1, [pc, #80]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8002040:	4013      	ands	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d021      	beq.n	8002094 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	490e      	ldr	r1, [pc, #56]	; (8002090 <HAL_GPIO_Init+0x2d0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]
 800205c:	e021      	b.n	80020a2 <HAL_GPIO_Init+0x2e2>
 800205e:	bf00      	nop
 8002060:	10320000 	.word	0x10320000
 8002064:	10310000 	.word	0x10310000
 8002068:	10220000 	.word	0x10220000
 800206c:	10210000 	.word	0x10210000
 8002070:	10120000 	.word	0x10120000
 8002074:	10110000 	.word	0x10110000
 8002078:	40021000 	.word	0x40021000
 800207c:	40010000 	.word	0x40010000
 8002080:	40010800 	.word	0x40010800
 8002084:	40010c00 	.word	0x40010c00
 8002088:	40011000 	.word	0x40011000
 800208c:	40011400 	.word	0x40011400
 8002090:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_GPIO_Init+0x304>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	43db      	mvns	r3, r3
 800209c:	4909      	ldr	r1, [pc, #36]	; (80020c4 <HAL_GPIO_Init+0x304>)
 800209e:	4013      	ands	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	3301      	adds	r3, #1
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f47f ae8e 	bne.w	8001dd4 <HAL_GPIO_Init+0x14>
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	372c      	adds	r7, #44	; 0x2c
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e272      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8087 	beq.w	80021f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e8:	4b92      	ldr	r3, [pc, #584]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d00c      	beq.n	800210e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f4:	4b8f      	ldr	r3, [pc, #572]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d112      	bne.n	8002126 <HAL_RCC_OscConfig+0x5e>
 8002100:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210c:	d10b      	bne.n	8002126 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210e:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d06c      	beq.n	80021f4 <HAL_RCC_OscConfig+0x12c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d168      	bne.n	80021f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e24c      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x76>
 8002130:	4b80      	ldr	r3, [pc, #512]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a7f      	ldr	r2, [pc, #508]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	e02e      	b.n	800219c <HAL_RCC_OscConfig+0xd4>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x98>
 8002146:	4b7b      	ldr	r3, [pc, #492]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a7a      	ldr	r2, [pc, #488]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800214c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b78      	ldr	r3, [pc, #480]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a77      	ldr	r2, [pc, #476]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e01d      	b.n	800219c <HAL_RCC_OscConfig+0xd4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0xbc>
 800216a:	4b72      	ldr	r3, [pc, #456]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a71      	ldr	r2, [pc, #452]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6e      	ldr	r2, [pc, #440]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0xd4>
 8002184:	4b6b      	ldr	r3, [pc, #428]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a6a      	ldr	r2, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800218a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b68      	ldr	r3, [pc, #416]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a67      	ldr	r2, [pc, #412]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe fe6c 	bl	8000e80 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7fe fe68 	bl	8000e80 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e200      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b5d      	ldr	r3, [pc, #372]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0xe4>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fe58 	bl	8000e80 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7fe fe54 	bl	8000e80 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e1ec      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	4b53      	ldr	r3, [pc, #332]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x10c>
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d063      	beq.n	80022ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002202:	4b4c      	ldr	r3, [pc, #304]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800220e:	4b49      	ldr	r3, [pc, #292]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b08      	cmp	r3, #8
 8002218:	d11c      	bne.n	8002254 <HAL_RCC_OscConfig+0x18c>
 800221a:	4b46      	ldr	r3, [pc, #280]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d116      	bne.n	8002254 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_RCC_OscConfig+0x176>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e1c0      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4939      	ldr	r1, [pc, #228]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	e03a      	b.n	80022ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225c:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCC_OscConfig+0x270>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe fe0d 	bl	8000e80 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226a:	f7fe fe09 	bl	8000e80 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e1a1      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4927      	ldr	r1, [pc, #156]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
 800229c:	e015      	b.n	80022ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <HAL_RCC_OscConfig+0x270>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fdec 	bl	8000e80 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ac:	f7fe fde8 	bl	8000e80 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e180      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03a      	beq.n	800234c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d019      	beq.n	8002312 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_RCC_OscConfig+0x274>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e4:	f7fe fdcc 	bl	8000e80 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ec:	f7fe fdc8 	bl	8000e80 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e160      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800230a:	2001      	movs	r0, #1
 800230c:	f000 face 	bl	80028ac <RCC_Delay>
 8002310:	e01c      	b.n	800234c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RCC_OscConfig+0x274>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002318:	f7fe fdb2 	bl	8000e80 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231e:	e00f      	b.n	8002340 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002320:	f7fe fdae 	bl	8000e80 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d908      	bls.n	8002340 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e146      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	42420000 	.word	0x42420000
 800233c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002340:	4b92      	ldr	r3, [pc, #584]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e9      	bne.n	8002320 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a6 	beq.w	80024a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b8b      	ldr	r3, [pc, #556]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b88      	ldr	r3, [pc, #544]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4a87      	ldr	r2, [pc, #540]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	61d3      	str	r3, [r2, #28]
 8002376:	4b85      	ldr	r3, [pc, #532]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b82      	ldr	r3, [pc, #520]	; (8002590 <HAL_RCC_OscConfig+0x4c8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d118      	bne.n	80023c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002392:	4b7f      	ldr	r3, [pc, #508]	; (8002590 <HAL_RCC_OscConfig+0x4c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a7e      	ldr	r2, [pc, #504]	; (8002590 <HAL_RCC_OscConfig+0x4c8>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239e:	f7fe fd6f 	bl	8000e80 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a6:	f7fe fd6b 	bl	8000e80 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b64      	cmp	r3, #100	; 0x64
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e103      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <HAL_RCC_OscConfig+0x4c8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x312>
 80023cc:	4b6f      	ldr	r3, [pc, #444]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a6e      	ldr	r2, [pc, #440]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	e02d      	b.n	8002436 <HAL_RCC_OscConfig+0x36e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x334>
 80023e2:	4b6a      	ldr	r3, [pc, #424]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a69      	ldr	r2, [pc, #420]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	4b67      	ldr	r3, [pc, #412]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a66      	ldr	r2, [pc, #408]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	6213      	str	r3, [r2, #32]
 80023fa:	e01c      	b.n	8002436 <HAL_RCC_OscConfig+0x36e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b05      	cmp	r3, #5
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0x356>
 8002404:	4b61      	ldr	r3, [pc, #388]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a60      	ldr	r2, [pc, #384]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	4b5e      	ldr	r3, [pc, #376]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a5d      	ldr	r2, [pc, #372]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	e00b      	b.n	8002436 <HAL_RCC_OscConfig+0x36e>
 800241e:	4b5b      	ldr	r3, [pc, #364]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a5a      	ldr	r2, [pc, #360]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	4b58      	ldr	r3, [pc, #352]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a57      	ldr	r2, [pc, #348]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d015      	beq.n	800246a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7fe fd1f 	bl	8000e80 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7fe fd1b 	bl	8000e80 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	; 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0b1      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ee      	beq.n	8002446 <HAL_RCC_OscConfig+0x37e>
 8002468:	e014      	b.n	8002494 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7fe fd09 	bl	8000e80 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe fd05 	bl	8000e80 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e09b      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	4b40      	ldr	r3, [pc, #256]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ee      	bne.n	8002472 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b3c      	ldr	r3, [pc, #240]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a3b      	ldr	r2, [pc, #236]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8087 	beq.w	80025be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b0:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d061      	beq.n	8002580 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d146      	bne.n	8002552 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c4:	4b33      	ldr	r3, [pc, #204]	; (8002594 <HAL_RCC_OscConfig+0x4cc>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe fcd9 	bl	8000e80 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe fcd5 	bl	8000e80 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e06d      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d108      	bne.n	800250c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024fa:	4b24      	ldr	r3, [pc, #144]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4921      	ldr	r1, [pc, #132]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a19      	ldr	r1, [r3, #32]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	430b      	orrs	r3, r1
 800251e:	491b      	ldr	r1, [pc, #108]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe fca9 	bl	8000e80 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002532:	f7fe fca5 	bl	8000e80 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e03d      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x46a>
 8002550:	e035      	b.n	80025be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <HAL_RCC_OscConfig+0x4cc>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe fc92 	bl	8000e80 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe fc8e 	bl	8000e80 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e026      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_RCC_OscConfig+0x4c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x498>
 800257e:	e01e      	b.n	80025be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d107      	bne.n	8002598 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e019      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
 8002594:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_OscConfig+0x500>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000

080025cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0d0      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b6a      	ldr	r3, [pc, #424]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d910      	bls.n	8002610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	4965      	ldr	r1, [pc, #404]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b63      	ldr	r3, [pc, #396]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0b8      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a58      	ldr	r2, [pc, #352]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002632:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002640:	4b53      	ldr	r3, [pc, #332]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800264a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264c:	4b50      	ldr	r3, [pc, #320]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	494d      	ldr	r1, [pc, #308]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d040      	beq.n	80026ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d115      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e07f      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e073      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e06b      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f023 0203 	bic.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4936      	ldr	r1, [pc, #216]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026bc:	f7fe fbe0 	bl	8000e80 <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7fe fbdc 	bl	8000e80 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e053      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 020c 	and.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1eb      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d210      	bcs.n	800271c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4922      	ldr	r1, [pc, #136]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e032      	b.n	8002782 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4916      	ldr	r1, [pc, #88]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	490e      	ldr	r1, [pc, #56]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275a:	f000 f821 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 800275e:	4602      	mov	r2, r0
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	490a      	ldr	r1, [pc, #40]	; (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 800276c:	5ccb      	ldrb	r3, [r1, r3]
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	4a09      	ldr	r2, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1cc>)
 8002774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1d0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fb3e 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40022000 	.word	0x40022000
 8002790:	40021000 	.word	0x40021000
 8002794:	08003e2c 	.word	0x08003e2c
 8002798:	20000000 	.word	0x20000000
 800279c:	20000004 	.word	0x20000004

080027a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_RCC_GetSysClockFreq+0x94>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x30>
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x36>
 80027ce:	e027      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_RCC_GetSysClockFreq+0x98>)
 80027d2:	613b      	str	r3, [r7, #16]
      break;
 80027d4:	e027      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	0c9b      	lsrs	r3, r3, #18
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	4a17      	ldr	r2, [pc, #92]	; (800283c <HAL_RCC_GetSysClockFreq+0x9c>)
 80027e0:	5cd3      	ldrb	r3, [r2, r3]
 80027e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d010      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_RCC_GetSysClockFreq+0x94>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0c5b      	lsrs	r3, r3, #17
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <HAL_RCC_GetSysClockFreq+0x98>)
 8002802:	fb03 f202 	mul.w	r2, r3, r2
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	e004      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a0c      	ldr	r2, [pc, #48]	; (8002844 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	613b      	str	r3, [r7, #16]
      break;
 800281e:	e002      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_GetSysClockFreq+0x98>)
 8002822:	613b      	str	r3, [r7, #16]
      break;
 8002824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002826:	693b      	ldr	r3, [r7, #16]
}
 8002828:	4618      	mov	r0, r3
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	007a1200 	.word	0x007a1200
 800283c:	08003e44 	.word	0x08003e44
 8002840:	08003e54 	.word	0x08003e54
 8002844:	003d0900 	.word	0x003d0900

08002848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800284c:	4b02      	ldr	r3, [pc, #8]	; (8002858 <HAL_RCC_GetHCLKFreq+0x10>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	20000000 	.word	0x20000000

0800285c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002860:	f7ff fff2 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4903      	ldr	r1, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	08003e3c 	.word	0x08003e3c

08002884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002888:	f7ff ffde 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	0adb      	lsrs	r3, r3, #11
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	4903      	ldr	r1, [pc, #12]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08003e3c 	.word	0x08003e3c

080028ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <RCC_Delay+0x34>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <RCC_Delay+0x38>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0a5b      	lsrs	r3, r3, #9
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028c8:	bf00      	nop
  }
  while (Delay --);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1e5a      	subs	r2, r3, #1
 80028ce:	60fa      	str	r2, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f9      	bne.n	80028c8 <RCC_Delay+0x1c>
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	20000000 	.word	0x20000000
 80028e4:	10624dd3 	.word	0x10624dd3

080028e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e042      	b.n	8002980 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe f962 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2224      	movs	r2, #36	; 0x24
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800292a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f971 	bl	8002c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d175      	bne.n	8002a94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_UART_Transmit+0x2c>
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e06e      	b.n	8002a96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2221      	movs	r2, #33	; 0x21
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029c6:	f7fe fa5b 	bl	8000e80 <HAL_GetTick>
 80029ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	88fa      	ldrh	r2, [r7, #6]
 80029d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e0:	d108      	bne.n	80029f4 <HAL_UART_Transmit+0x6c>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d104      	bne.n	80029f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	e003      	b.n	80029fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029fc:	e02e      	b.n	8002a5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2200      	movs	r2, #0
 8002a06:	2180      	movs	r1, #128	; 0x80
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f848 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e03a      	b.n	8002a96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	3302      	adds	r3, #2
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	e007      	b.n	8002a4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1cb      	bne.n	80029fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f814 	bl	8002a9e <UART_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e006      	b.n	8002a96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aae:	e03b      	b.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d037      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab8:	f7fe f9e2 	bl	8000e80 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	6a3a      	ldr	r2, [r7, #32]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d302      	bcc.n	8002ace <UART_WaitOnFlagUntilTimeout+0x30>
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e03a      	b.n	8002b48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d023      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b80      	cmp	r3, #128	; 0x80
 8002ae4:	d020      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d01d      	beq.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d116      	bne.n	8002b28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f81d 	bl	8002b50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e00f      	b.n	8002b48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d0b4      	beq.n	8002ab0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b095      	sub	sp, #84	; 0x54
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b62:	e853 3f00 	ldrex	r3, [r3]
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	330c      	adds	r3, #12
 8002b76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b78:	643a      	str	r2, [r7, #64]	; 0x40
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b80:	e841 2300 	strex	r3, r2, [r1]
 8002b84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e5      	bne.n	8002b58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3314      	adds	r3, #20
 8002b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	e853 3f00 	ldrex	r3, [r3]
 8002b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3314      	adds	r3, #20
 8002baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb4:	e841 2300 	strex	r3, r2, [r1]
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1e5      	bne.n	8002b8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d119      	bne.n	8002bfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	e853 3f00 	ldrex	r3, [r3]
 8002bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f023 0310 	bic.w	r3, r3, #16
 8002bde:	647b      	str	r3, [r7, #68]	; 0x44
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002be8:	61ba      	str	r2, [r7, #24]
 8002bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bec:	6979      	ldr	r1, [r7, #20]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	e841 2300 	strex	r3, r2, [r1]
 8002bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e5      	bne.n	8002bc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c0a:	bf00      	nop
 8002c0c:	3754      	adds	r7, #84	; 0x54
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c4e:	f023 030c 	bic.w	r3, r3, #12
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <UART_SetConfig+0x114>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d103      	bne.n	8002c84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c7c:	f7ff fe02 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	e002      	b.n	8002c8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c84:	f7ff fdea 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 8002c88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	009a      	lsls	r2, r3, #2
 8002c94:	441a      	add	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	4a22      	ldr	r2, [pc, #136]	; (8002d2c <UART_SetConfig+0x118>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	0119      	lsls	r1, r3, #4
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009a      	lsls	r2, r3, #2
 8002cb4:	441a      	add	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <UART_SetConfig+0x118>)
 8002cc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2064      	movs	r0, #100	; 0x64
 8002cca:	fb00 f303 	mul.w	r3, r0, r3
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	3332      	adds	r3, #50	; 0x32
 8002cd4:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <UART_SetConfig+0x118>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce0:	4419      	add	r1, r3
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	009a      	lsls	r2, r3, #2
 8002cec:	441a      	add	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <UART_SetConfig+0x118>)
 8002cfa:	fba3 0302 	umull	r0, r3, r3, r2
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	2064      	movs	r0, #100	; 0x64
 8002d02:	fb00 f303 	mul.w	r3, r0, r3
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	3332      	adds	r3, #50	; 0x32
 8002d0c:	4a07      	ldr	r2, [pc, #28]	; (8002d2c <UART_SetConfig+0x118>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	f003 020f 	and.w	r2, r3, #15
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	440a      	add	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	51eb851f 	.word	0x51eb851f

08002d30 <sniprintf>:
 8002d30:	b40c      	push	{r2, r3}
 8002d32:	b530      	push	{r4, r5, lr}
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <sniprintf+0x64>)
 8002d36:	1e0c      	subs	r4, r1, #0
 8002d38:	681d      	ldr	r5, [r3, #0]
 8002d3a:	b09d      	sub	sp, #116	; 0x74
 8002d3c:	da08      	bge.n	8002d50 <sniprintf+0x20>
 8002d3e:	238b      	movs	r3, #139	; 0x8b
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	602b      	str	r3, [r5, #0]
 8002d46:	b01d      	add	sp, #116	; 0x74
 8002d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d4c:	b002      	add	sp, #8
 8002d4e:	4770      	bx	lr
 8002d50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002d54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002d58:	bf0c      	ite	eq
 8002d5a:	4623      	moveq	r3, r4
 8002d5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002d60:	9304      	str	r3, [sp, #16]
 8002d62:	9307      	str	r3, [sp, #28]
 8002d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d68:	9002      	str	r0, [sp, #8]
 8002d6a:	9006      	str	r0, [sp, #24]
 8002d6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002d70:	4628      	mov	r0, r5
 8002d72:	ab21      	add	r3, sp, #132	; 0x84
 8002d74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002d76:	a902      	add	r1, sp, #8
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	f000 f99f 	bl	80030bc <_svfiprintf_r>
 8002d7e:	1c43      	adds	r3, r0, #1
 8002d80:	bfbc      	itt	lt
 8002d82:	238b      	movlt	r3, #139	; 0x8b
 8002d84:	602b      	strlt	r3, [r5, #0]
 8002d86:	2c00      	cmp	r4, #0
 8002d88:	d0dd      	beq.n	8002d46 <sniprintf+0x16>
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	9b02      	ldr	r3, [sp, #8]
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e7d9      	b.n	8002d46 <sniprintf+0x16>
 8002d92:	bf00      	nop
 8002d94:	20000058 	.word	0x20000058

08002d98 <memcmp>:
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	3901      	subs	r1, #1
 8002d9c:	4402      	add	r2, r0
 8002d9e:	4290      	cmp	r0, r2
 8002da0:	d101      	bne.n	8002da6 <memcmp+0xe>
 8002da2:	2000      	movs	r0, #0
 8002da4:	e005      	b.n	8002db2 <memcmp+0x1a>
 8002da6:	7803      	ldrb	r3, [r0, #0]
 8002da8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002dac:	42a3      	cmp	r3, r4
 8002dae:	d001      	beq.n	8002db4 <memcmp+0x1c>
 8002db0:	1b18      	subs	r0, r3, r4
 8002db2:	bd10      	pop	{r4, pc}
 8002db4:	3001      	adds	r0, #1
 8002db6:	e7f2      	b.n	8002d9e <memcmp+0x6>

08002db8 <memset>:
 8002db8:	4603      	mov	r3, r0
 8002dba:	4402      	add	r2, r0
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <memset+0xa>
 8002dc0:	4770      	bx	lr
 8002dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dc6:	e7f9      	b.n	8002dbc <memset+0x4>

08002dc8 <__errno>:
 8002dc8:	4b01      	ldr	r3, [pc, #4]	; (8002dd0 <__errno+0x8>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000058 	.word	0x20000058

08002dd4 <__libc_init_array>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	4d0c      	ldr	r5, [pc, #48]	; (8002e0c <__libc_init_array+0x38>)
 8002dda:	4c0d      	ldr	r4, [pc, #52]	; (8002e10 <__libc_init_array+0x3c>)
 8002ddc:	1b64      	subs	r4, r4, r5
 8002dde:	10a4      	asrs	r4, r4, #2
 8002de0:	42a6      	cmp	r6, r4
 8002de2:	d109      	bne.n	8002df8 <__libc_init_array+0x24>
 8002de4:	f000 fc7a 	bl	80036dc <_init>
 8002de8:	2600      	movs	r6, #0
 8002dea:	4d0a      	ldr	r5, [pc, #40]	; (8002e14 <__libc_init_array+0x40>)
 8002dec:	4c0a      	ldr	r4, [pc, #40]	; (8002e18 <__libc_init_array+0x44>)
 8002dee:	1b64      	subs	r4, r4, r5
 8002df0:	10a4      	asrs	r4, r4, #2
 8002df2:	42a6      	cmp	r6, r4
 8002df4:	d105      	bne.n	8002e02 <__libc_init_array+0x2e>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfc:	4798      	blx	r3
 8002dfe:	3601      	adds	r6, #1
 8002e00:	e7ee      	b.n	8002de0 <__libc_init_array+0xc>
 8002e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e06:	4798      	blx	r3
 8002e08:	3601      	adds	r6, #1
 8002e0a:	e7f2      	b.n	8002df2 <__libc_init_array+0x1e>
 8002e0c:	08003e8c 	.word	0x08003e8c
 8002e10:	08003e8c 	.word	0x08003e8c
 8002e14:	08003e8c 	.word	0x08003e8c
 8002e18:	08003e90 	.word	0x08003e90

08002e1c <__retarget_lock_acquire_recursive>:
 8002e1c:	4770      	bx	lr

08002e1e <__retarget_lock_release_recursive>:
 8002e1e:	4770      	bx	lr

08002e20 <_free_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	4605      	mov	r5, r0
 8002e24:	2900      	cmp	r1, #0
 8002e26:	d040      	beq.n	8002eaa <_free_r+0x8a>
 8002e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e2c:	1f0c      	subs	r4, r1, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bfb8      	it	lt
 8002e32:	18e4      	addlt	r4, r4, r3
 8002e34:	f000 f8dc 	bl	8002ff0 <__malloc_lock>
 8002e38:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <_free_r+0x8c>)
 8002e3a:	6813      	ldr	r3, [r2, #0]
 8002e3c:	b933      	cbnz	r3, 8002e4c <_free_r+0x2c>
 8002e3e:	6063      	str	r3, [r4, #4]
 8002e40:	6014      	str	r4, [r2, #0]
 8002e42:	4628      	mov	r0, r5
 8002e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e48:	f000 b8d8 	b.w	8002ffc <__malloc_unlock>
 8002e4c:	42a3      	cmp	r3, r4
 8002e4e:	d908      	bls.n	8002e62 <_free_r+0x42>
 8002e50:	6820      	ldr	r0, [r4, #0]
 8002e52:	1821      	adds	r1, r4, r0
 8002e54:	428b      	cmp	r3, r1
 8002e56:	bf01      	itttt	eq
 8002e58:	6819      	ldreq	r1, [r3, #0]
 8002e5a:	685b      	ldreq	r3, [r3, #4]
 8002e5c:	1809      	addeq	r1, r1, r0
 8002e5e:	6021      	streq	r1, [r4, #0]
 8002e60:	e7ed      	b.n	8002e3e <_free_r+0x1e>
 8002e62:	461a      	mov	r2, r3
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	b10b      	cbz	r3, 8002e6c <_free_r+0x4c>
 8002e68:	42a3      	cmp	r3, r4
 8002e6a:	d9fa      	bls.n	8002e62 <_free_r+0x42>
 8002e6c:	6811      	ldr	r1, [r2, #0]
 8002e6e:	1850      	adds	r0, r2, r1
 8002e70:	42a0      	cmp	r0, r4
 8002e72:	d10b      	bne.n	8002e8c <_free_r+0x6c>
 8002e74:	6820      	ldr	r0, [r4, #0]
 8002e76:	4401      	add	r1, r0
 8002e78:	1850      	adds	r0, r2, r1
 8002e7a:	4283      	cmp	r3, r0
 8002e7c:	6011      	str	r1, [r2, #0]
 8002e7e:	d1e0      	bne.n	8002e42 <_free_r+0x22>
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4408      	add	r0, r1
 8002e86:	6010      	str	r0, [r2, #0]
 8002e88:	6053      	str	r3, [r2, #4]
 8002e8a:	e7da      	b.n	8002e42 <_free_r+0x22>
 8002e8c:	d902      	bls.n	8002e94 <_free_r+0x74>
 8002e8e:	230c      	movs	r3, #12
 8002e90:	602b      	str	r3, [r5, #0]
 8002e92:	e7d6      	b.n	8002e42 <_free_r+0x22>
 8002e94:	6820      	ldr	r0, [r4, #0]
 8002e96:	1821      	adds	r1, r4, r0
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	bf01      	itttt	eq
 8002e9c:	6819      	ldreq	r1, [r3, #0]
 8002e9e:	685b      	ldreq	r3, [r3, #4]
 8002ea0:	1809      	addeq	r1, r1, r0
 8002ea2:	6021      	streq	r1, [r4, #0]
 8002ea4:	6063      	str	r3, [r4, #4]
 8002ea6:	6054      	str	r4, [r2, #4]
 8002ea8:	e7cb      	b.n	8002e42 <_free_r+0x22>
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	20000244 	.word	0x20000244

08002eb0 <sbrk_aligned>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	4e0e      	ldr	r6, [pc, #56]	; (8002eec <sbrk_aligned+0x3c>)
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	6831      	ldr	r1, [r6, #0]
 8002eb8:	4605      	mov	r5, r0
 8002eba:	b911      	cbnz	r1, 8002ec2 <sbrk_aligned+0x12>
 8002ebc:	f000 fbaa 	bl	8003614 <_sbrk_r>
 8002ec0:	6030      	str	r0, [r6, #0]
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f000 fba5 	bl	8003614 <_sbrk_r>
 8002eca:	1c43      	adds	r3, r0, #1
 8002ecc:	d00a      	beq.n	8002ee4 <sbrk_aligned+0x34>
 8002ece:	1cc4      	adds	r4, r0, #3
 8002ed0:	f024 0403 	bic.w	r4, r4, #3
 8002ed4:	42a0      	cmp	r0, r4
 8002ed6:	d007      	beq.n	8002ee8 <sbrk_aligned+0x38>
 8002ed8:	1a21      	subs	r1, r4, r0
 8002eda:	4628      	mov	r0, r5
 8002edc:	f000 fb9a 	bl	8003614 <_sbrk_r>
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	d101      	bne.n	8002ee8 <sbrk_aligned+0x38>
 8002ee4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ee8:	4620      	mov	r0, r4
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
 8002eec:	20000248 	.word	0x20000248

08002ef0 <_malloc_r>:
 8002ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef4:	1ccd      	adds	r5, r1, #3
 8002ef6:	f025 0503 	bic.w	r5, r5, #3
 8002efa:	3508      	adds	r5, #8
 8002efc:	2d0c      	cmp	r5, #12
 8002efe:	bf38      	it	cc
 8002f00:	250c      	movcc	r5, #12
 8002f02:	2d00      	cmp	r5, #0
 8002f04:	4607      	mov	r7, r0
 8002f06:	db01      	blt.n	8002f0c <_malloc_r+0x1c>
 8002f08:	42a9      	cmp	r1, r5
 8002f0a:	d905      	bls.n	8002f18 <_malloc_r+0x28>
 8002f0c:	230c      	movs	r3, #12
 8002f0e:	2600      	movs	r6, #0
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	4630      	mov	r0, r6
 8002f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002fec <_malloc_r+0xfc>
 8002f1c:	f000 f868 	bl	8002ff0 <__malloc_lock>
 8002f20:	f8d8 3000 	ldr.w	r3, [r8]
 8002f24:	461c      	mov	r4, r3
 8002f26:	bb5c      	cbnz	r4, 8002f80 <_malloc_r+0x90>
 8002f28:	4629      	mov	r1, r5
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	f7ff ffc0 	bl	8002eb0 <sbrk_aligned>
 8002f30:	1c43      	adds	r3, r0, #1
 8002f32:	4604      	mov	r4, r0
 8002f34:	d155      	bne.n	8002fe2 <_malloc_r+0xf2>
 8002f36:	f8d8 4000 	ldr.w	r4, [r8]
 8002f3a:	4626      	mov	r6, r4
 8002f3c:	2e00      	cmp	r6, #0
 8002f3e:	d145      	bne.n	8002fcc <_malloc_r+0xdc>
 8002f40:	2c00      	cmp	r4, #0
 8002f42:	d048      	beq.n	8002fd6 <_malloc_r+0xe6>
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	4631      	mov	r1, r6
 8002f48:	4638      	mov	r0, r7
 8002f4a:	eb04 0903 	add.w	r9, r4, r3
 8002f4e:	f000 fb61 	bl	8003614 <_sbrk_r>
 8002f52:	4581      	cmp	r9, r0
 8002f54:	d13f      	bne.n	8002fd6 <_malloc_r+0xe6>
 8002f56:	6821      	ldr	r1, [r4, #0]
 8002f58:	4638      	mov	r0, r7
 8002f5a:	1a6d      	subs	r5, r5, r1
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	f7ff ffa7 	bl	8002eb0 <sbrk_aligned>
 8002f62:	3001      	adds	r0, #1
 8002f64:	d037      	beq.n	8002fd6 <_malloc_r+0xe6>
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	442b      	add	r3, r5
 8002f6a:	6023      	str	r3, [r4, #0]
 8002f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d038      	beq.n	8002fe6 <_malloc_r+0xf6>
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	42a2      	cmp	r2, r4
 8002f78:	d12b      	bne.n	8002fd2 <_malloc_r+0xe2>
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	e00f      	b.n	8002fa0 <_malloc_r+0xb0>
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	1b52      	subs	r2, r2, r5
 8002f84:	d41f      	bmi.n	8002fc6 <_malloc_r+0xd6>
 8002f86:	2a0b      	cmp	r2, #11
 8002f88:	d917      	bls.n	8002fba <_malloc_r+0xca>
 8002f8a:	1961      	adds	r1, r4, r5
 8002f8c:	42a3      	cmp	r3, r4
 8002f8e:	6025      	str	r5, [r4, #0]
 8002f90:	bf18      	it	ne
 8002f92:	6059      	strne	r1, [r3, #4]
 8002f94:	6863      	ldr	r3, [r4, #4]
 8002f96:	bf08      	it	eq
 8002f98:	f8c8 1000 	streq.w	r1, [r8]
 8002f9c:	5162      	str	r2, [r4, r5]
 8002f9e:	604b      	str	r3, [r1, #4]
 8002fa0:	4638      	mov	r0, r7
 8002fa2:	f104 060b 	add.w	r6, r4, #11
 8002fa6:	f000 f829 	bl	8002ffc <__malloc_unlock>
 8002faa:	f026 0607 	bic.w	r6, r6, #7
 8002fae:	1d23      	adds	r3, r4, #4
 8002fb0:	1af2      	subs	r2, r6, r3
 8002fb2:	d0ae      	beq.n	8002f12 <_malloc_r+0x22>
 8002fb4:	1b9b      	subs	r3, r3, r6
 8002fb6:	50a3      	str	r3, [r4, r2]
 8002fb8:	e7ab      	b.n	8002f12 <_malloc_r+0x22>
 8002fba:	42a3      	cmp	r3, r4
 8002fbc:	6862      	ldr	r2, [r4, #4]
 8002fbe:	d1dd      	bne.n	8002f7c <_malloc_r+0x8c>
 8002fc0:	f8c8 2000 	str.w	r2, [r8]
 8002fc4:	e7ec      	b.n	8002fa0 <_malloc_r+0xb0>
 8002fc6:	4623      	mov	r3, r4
 8002fc8:	6864      	ldr	r4, [r4, #4]
 8002fca:	e7ac      	b.n	8002f26 <_malloc_r+0x36>
 8002fcc:	4634      	mov	r4, r6
 8002fce:	6876      	ldr	r6, [r6, #4]
 8002fd0:	e7b4      	b.n	8002f3c <_malloc_r+0x4c>
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	e7cc      	b.n	8002f70 <_malloc_r+0x80>
 8002fd6:	230c      	movs	r3, #12
 8002fd8:	4638      	mov	r0, r7
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	f000 f80e 	bl	8002ffc <__malloc_unlock>
 8002fe0:	e797      	b.n	8002f12 <_malloc_r+0x22>
 8002fe2:	6025      	str	r5, [r4, #0]
 8002fe4:	e7dc      	b.n	8002fa0 <_malloc_r+0xb0>
 8002fe6:	605b      	str	r3, [r3, #4]
 8002fe8:	deff      	udf	#255	; 0xff
 8002fea:	bf00      	nop
 8002fec:	20000244 	.word	0x20000244

08002ff0 <__malloc_lock>:
 8002ff0:	4801      	ldr	r0, [pc, #4]	; (8002ff8 <__malloc_lock+0x8>)
 8002ff2:	f7ff bf13 	b.w	8002e1c <__retarget_lock_acquire_recursive>
 8002ff6:	bf00      	nop
 8002ff8:	20000240 	.word	0x20000240

08002ffc <__malloc_unlock>:
 8002ffc:	4801      	ldr	r0, [pc, #4]	; (8003004 <__malloc_unlock+0x8>)
 8002ffe:	f7ff bf0e 	b.w	8002e1e <__retarget_lock_release_recursive>
 8003002:	bf00      	nop
 8003004:	20000240 	.word	0x20000240

08003008 <__ssputs_r>:
 8003008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800300c:	461f      	mov	r7, r3
 800300e:	688e      	ldr	r6, [r1, #8]
 8003010:	4682      	mov	sl, r0
 8003012:	42be      	cmp	r6, r7
 8003014:	460c      	mov	r4, r1
 8003016:	4690      	mov	r8, r2
 8003018:	680b      	ldr	r3, [r1, #0]
 800301a:	d82c      	bhi.n	8003076 <__ssputs_r+0x6e>
 800301c:	898a      	ldrh	r2, [r1, #12]
 800301e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003022:	d026      	beq.n	8003072 <__ssputs_r+0x6a>
 8003024:	6965      	ldr	r5, [r4, #20]
 8003026:	6909      	ldr	r1, [r1, #16]
 8003028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800302c:	eba3 0901 	sub.w	r9, r3, r1
 8003030:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003034:	1c7b      	adds	r3, r7, #1
 8003036:	444b      	add	r3, r9
 8003038:	106d      	asrs	r5, r5, #1
 800303a:	429d      	cmp	r5, r3
 800303c:	bf38      	it	cc
 800303e:	461d      	movcc	r5, r3
 8003040:	0553      	lsls	r3, r2, #21
 8003042:	d527      	bpl.n	8003094 <__ssputs_r+0x8c>
 8003044:	4629      	mov	r1, r5
 8003046:	f7ff ff53 	bl	8002ef0 <_malloc_r>
 800304a:	4606      	mov	r6, r0
 800304c:	b360      	cbz	r0, 80030a8 <__ssputs_r+0xa0>
 800304e:	464a      	mov	r2, r9
 8003050:	6921      	ldr	r1, [r4, #16]
 8003052:	f000 fafd 	bl	8003650 <memcpy>
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800305c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003060:	81a3      	strh	r3, [r4, #12]
 8003062:	6126      	str	r6, [r4, #16]
 8003064:	444e      	add	r6, r9
 8003066:	6026      	str	r6, [r4, #0]
 8003068:	463e      	mov	r6, r7
 800306a:	6165      	str	r5, [r4, #20]
 800306c:	eba5 0509 	sub.w	r5, r5, r9
 8003070:	60a5      	str	r5, [r4, #8]
 8003072:	42be      	cmp	r6, r7
 8003074:	d900      	bls.n	8003078 <__ssputs_r+0x70>
 8003076:	463e      	mov	r6, r7
 8003078:	4632      	mov	r2, r6
 800307a:	4641      	mov	r1, r8
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	f000 faaf 	bl	80035e0 <memmove>
 8003082:	2000      	movs	r0, #0
 8003084:	68a3      	ldr	r3, [r4, #8]
 8003086:	1b9b      	subs	r3, r3, r6
 8003088:	60a3      	str	r3, [r4, #8]
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	4433      	add	r3, r6
 800308e:	6023      	str	r3, [r4, #0]
 8003090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003094:	462a      	mov	r2, r5
 8003096:	f000 fae9 	bl	800366c <_realloc_r>
 800309a:	4606      	mov	r6, r0
 800309c:	2800      	cmp	r0, #0
 800309e:	d1e0      	bne.n	8003062 <__ssputs_r+0x5a>
 80030a0:	4650      	mov	r0, sl
 80030a2:	6921      	ldr	r1, [r4, #16]
 80030a4:	f7ff febc 	bl	8002e20 <_free_r>
 80030a8:	230c      	movs	r3, #12
 80030aa:	f8ca 3000 	str.w	r3, [sl]
 80030ae:	89a3      	ldrh	r3, [r4, #12]
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030b8:	81a3      	strh	r3, [r4, #12]
 80030ba:	e7e9      	b.n	8003090 <__ssputs_r+0x88>

080030bc <_svfiprintf_r>:
 80030bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c0:	4698      	mov	r8, r3
 80030c2:	898b      	ldrh	r3, [r1, #12]
 80030c4:	4607      	mov	r7, r0
 80030c6:	061b      	lsls	r3, r3, #24
 80030c8:	460d      	mov	r5, r1
 80030ca:	4614      	mov	r4, r2
 80030cc:	b09d      	sub	sp, #116	; 0x74
 80030ce:	d50e      	bpl.n	80030ee <_svfiprintf_r+0x32>
 80030d0:	690b      	ldr	r3, [r1, #16]
 80030d2:	b963      	cbnz	r3, 80030ee <_svfiprintf_r+0x32>
 80030d4:	2140      	movs	r1, #64	; 0x40
 80030d6:	f7ff ff0b 	bl	8002ef0 <_malloc_r>
 80030da:	6028      	str	r0, [r5, #0]
 80030dc:	6128      	str	r0, [r5, #16]
 80030de:	b920      	cbnz	r0, 80030ea <_svfiprintf_r+0x2e>
 80030e0:	230c      	movs	r3, #12
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	e0d0      	b.n	800328c <_svfiprintf_r+0x1d0>
 80030ea:	2340      	movs	r3, #64	; 0x40
 80030ec:	616b      	str	r3, [r5, #20]
 80030ee:	2300      	movs	r3, #0
 80030f0:	9309      	str	r3, [sp, #36]	; 0x24
 80030f2:	2320      	movs	r3, #32
 80030f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030f8:	2330      	movs	r3, #48	; 0x30
 80030fa:	f04f 0901 	mov.w	r9, #1
 80030fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003102:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80032a4 <_svfiprintf_r+0x1e8>
 8003106:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800310a:	4623      	mov	r3, r4
 800310c:	469a      	mov	sl, r3
 800310e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003112:	b10a      	cbz	r2, 8003118 <_svfiprintf_r+0x5c>
 8003114:	2a25      	cmp	r2, #37	; 0x25
 8003116:	d1f9      	bne.n	800310c <_svfiprintf_r+0x50>
 8003118:	ebba 0b04 	subs.w	fp, sl, r4
 800311c:	d00b      	beq.n	8003136 <_svfiprintf_r+0x7a>
 800311e:	465b      	mov	r3, fp
 8003120:	4622      	mov	r2, r4
 8003122:	4629      	mov	r1, r5
 8003124:	4638      	mov	r0, r7
 8003126:	f7ff ff6f 	bl	8003008 <__ssputs_r>
 800312a:	3001      	adds	r0, #1
 800312c:	f000 80a9 	beq.w	8003282 <_svfiprintf_r+0x1c6>
 8003130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003132:	445a      	add	r2, fp
 8003134:	9209      	str	r2, [sp, #36]	; 0x24
 8003136:	f89a 3000 	ldrb.w	r3, [sl]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80a1 	beq.w	8003282 <_svfiprintf_r+0x1c6>
 8003140:	2300      	movs	r3, #0
 8003142:	f04f 32ff 	mov.w	r2, #4294967295
 8003146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800314a:	f10a 0a01 	add.w	sl, sl, #1
 800314e:	9304      	str	r3, [sp, #16]
 8003150:	9307      	str	r3, [sp, #28]
 8003152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003156:	931a      	str	r3, [sp, #104]	; 0x68
 8003158:	4654      	mov	r4, sl
 800315a:	2205      	movs	r2, #5
 800315c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003160:	4850      	ldr	r0, [pc, #320]	; (80032a4 <_svfiprintf_r+0x1e8>)
 8003162:	f000 fa67 	bl	8003634 <memchr>
 8003166:	9a04      	ldr	r2, [sp, #16]
 8003168:	b9d8      	cbnz	r0, 80031a2 <_svfiprintf_r+0xe6>
 800316a:	06d0      	lsls	r0, r2, #27
 800316c:	bf44      	itt	mi
 800316e:	2320      	movmi	r3, #32
 8003170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003174:	0711      	lsls	r1, r2, #28
 8003176:	bf44      	itt	mi
 8003178:	232b      	movmi	r3, #43	; 0x2b
 800317a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800317e:	f89a 3000 	ldrb.w	r3, [sl]
 8003182:	2b2a      	cmp	r3, #42	; 0x2a
 8003184:	d015      	beq.n	80031b2 <_svfiprintf_r+0xf6>
 8003186:	4654      	mov	r4, sl
 8003188:	2000      	movs	r0, #0
 800318a:	f04f 0c0a 	mov.w	ip, #10
 800318e:	9a07      	ldr	r2, [sp, #28]
 8003190:	4621      	mov	r1, r4
 8003192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003196:	3b30      	subs	r3, #48	; 0x30
 8003198:	2b09      	cmp	r3, #9
 800319a:	d94d      	bls.n	8003238 <_svfiprintf_r+0x17c>
 800319c:	b1b0      	cbz	r0, 80031cc <_svfiprintf_r+0x110>
 800319e:	9207      	str	r2, [sp, #28]
 80031a0:	e014      	b.n	80031cc <_svfiprintf_r+0x110>
 80031a2:	eba0 0308 	sub.w	r3, r0, r8
 80031a6:	fa09 f303 	lsl.w	r3, r9, r3
 80031aa:	4313      	orrs	r3, r2
 80031ac:	46a2      	mov	sl, r4
 80031ae:	9304      	str	r3, [sp, #16]
 80031b0:	e7d2      	b.n	8003158 <_svfiprintf_r+0x9c>
 80031b2:	9b03      	ldr	r3, [sp, #12]
 80031b4:	1d19      	adds	r1, r3, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	9103      	str	r1, [sp, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bfbb      	ittet	lt
 80031be:	425b      	neglt	r3, r3
 80031c0:	f042 0202 	orrlt.w	r2, r2, #2
 80031c4:	9307      	strge	r3, [sp, #28]
 80031c6:	9307      	strlt	r3, [sp, #28]
 80031c8:	bfb8      	it	lt
 80031ca:	9204      	strlt	r2, [sp, #16]
 80031cc:	7823      	ldrb	r3, [r4, #0]
 80031ce:	2b2e      	cmp	r3, #46	; 0x2e
 80031d0:	d10c      	bne.n	80031ec <_svfiprintf_r+0x130>
 80031d2:	7863      	ldrb	r3, [r4, #1]
 80031d4:	2b2a      	cmp	r3, #42	; 0x2a
 80031d6:	d134      	bne.n	8003242 <_svfiprintf_r+0x186>
 80031d8:	9b03      	ldr	r3, [sp, #12]
 80031da:	3402      	adds	r4, #2
 80031dc:	1d1a      	adds	r2, r3, #4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	9203      	str	r2, [sp, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bfb8      	it	lt
 80031e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80031ea:	9305      	str	r3, [sp, #20]
 80031ec:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80032a8 <_svfiprintf_r+0x1ec>
 80031f0:	2203      	movs	r2, #3
 80031f2:	4650      	mov	r0, sl
 80031f4:	7821      	ldrb	r1, [r4, #0]
 80031f6:	f000 fa1d 	bl	8003634 <memchr>
 80031fa:	b138      	cbz	r0, 800320c <_svfiprintf_r+0x150>
 80031fc:	2240      	movs	r2, #64	; 0x40
 80031fe:	9b04      	ldr	r3, [sp, #16]
 8003200:	eba0 000a 	sub.w	r0, r0, sl
 8003204:	4082      	lsls	r2, r0
 8003206:	4313      	orrs	r3, r2
 8003208:	3401      	adds	r4, #1
 800320a:	9304      	str	r3, [sp, #16]
 800320c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003210:	2206      	movs	r2, #6
 8003212:	4826      	ldr	r0, [pc, #152]	; (80032ac <_svfiprintf_r+0x1f0>)
 8003214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003218:	f000 fa0c 	bl	8003634 <memchr>
 800321c:	2800      	cmp	r0, #0
 800321e:	d038      	beq.n	8003292 <_svfiprintf_r+0x1d6>
 8003220:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <_svfiprintf_r+0x1f4>)
 8003222:	bb1b      	cbnz	r3, 800326c <_svfiprintf_r+0x1b0>
 8003224:	9b03      	ldr	r3, [sp, #12]
 8003226:	3307      	adds	r3, #7
 8003228:	f023 0307 	bic.w	r3, r3, #7
 800322c:	3308      	adds	r3, #8
 800322e:	9303      	str	r3, [sp, #12]
 8003230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003232:	4433      	add	r3, r6
 8003234:	9309      	str	r3, [sp, #36]	; 0x24
 8003236:	e768      	b.n	800310a <_svfiprintf_r+0x4e>
 8003238:	460c      	mov	r4, r1
 800323a:	2001      	movs	r0, #1
 800323c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003240:	e7a6      	b.n	8003190 <_svfiprintf_r+0xd4>
 8003242:	2300      	movs	r3, #0
 8003244:	f04f 0c0a 	mov.w	ip, #10
 8003248:	4619      	mov	r1, r3
 800324a:	3401      	adds	r4, #1
 800324c:	9305      	str	r3, [sp, #20]
 800324e:	4620      	mov	r0, r4
 8003250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003254:	3a30      	subs	r2, #48	; 0x30
 8003256:	2a09      	cmp	r2, #9
 8003258:	d903      	bls.n	8003262 <_svfiprintf_r+0x1a6>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0c6      	beq.n	80031ec <_svfiprintf_r+0x130>
 800325e:	9105      	str	r1, [sp, #20]
 8003260:	e7c4      	b.n	80031ec <_svfiprintf_r+0x130>
 8003262:	4604      	mov	r4, r0
 8003264:	2301      	movs	r3, #1
 8003266:	fb0c 2101 	mla	r1, ip, r1, r2
 800326a:	e7f0      	b.n	800324e <_svfiprintf_r+0x192>
 800326c:	ab03      	add	r3, sp, #12
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	462a      	mov	r2, r5
 8003272:	4638      	mov	r0, r7
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <_svfiprintf_r+0x1f8>)
 8003276:	a904      	add	r1, sp, #16
 8003278:	f3af 8000 	nop.w
 800327c:	1c42      	adds	r2, r0, #1
 800327e:	4606      	mov	r6, r0
 8003280:	d1d6      	bne.n	8003230 <_svfiprintf_r+0x174>
 8003282:	89ab      	ldrh	r3, [r5, #12]
 8003284:	065b      	lsls	r3, r3, #25
 8003286:	f53f af2d 	bmi.w	80030e4 <_svfiprintf_r+0x28>
 800328a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800328c:	b01d      	add	sp, #116	; 0x74
 800328e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003292:	ab03      	add	r3, sp, #12
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	462a      	mov	r2, r5
 8003298:	4638      	mov	r0, r7
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <_svfiprintf_r+0x1f8>)
 800329c:	a904      	add	r1, sp, #16
 800329e:	f000 f87d 	bl	800339c <_printf_i>
 80032a2:	e7eb      	b.n	800327c <_svfiprintf_r+0x1c0>
 80032a4:	08003e56 	.word	0x08003e56
 80032a8:	08003e5c 	.word	0x08003e5c
 80032ac:	08003e60 	.word	0x08003e60
 80032b0:	00000000 	.word	0x00000000
 80032b4:	08003009 	.word	0x08003009

080032b8 <_printf_common>:
 80032b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032bc:	4616      	mov	r6, r2
 80032be:	4699      	mov	r9, r3
 80032c0:	688a      	ldr	r2, [r1, #8]
 80032c2:	690b      	ldr	r3, [r1, #16]
 80032c4:	4607      	mov	r7, r0
 80032c6:	4293      	cmp	r3, r2
 80032c8:	bfb8      	it	lt
 80032ca:	4613      	movlt	r3, r2
 80032cc:	6033      	str	r3, [r6, #0]
 80032ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032d2:	460c      	mov	r4, r1
 80032d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032d8:	b10a      	cbz	r2, 80032de <_printf_common+0x26>
 80032da:	3301      	adds	r3, #1
 80032dc:	6033      	str	r3, [r6, #0]
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	0699      	lsls	r1, r3, #26
 80032e2:	bf42      	ittt	mi
 80032e4:	6833      	ldrmi	r3, [r6, #0]
 80032e6:	3302      	addmi	r3, #2
 80032e8:	6033      	strmi	r3, [r6, #0]
 80032ea:	6825      	ldr	r5, [r4, #0]
 80032ec:	f015 0506 	ands.w	r5, r5, #6
 80032f0:	d106      	bne.n	8003300 <_printf_common+0x48>
 80032f2:	f104 0a19 	add.w	sl, r4, #25
 80032f6:	68e3      	ldr	r3, [r4, #12]
 80032f8:	6832      	ldr	r2, [r6, #0]
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	42ab      	cmp	r3, r5
 80032fe:	dc2b      	bgt.n	8003358 <_printf_common+0xa0>
 8003300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003304:	1e13      	subs	r3, r2, #0
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	bf18      	it	ne
 800330a:	2301      	movne	r3, #1
 800330c:	0692      	lsls	r2, r2, #26
 800330e:	d430      	bmi.n	8003372 <_printf_common+0xba>
 8003310:	4649      	mov	r1, r9
 8003312:	4638      	mov	r0, r7
 8003314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003318:	47c0      	blx	r8
 800331a:	3001      	adds	r0, #1
 800331c:	d023      	beq.n	8003366 <_printf_common+0xae>
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	6922      	ldr	r2, [r4, #16]
 8003322:	f003 0306 	and.w	r3, r3, #6
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf14      	ite	ne
 800332a:	2500      	movne	r5, #0
 800332c:	6833      	ldreq	r3, [r6, #0]
 800332e:	f04f 0600 	mov.w	r6, #0
 8003332:	bf08      	it	eq
 8003334:	68e5      	ldreq	r5, [r4, #12]
 8003336:	f104 041a 	add.w	r4, r4, #26
 800333a:	bf08      	it	eq
 800333c:	1aed      	subeq	r5, r5, r3
 800333e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003342:	bf08      	it	eq
 8003344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003348:	4293      	cmp	r3, r2
 800334a:	bfc4      	itt	gt
 800334c:	1a9b      	subgt	r3, r3, r2
 800334e:	18ed      	addgt	r5, r5, r3
 8003350:	42b5      	cmp	r5, r6
 8003352:	d11a      	bne.n	800338a <_printf_common+0xd2>
 8003354:	2000      	movs	r0, #0
 8003356:	e008      	b.n	800336a <_printf_common+0xb2>
 8003358:	2301      	movs	r3, #1
 800335a:	4652      	mov	r2, sl
 800335c:	4649      	mov	r1, r9
 800335e:	4638      	mov	r0, r7
 8003360:	47c0      	blx	r8
 8003362:	3001      	adds	r0, #1
 8003364:	d103      	bne.n	800336e <_printf_common+0xb6>
 8003366:	f04f 30ff 	mov.w	r0, #4294967295
 800336a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800336e:	3501      	adds	r5, #1
 8003370:	e7c1      	b.n	80032f6 <_printf_common+0x3e>
 8003372:	2030      	movs	r0, #48	; 0x30
 8003374:	18e1      	adds	r1, r4, r3
 8003376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003380:	4422      	add	r2, r4
 8003382:	3302      	adds	r3, #2
 8003384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003388:	e7c2      	b.n	8003310 <_printf_common+0x58>
 800338a:	2301      	movs	r3, #1
 800338c:	4622      	mov	r2, r4
 800338e:	4649      	mov	r1, r9
 8003390:	4638      	mov	r0, r7
 8003392:	47c0      	blx	r8
 8003394:	3001      	adds	r0, #1
 8003396:	d0e6      	beq.n	8003366 <_printf_common+0xae>
 8003398:	3601      	adds	r6, #1
 800339a:	e7d9      	b.n	8003350 <_printf_common+0x98>

0800339c <_printf_i>:
 800339c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033a0:	7e0f      	ldrb	r7, [r1, #24]
 80033a2:	4691      	mov	r9, r2
 80033a4:	2f78      	cmp	r7, #120	; 0x78
 80033a6:	4680      	mov	r8, r0
 80033a8:	460c      	mov	r4, r1
 80033aa:	469a      	mov	sl, r3
 80033ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033b2:	d807      	bhi.n	80033c4 <_printf_i+0x28>
 80033b4:	2f62      	cmp	r7, #98	; 0x62
 80033b6:	d80a      	bhi.n	80033ce <_printf_i+0x32>
 80033b8:	2f00      	cmp	r7, #0
 80033ba:	f000 80d5 	beq.w	8003568 <_printf_i+0x1cc>
 80033be:	2f58      	cmp	r7, #88	; 0x58
 80033c0:	f000 80c1 	beq.w	8003546 <_printf_i+0x1aa>
 80033c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033cc:	e03a      	b.n	8003444 <_printf_i+0xa8>
 80033ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033d2:	2b15      	cmp	r3, #21
 80033d4:	d8f6      	bhi.n	80033c4 <_printf_i+0x28>
 80033d6:	a101      	add	r1, pc, #4	; (adr r1, 80033dc <_printf_i+0x40>)
 80033d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033dc:	08003435 	.word	0x08003435
 80033e0:	08003449 	.word	0x08003449
 80033e4:	080033c5 	.word	0x080033c5
 80033e8:	080033c5 	.word	0x080033c5
 80033ec:	080033c5 	.word	0x080033c5
 80033f0:	080033c5 	.word	0x080033c5
 80033f4:	08003449 	.word	0x08003449
 80033f8:	080033c5 	.word	0x080033c5
 80033fc:	080033c5 	.word	0x080033c5
 8003400:	080033c5 	.word	0x080033c5
 8003404:	080033c5 	.word	0x080033c5
 8003408:	0800354f 	.word	0x0800354f
 800340c:	08003475 	.word	0x08003475
 8003410:	08003509 	.word	0x08003509
 8003414:	080033c5 	.word	0x080033c5
 8003418:	080033c5 	.word	0x080033c5
 800341c:	08003571 	.word	0x08003571
 8003420:	080033c5 	.word	0x080033c5
 8003424:	08003475 	.word	0x08003475
 8003428:	080033c5 	.word	0x080033c5
 800342c:	080033c5 	.word	0x080033c5
 8003430:	08003511 	.word	0x08003511
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	602a      	str	r2, [r5, #0]
 800343c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003444:	2301      	movs	r3, #1
 8003446:	e0a0      	b.n	800358a <_printf_i+0x1ee>
 8003448:	6820      	ldr	r0, [r4, #0]
 800344a:	682b      	ldr	r3, [r5, #0]
 800344c:	0607      	lsls	r7, r0, #24
 800344e:	f103 0104 	add.w	r1, r3, #4
 8003452:	6029      	str	r1, [r5, #0]
 8003454:	d501      	bpl.n	800345a <_printf_i+0xbe>
 8003456:	681e      	ldr	r6, [r3, #0]
 8003458:	e003      	b.n	8003462 <_printf_i+0xc6>
 800345a:	0646      	lsls	r6, r0, #25
 800345c:	d5fb      	bpl.n	8003456 <_printf_i+0xba>
 800345e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003462:	2e00      	cmp	r6, #0
 8003464:	da03      	bge.n	800346e <_printf_i+0xd2>
 8003466:	232d      	movs	r3, #45	; 0x2d
 8003468:	4276      	negs	r6, r6
 800346a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800346e:	230a      	movs	r3, #10
 8003470:	4859      	ldr	r0, [pc, #356]	; (80035d8 <_printf_i+0x23c>)
 8003472:	e012      	b.n	800349a <_printf_i+0xfe>
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	6820      	ldr	r0, [r4, #0]
 8003478:	1d19      	adds	r1, r3, #4
 800347a:	6029      	str	r1, [r5, #0]
 800347c:	0605      	lsls	r5, r0, #24
 800347e:	d501      	bpl.n	8003484 <_printf_i+0xe8>
 8003480:	681e      	ldr	r6, [r3, #0]
 8003482:	e002      	b.n	800348a <_printf_i+0xee>
 8003484:	0641      	lsls	r1, r0, #25
 8003486:	d5fb      	bpl.n	8003480 <_printf_i+0xe4>
 8003488:	881e      	ldrh	r6, [r3, #0]
 800348a:	2f6f      	cmp	r7, #111	; 0x6f
 800348c:	bf0c      	ite	eq
 800348e:	2308      	moveq	r3, #8
 8003490:	230a      	movne	r3, #10
 8003492:	4851      	ldr	r0, [pc, #324]	; (80035d8 <_printf_i+0x23c>)
 8003494:	2100      	movs	r1, #0
 8003496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800349a:	6865      	ldr	r5, [r4, #4]
 800349c:	2d00      	cmp	r5, #0
 800349e:	bfa8      	it	ge
 80034a0:	6821      	ldrge	r1, [r4, #0]
 80034a2:	60a5      	str	r5, [r4, #8]
 80034a4:	bfa4      	itt	ge
 80034a6:	f021 0104 	bicge.w	r1, r1, #4
 80034aa:	6021      	strge	r1, [r4, #0]
 80034ac:	b90e      	cbnz	r6, 80034b2 <_printf_i+0x116>
 80034ae:	2d00      	cmp	r5, #0
 80034b0:	d04b      	beq.n	800354a <_printf_i+0x1ae>
 80034b2:	4615      	mov	r5, r2
 80034b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80034b8:	fb03 6711 	mls	r7, r3, r1, r6
 80034bc:	5dc7      	ldrb	r7, [r0, r7]
 80034be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034c2:	4637      	mov	r7, r6
 80034c4:	42bb      	cmp	r3, r7
 80034c6:	460e      	mov	r6, r1
 80034c8:	d9f4      	bls.n	80034b4 <_printf_i+0x118>
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d10b      	bne.n	80034e6 <_printf_i+0x14a>
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	07de      	lsls	r6, r3, #31
 80034d2:	d508      	bpl.n	80034e6 <_printf_i+0x14a>
 80034d4:	6923      	ldr	r3, [r4, #16]
 80034d6:	6861      	ldr	r1, [r4, #4]
 80034d8:	4299      	cmp	r1, r3
 80034da:	bfde      	ittt	le
 80034dc:	2330      	movle	r3, #48	; 0x30
 80034de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034e6:	1b52      	subs	r2, r2, r5
 80034e8:	6122      	str	r2, [r4, #16]
 80034ea:	464b      	mov	r3, r9
 80034ec:	4621      	mov	r1, r4
 80034ee:	4640      	mov	r0, r8
 80034f0:	f8cd a000 	str.w	sl, [sp]
 80034f4:	aa03      	add	r2, sp, #12
 80034f6:	f7ff fedf 	bl	80032b8 <_printf_common>
 80034fa:	3001      	adds	r0, #1
 80034fc:	d14a      	bne.n	8003594 <_printf_i+0x1f8>
 80034fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003502:	b004      	add	sp, #16
 8003504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	f043 0320 	orr.w	r3, r3, #32
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	2778      	movs	r7, #120	; 0x78
 8003512:	4832      	ldr	r0, [pc, #200]	; (80035dc <_printf_i+0x240>)
 8003514:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	6829      	ldr	r1, [r5, #0]
 800351c:	061f      	lsls	r7, r3, #24
 800351e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003522:	d402      	bmi.n	800352a <_printf_i+0x18e>
 8003524:	065f      	lsls	r7, r3, #25
 8003526:	bf48      	it	mi
 8003528:	b2b6      	uxthmi	r6, r6
 800352a:	07df      	lsls	r7, r3, #31
 800352c:	bf48      	it	mi
 800352e:	f043 0320 	orrmi.w	r3, r3, #32
 8003532:	6029      	str	r1, [r5, #0]
 8003534:	bf48      	it	mi
 8003536:	6023      	strmi	r3, [r4, #0]
 8003538:	b91e      	cbnz	r6, 8003542 <_printf_i+0x1a6>
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	f023 0320 	bic.w	r3, r3, #32
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	2310      	movs	r3, #16
 8003544:	e7a6      	b.n	8003494 <_printf_i+0xf8>
 8003546:	4824      	ldr	r0, [pc, #144]	; (80035d8 <_printf_i+0x23c>)
 8003548:	e7e4      	b.n	8003514 <_printf_i+0x178>
 800354a:	4615      	mov	r5, r2
 800354c:	e7bd      	b.n	80034ca <_printf_i+0x12e>
 800354e:	682b      	ldr	r3, [r5, #0]
 8003550:	6826      	ldr	r6, [r4, #0]
 8003552:	1d18      	adds	r0, r3, #4
 8003554:	6961      	ldr	r1, [r4, #20]
 8003556:	6028      	str	r0, [r5, #0]
 8003558:	0635      	lsls	r5, r6, #24
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	d501      	bpl.n	8003562 <_printf_i+0x1c6>
 800355e:	6019      	str	r1, [r3, #0]
 8003560:	e002      	b.n	8003568 <_printf_i+0x1cc>
 8003562:	0670      	lsls	r0, r6, #25
 8003564:	d5fb      	bpl.n	800355e <_printf_i+0x1c2>
 8003566:	8019      	strh	r1, [r3, #0]
 8003568:	2300      	movs	r3, #0
 800356a:	4615      	mov	r5, r2
 800356c:	6123      	str	r3, [r4, #16]
 800356e:	e7bc      	b.n	80034ea <_printf_i+0x14e>
 8003570:	682b      	ldr	r3, [r5, #0]
 8003572:	2100      	movs	r1, #0
 8003574:	1d1a      	adds	r2, r3, #4
 8003576:	602a      	str	r2, [r5, #0]
 8003578:	681d      	ldr	r5, [r3, #0]
 800357a:	6862      	ldr	r2, [r4, #4]
 800357c:	4628      	mov	r0, r5
 800357e:	f000 f859 	bl	8003634 <memchr>
 8003582:	b108      	cbz	r0, 8003588 <_printf_i+0x1ec>
 8003584:	1b40      	subs	r0, r0, r5
 8003586:	6060      	str	r0, [r4, #4]
 8003588:	6863      	ldr	r3, [r4, #4]
 800358a:	6123      	str	r3, [r4, #16]
 800358c:	2300      	movs	r3, #0
 800358e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003592:	e7aa      	b.n	80034ea <_printf_i+0x14e>
 8003594:	462a      	mov	r2, r5
 8003596:	4649      	mov	r1, r9
 8003598:	4640      	mov	r0, r8
 800359a:	6923      	ldr	r3, [r4, #16]
 800359c:	47d0      	blx	sl
 800359e:	3001      	adds	r0, #1
 80035a0:	d0ad      	beq.n	80034fe <_printf_i+0x162>
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	079b      	lsls	r3, r3, #30
 80035a6:	d413      	bmi.n	80035d0 <_printf_i+0x234>
 80035a8:	68e0      	ldr	r0, [r4, #12]
 80035aa:	9b03      	ldr	r3, [sp, #12]
 80035ac:	4298      	cmp	r0, r3
 80035ae:	bfb8      	it	lt
 80035b0:	4618      	movlt	r0, r3
 80035b2:	e7a6      	b.n	8003502 <_printf_i+0x166>
 80035b4:	2301      	movs	r3, #1
 80035b6:	4632      	mov	r2, r6
 80035b8:	4649      	mov	r1, r9
 80035ba:	4640      	mov	r0, r8
 80035bc:	47d0      	blx	sl
 80035be:	3001      	adds	r0, #1
 80035c0:	d09d      	beq.n	80034fe <_printf_i+0x162>
 80035c2:	3501      	adds	r5, #1
 80035c4:	68e3      	ldr	r3, [r4, #12]
 80035c6:	9903      	ldr	r1, [sp, #12]
 80035c8:	1a5b      	subs	r3, r3, r1
 80035ca:	42ab      	cmp	r3, r5
 80035cc:	dcf2      	bgt.n	80035b4 <_printf_i+0x218>
 80035ce:	e7eb      	b.n	80035a8 <_printf_i+0x20c>
 80035d0:	2500      	movs	r5, #0
 80035d2:	f104 0619 	add.w	r6, r4, #25
 80035d6:	e7f5      	b.n	80035c4 <_printf_i+0x228>
 80035d8:	08003e67 	.word	0x08003e67
 80035dc:	08003e78 	.word	0x08003e78

080035e0 <memmove>:
 80035e0:	4288      	cmp	r0, r1
 80035e2:	b510      	push	{r4, lr}
 80035e4:	eb01 0402 	add.w	r4, r1, r2
 80035e8:	d902      	bls.n	80035f0 <memmove+0x10>
 80035ea:	4284      	cmp	r4, r0
 80035ec:	4623      	mov	r3, r4
 80035ee:	d807      	bhi.n	8003600 <memmove+0x20>
 80035f0:	1e43      	subs	r3, r0, #1
 80035f2:	42a1      	cmp	r1, r4
 80035f4:	d008      	beq.n	8003608 <memmove+0x28>
 80035f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035fe:	e7f8      	b.n	80035f2 <memmove+0x12>
 8003600:	4601      	mov	r1, r0
 8003602:	4402      	add	r2, r0
 8003604:	428a      	cmp	r2, r1
 8003606:	d100      	bne.n	800360a <memmove+0x2a>
 8003608:	bd10      	pop	{r4, pc}
 800360a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800360e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003612:	e7f7      	b.n	8003604 <memmove+0x24>

08003614 <_sbrk_r>:
 8003614:	b538      	push	{r3, r4, r5, lr}
 8003616:	2300      	movs	r3, #0
 8003618:	4d05      	ldr	r5, [pc, #20]	; (8003630 <_sbrk_r+0x1c>)
 800361a:	4604      	mov	r4, r0
 800361c:	4608      	mov	r0, r1
 800361e:	602b      	str	r3, [r5, #0]
 8003620:	f7fd fb74 	bl	8000d0c <_sbrk>
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	d102      	bne.n	800362e <_sbrk_r+0x1a>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	b103      	cbz	r3, 800362e <_sbrk_r+0x1a>
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	bd38      	pop	{r3, r4, r5, pc}
 8003630:	2000023c 	.word	0x2000023c

08003634 <memchr>:
 8003634:	4603      	mov	r3, r0
 8003636:	b510      	push	{r4, lr}
 8003638:	b2c9      	uxtb	r1, r1
 800363a:	4402      	add	r2, r0
 800363c:	4293      	cmp	r3, r2
 800363e:	4618      	mov	r0, r3
 8003640:	d101      	bne.n	8003646 <memchr+0x12>
 8003642:	2000      	movs	r0, #0
 8003644:	e003      	b.n	800364e <memchr+0x1a>
 8003646:	7804      	ldrb	r4, [r0, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	428c      	cmp	r4, r1
 800364c:	d1f6      	bne.n	800363c <memchr+0x8>
 800364e:	bd10      	pop	{r4, pc}

08003650 <memcpy>:
 8003650:	440a      	add	r2, r1
 8003652:	4291      	cmp	r1, r2
 8003654:	f100 33ff 	add.w	r3, r0, #4294967295
 8003658:	d100      	bne.n	800365c <memcpy+0xc>
 800365a:	4770      	bx	lr
 800365c:	b510      	push	{r4, lr}
 800365e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003662:	4291      	cmp	r1, r2
 8003664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003668:	d1f9      	bne.n	800365e <memcpy+0xe>
 800366a:	bd10      	pop	{r4, pc}

0800366c <_realloc_r>:
 800366c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003670:	4680      	mov	r8, r0
 8003672:	4614      	mov	r4, r2
 8003674:	460e      	mov	r6, r1
 8003676:	b921      	cbnz	r1, 8003682 <_realloc_r+0x16>
 8003678:	4611      	mov	r1, r2
 800367a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800367e:	f7ff bc37 	b.w	8002ef0 <_malloc_r>
 8003682:	b92a      	cbnz	r2, 8003690 <_realloc_r+0x24>
 8003684:	f7ff fbcc 	bl	8002e20 <_free_r>
 8003688:	4625      	mov	r5, r4
 800368a:	4628      	mov	r0, r5
 800368c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003690:	f000 f81b 	bl	80036ca <_malloc_usable_size_r>
 8003694:	4284      	cmp	r4, r0
 8003696:	4607      	mov	r7, r0
 8003698:	d802      	bhi.n	80036a0 <_realloc_r+0x34>
 800369a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800369e:	d812      	bhi.n	80036c6 <_realloc_r+0x5a>
 80036a0:	4621      	mov	r1, r4
 80036a2:	4640      	mov	r0, r8
 80036a4:	f7ff fc24 	bl	8002ef0 <_malloc_r>
 80036a8:	4605      	mov	r5, r0
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d0ed      	beq.n	800368a <_realloc_r+0x1e>
 80036ae:	42bc      	cmp	r4, r7
 80036b0:	4622      	mov	r2, r4
 80036b2:	4631      	mov	r1, r6
 80036b4:	bf28      	it	cs
 80036b6:	463a      	movcs	r2, r7
 80036b8:	f7ff ffca 	bl	8003650 <memcpy>
 80036bc:	4631      	mov	r1, r6
 80036be:	4640      	mov	r0, r8
 80036c0:	f7ff fbae 	bl	8002e20 <_free_r>
 80036c4:	e7e1      	b.n	800368a <_realloc_r+0x1e>
 80036c6:	4635      	mov	r5, r6
 80036c8:	e7df      	b.n	800368a <_realloc_r+0x1e>

080036ca <_malloc_usable_size_r>:
 80036ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036ce:	1f18      	subs	r0, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bfbc      	itt	lt
 80036d4:	580b      	ldrlt	r3, [r1, r0]
 80036d6:	18c0      	addlt	r0, r0, r3
 80036d8:	4770      	bx	lr
	...

080036dc <_init>:
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036de:	bf00      	nop
 80036e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e2:	bc08      	pop	{r3}
 80036e4:	469e      	mov	lr, r3
 80036e6:	4770      	bx	lr

080036e8 <_fini>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	bf00      	nop
 80036ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ee:	bc08      	pop	{r3}
 80036f0:	469e      	mov	lr, r3
 80036f2:	4770      	bx	lr
