
nucleo334r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044fc  080044fc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080044fc  080044fc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044fc  080044fc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000248  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bb14  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a11  00000000  00000000  0002bbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000988  00000000  00000000  0002d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000076b  00000000  00000000  0002df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f816  00000000  00000000  0002e6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000dae8  00000000  00000000  0004df01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ba756  00000000  00000000  0005b9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002be4  00000000  00000000  00116140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00118d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800442c 	.word	0x0800442c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800442c 	.word	0x0800442c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b096      	sub	sp, #88	; 0x58
 8000284:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fb79 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f865 	bl	8000358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f92d 	bl	80004ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f8fb 	bl	800048c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000296:	f000 f8b9 	bl	800040c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t red = 0, green = 0, blue = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80002a0:	2300      	movs	r3, #0
 80002a2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80002a6:	2300      	movs	r3, #0
 80002a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  char startMsg[] = "Program started.\n";
 80002ac:	4b25      	ldr	r3, [pc, #148]	; (8000344 <main+0xc4>)
 80002ae:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80002b2:	461d      	mov	r5, r3
 80002b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b8:	682b      	ldr	r3, [r5, #0]
 80002ba:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)startMsg, strlen(startMsg), 100);
 80002bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ff85 	bl	80001d0 <strlen>
 80002c6:	4603      	mov	r3, r0
 80002c8:	b29a      	uxth	r2, r3
 80002ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80002ce:	2364      	movs	r3, #100	; 0x64
 80002d0:	481d      	ldr	r0, [pc, #116]	; (8000348 <main+0xc8>)
 80002d2:	f003 f817 	bl	8003304 <HAL_UART_Transmit>

  // Инициализация датчика с логами
  HAL_UART_Transmit(&huart2, (uint8_t*)"Enabling sensor...\n", 19, 100);
 80002d6:	2364      	movs	r3, #100	; 0x64
 80002d8:	2213      	movs	r2, #19
 80002da:	491c      	ldr	r1, [pc, #112]	; (800034c <main+0xcc>)
 80002dc:	481a      	ldr	r0, [pc, #104]	; (8000348 <main+0xc8>)
 80002de:	f003 f811 	bl	8003304 <HAL_UART_Transmit>
  enableSensor();
 80002e2:	f000 f9b1 	bl	8000648 <enableSensor>
  HAL_UART_Transmit(&huart2, (uint8_t*)"Sensor enabled.\n", 16, 100);
 80002e6:	2364      	movs	r3, #100	; 0x64
 80002e8:	2210      	movs	r2, #16
 80002ea:	4919      	ldr	r1, [pc, #100]	; (8000350 <main+0xd0>)
 80002ec:	4816      	ldr	r0, [pc, #88]	; (8000348 <main+0xc8>)
 80002ee:	f003 f809 	bl	8003304 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getRGB(&red, &green, &blue);
 80002f2:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 80002f6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80002fa:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f9b4 	bl	800066c <getRGB>
	  char buffer[50];
	  snprintf(buffer, sizeof(buffer), "R:%d G:%d B:%d\n", red, green, blue);
 8000304:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000308:	4619      	mov	r1, r3
 800030a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800030e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000312:	1d38      	adds	r0, r7, #4
 8000314:	9201      	str	r2, [sp, #4]
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	460b      	mov	r3, r1
 800031a:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <main+0xd4>)
 800031c:	2132      	movs	r1, #50	; 0x32
 800031e:	f003 fbcd 	bl	8003abc <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ff53 	bl	80001d0 <strlen>
 800032a:	4603      	mov	r3, r0
 800032c:	b29a      	uxth	r2, r3
 800032e:	1d39      	adds	r1, r7, #4
 8000330:	2364      	movs	r3, #100	; 0x64
 8000332:	4805      	ldr	r0, [pc, #20]	; (8000348 <main+0xc8>)
 8000334:	f002 ffe6 	bl	8003304 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800033c:	f000 fb84 	bl	8000a48 <HAL_Delay>
  {
 8000340:	e7d7      	b.n	80002f2 <main+0x72>
 8000342:	bf00      	nop
 8000344:	0800447c 	.word	0x0800447c
 8000348:	200000cc 	.word	0x200000cc
 800034c:	08004444 	.word	0x08004444
 8000350:	08004458 	.word	0x08004458
 8000354:	0800446c 	.word	0x0800446c

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b096      	sub	sp, #88	; 0x58
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000362:	2228      	movs	r2, #40	; 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fbdc 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800037c:	463b      	mov	r3, r7
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]
 800038a:	615a      	str	r2, [r3, #20]
 800038c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038e:	2302      	movs	r3, #2
 8000390:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000392:	2301      	movs	r3, #1
 8000394:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000396:	2310      	movs	r3, #16
 8000398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039a:	2302      	movs	r3, #2
 800039c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800039e:	2300      	movs	r3, #0
 80003a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 fbc7 	bl	8001b40 <HAL_RCC_OscConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80003b8:	f000 f977 	bl	80006aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003bc:	230f      	movs	r3, #15
 80003be:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c0:	2302      	movs	r3, #2
 80003c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d2:	f107 031c 	add.w	r3, r7, #28
 80003d6:	2102      	movs	r1, #2
 80003d8:	4618      	mov	r0, r3
 80003da:	f002 fbef 	bl	8002bbc <HAL_RCC_ClockConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003e4:	f000 f961 	bl	80006aa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003e8:	2320      	movs	r3, #32
 80003ea:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f0:	463b      	mov	r3, r7
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 fe02 	bl	8002ffc <HAL_RCCEx_PeriphCLKConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003fe:	f000 f954 	bl	80006aa <Error_Handler>
  }
}
 8000402:	bf00      	nop
 8000404:	3758      	adds	r7, #88	; 0x58
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_I2C1_Init+0x74>)
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MX_I2C1_Init+0x78>)
 8000414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_I2C1_Init+0x74>)
 8000418:	4a1b      	ldr	r2, [pc, #108]	; (8000488 <MX_I2C1_Init+0x7c>)
 800041a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_I2C1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <MX_I2C1_Init+0x74>)
 8000424:	2201      	movs	r2, #1
 8000426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_I2C1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <MX_I2C1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <MX_I2C1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_I2C1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <MX_I2C1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000446:	480e      	ldr	r0, [pc, #56]	; (8000480 <MX_I2C1_Init+0x74>)
 8000448:	f000 fd92 	bl	8000f70 <HAL_I2C_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000452:	f000 f92a 	bl	80006aa <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000456:	2100      	movs	r1, #0
 8000458:	4809      	ldr	r0, [pc, #36]	; (8000480 <MX_I2C1_Init+0x74>)
 800045a:	f001 fad9 	bl	8001a10 <HAL_I2CEx_ConfigAnalogFilter>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000464:	f000 f921 	bl	80006aa <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000468:	2100      	movs	r1, #0
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_I2C1_Init+0x74>)
 800046c:	f001 fb1b 	bl	8001aa6 <HAL_I2CEx_ConfigDigitalFilter>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000476:	f000 f918 	bl	80006aa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000078 	.word	0x20000078
 8000484:	40005400 	.word	0x40005400
 8000488:	2000090e 	.word	0x2000090e

0800048c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 8000492:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <MX_USART2_UART_Init+0x5c>)
 8000494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000496:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 8000498:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800049c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004d0:	f002 feca 	bl	8003268 <HAL_UART_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004da:	f000 f8e6 	bl	80006aa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200000cc 	.word	0x200000cc
 80004e8:	40004400 	.word	0x40004400

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08a      	sub	sp, #40	; 0x28
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	4b2b      	ldr	r3, [pc, #172]	; (80005b0 <MX_GPIO_Init+0xc4>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a2a      	ldr	r2, [pc, #168]	; (80005b0 <MX_GPIO_Init+0xc4>)
 8000508:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b28      	ldr	r3, [pc, #160]	; (80005b0 <MX_GPIO_Init+0xc4>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800051a:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <MX_GPIO_Init+0xc4>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a24      	ldr	r2, [pc, #144]	; (80005b0 <MX_GPIO_Init+0xc4>)
 8000520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <MX_GPIO_Init+0xc4>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <MX_GPIO_Init+0xc4>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a1e      	ldr	r2, [pc, #120]	; (80005b0 <MX_GPIO_Init+0xc4>)
 8000538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <MX_GPIO_Init+0xc4>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <MX_GPIO_Init+0xc4>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a18      	ldr	r2, [pc, #96]	; (80005b0 <MX_GPIO_Init+0xc4>)
 8000550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <MX_GPIO_Init+0xc4>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2120      	movs	r1, #32
 8000566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056a:	f000 fce9 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800056e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000574:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <MX_GPIO_Init+0xc8>)
 8000586:	f000 fb69 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800058a:	2320      	movs	r3, #32
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f000 fb5a 	bl	8000c5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005a8:	bf00      	nop
 80005aa:	3728      	adds	r7, #40	; 0x28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000800 	.word	0x48000800

080005b8 <write8>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void write8(uint8_t reg, uint32_t value) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	733b      	strb	r3, [r7, #12]
    txBuffer[1] = (value & 0xFF);
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 2, 100);
 80005d4:	f107 020c 	add.w	r2, r7, #12
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2302      	movs	r3, #2
 80005de:	2152      	movs	r1, #82	; 0x52
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <write8+0x38>)
 80005e2:	f000 fd61 	bl	80010a8 <HAL_I2C_Master_Transmit>
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000078 	.word	0x20000078

080005f4 <read16>:
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, buffer, 1, 100);
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, buffer, 1, 100);
    return buffer[0];
}

uint16_t read16(uint8_t reg) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
    uint8_t txBuffer[1], rxBuffer[2];
    txBuffer[0] = (TCS34725_COMMAND_BIT | reg);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000604:	b2db      	uxtb	r3, r3
 8000606:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, txBuffer, 1, 100);
 8000608:	f107 020c 	add.w	r2, r7, #12
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	2152      	movs	r1, #82	; 0x52
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <read16+0x50>)
 8000616:	f000 fd47 	bl	80010a8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, rxBuffer, 2, 100);
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2302      	movs	r3, #2
 8000624:	2152      	movs	r1, #82	; 0x52
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <read16+0x50>)
 8000628:	f000 fe56 	bl	80012d8 <HAL_I2C_Master_Receive>
    return (rxBuffer[1] << 8) | rxBuffer[0];
 800062c:	7a7b      	ldrb	r3, [r7, #9]
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	b21a      	sxth	r2, r3
 8000632:	7a3b      	ldrb	r3, [r7, #8]
 8000634:	b21b      	sxth	r3, r3
 8000636:	4313      	orrs	r3, r2
 8000638:	b21b      	sxth	r3, r3
 800063a:	b29b      	uxth	r3, r3
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000078 	.word	0x20000078

08000648 <enableSensor>:

void enableSensor(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 800064c:	2101      	movs	r1, #1
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff ffb2 	bl	80005b8 <write8>
    HAL_Delay(3);
 8000654:	2003      	movs	r0, #3
 8000656:	f000 f9f7 	bl	8000a48 <HAL_Delay>
    write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 800065a:	2103      	movs	r1, #3
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff ffab 	bl	80005b8 <write8>
    HAL_Delay(50);
 8000662:	2032      	movs	r0, #50	; 0x32
 8000664:	f000 f9f0 	bl	8000a48 <HAL_Delay>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <getRGB>:

void getRGB(uint16_t *r, uint16_t *g, uint16_t *b) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
    *r = read16(TCS34725_RDATAL);
 8000678:	2016      	movs	r0, #22
 800067a:	f7ff ffbb 	bl	80005f4 <read16>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	801a      	strh	r2, [r3, #0]
    *g = read16(TCS34725_GDATAL);
 8000686:	2018      	movs	r0, #24
 8000688:	f7ff ffb4 	bl	80005f4 <read16>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	801a      	strh	r2, [r3, #0]
    *b = read16(TCS34725_BDATAL);
 8000694:	201a      	movs	r0, #26
 8000696:	f7ff ffad 	bl	80005f4 <read16>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	801a      	strh	r2, [r3, #0]
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ae:	b672      	cpsid	i
}
 80006b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <Error_Handler+0x8>

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x44>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_MspInit+0x44>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_MspInit+0x44>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x44>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_MspInit+0x44>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_MspInit+0x44>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006ea:	2007      	movs	r0, #7
 80006ec:	f000 fa82 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a26      	ldr	r2, [pc, #152]	; (80007b4 <HAL_I2C_MspInit+0xb8>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d145      	bne.n	80007aa <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a25      	ldr	r2, [pc, #148]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a1f      	ldr	r2, [pc, #124]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 800073c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800074e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000754:	2312      	movs	r3, #18
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000760:	2304      	movs	r3, #4
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076e:	f000 fa75 	bl	8000c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000776:	2312      	movs	r3, #18
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000782:	2304      	movs	r3, #4
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <HAL_I2C_MspInit+0xc0>)
 800078e:	f000 fa65 	bl	8000c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 8000798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007aa:	bf00      	nop
 80007ac:	3728      	adds	r7, #40	; 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40005400 	.word	0x40005400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000400 	.word	0x48000400

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_UART_MspInit+0x7c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d128      	bne.n	8000834 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_UART_MspInit+0x80>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <HAL_UART_MspInit+0x80>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_UART_MspInit+0x80>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_UART_MspInit+0x80>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_UART_MspInit+0x80>)
 8000800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_UART_MspInit+0x80>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000812:	230c      	movs	r3, #12
 8000814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000822:	2307      	movs	r3, #7
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f000 fa14 	bl	8000c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40004400 	.word	0x40004400
 8000840:	40021000 	.word	0x40021000

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f8ba 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f003 f934 	bl	8003b34 <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20003000 	.word	0x20003000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	20000154 	.word	0x20000154
 8000900:	200002a8 	.word	0x200002a8

08000904 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000960 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800092c:	f7ff ffea 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <LoopForever+0x6>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LoopForever+0xe>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	; (8000974 <LoopForever+0x16>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000956:	f003 f8f3 	bl	8003b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800095a:	f7ff fc91 	bl	8000280 <main>

0800095e <LoopForever>:

LoopForever:
    b LoopForever
 800095e:	e7fe      	b.n	800095e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000960:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800096c:	08004504 	.word	0x08004504
  ldr r2, =_sbss
 8000970:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000974:	200002a4 	.word	0x200002a4

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f931 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f808 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fe8c 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x54>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x58>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f93b 	bl	8000c42 <HAL_SYSTICK_Config>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00e      	b.n	80009f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d80a      	bhi.n	80009f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f000 f911 	bl	8000c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_InitTick+0x5c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x20>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x24>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_IncTick+0x24>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000158 	.word	0x20000158

08000a30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_GetTick+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000158 	.word	0x20000158

08000a48 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a50:	f7ff ffee 	bl	8000a30 <HAL_GetTick>
 8000a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a60:	d005      	beq.n	8000a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_Delay+0x44>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a6e:	bf00      	nop
 8000a70:	f7ff ffde 	bl	8000a30 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d8f7      	bhi.n	8000a70 <HAL_Delay+0x28>
  {
  }
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc0:	d301      	bcc.n	8000bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00f      	b.n	8000be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <SysTick_Config+0x40>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f7ff ff8e 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x40>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff47 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff5c 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff8e 	bl	8000b48 <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5d 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffb0 	bl	8000bb0 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	e14e      	b.n	8000f0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 8140 	beq.w	8000f04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d005      	beq.n	8000c9c <HAL_GPIO_Init+0x40>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d130      	bne.n	8000cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	091b      	lsrs	r3, r3, #4
 8000ce8:	f003 0201 	and.w	r2, r3, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d017      	beq.n	8000d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d123      	bne.n	8000d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	6939      	ldr	r1, [r7, #16]
 8000d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0203 	and.w	r2, r3, #3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 809a 	beq.w	8000f04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd0:	4b55      	ldr	r3, [pc, #340]	; (8000f28 <HAL_GPIO_Init+0x2cc>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a54      	ldr	r2, [pc, #336]	; (8000f28 <HAL_GPIO_Init+0x2cc>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b52      	ldr	r3, [pc, #328]	; (8000f28 <HAL_GPIO_Init+0x2cc>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000de8:	4a50      	ldr	r2, [pc, #320]	; (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e12:	d013      	beq.n	8000e3c <HAL_GPIO_Init+0x1e0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a46      	ldr	r2, [pc, #280]	; (8000f30 <HAL_GPIO_Init+0x2d4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d00d      	beq.n	8000e38 <HAL_GPIO_Init+0x1dc>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a45      	ldr	r2, [pc, #276]	; (8000f34 <HAL_GPIO_Init+0x2d8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d007      	beq.n	8000e34 <HAL_GPIO_Init+0x1d8>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a44      	ldr	r2, [pc, #272]	; (8000f38 <HAL_GPIO_Init+0x2dc>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d101      	bne.n	8000e30 <HAL_GPIO_Init+0x1d4>
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e006      	b.n	8000e3e <HAL_GPIO_Init+0x1e2>
 8000e30:	2305      	movs	r3, #5
 8000e32:	e004      	b.n	8000e3e <HAL_GPIO_Init+0x1e2>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e002      	b.n	8000e3e <HAL_GPIO_Init+0x1e2>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <HAL_GPIO_Init+0x1e2>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	f002 0203 	and.w	r2, r2, #3
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	4093      	lsls	r3, r2
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e4e:	4937      	ldr	r1, [pc, #220]	; (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5c:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <HAL_GPIO_Init+0x2e0>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e80:	4a2e      	ldr	r2, [pc, #184]	; (8000f3c <HAL_GPIO_Init+0x2e0>)
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e86:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <HAL_GPIO_Init+0x2e0>)
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eaa:	4a24      	ldr	r2, [pc, #144]	; (8000f3c <HAL_GPIO_Init+0x2e0>)
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <HAL_GPIO_Init+0x2e0>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ed4:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_GPIO_Init+0x2e0>)
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_GPIO_Init+0x2e0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <HAL_GPIO_Init+0x2e0>)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa22 f303 	lsr.w	r3, r2, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f47f aea9 	bne.w	8000c6c <HAL_GPIO_Init+0x10>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	bf00      	nop
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	48000400 	.word	0x48000400
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000c00 	.word	0x48000c00
 8000f3c:	40010400 	.word	0x40010400

08000f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f50:	787b      	ldrb	r3, [r7, #1]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e08d      	b.n	800109e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d106      	bne.n	8000f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff fbb0 	bl	80006fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2224      	movs	r2, #36	; 0x24
 8000fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0201 	bic.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d107      	bne.n	8000fea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	e006      	b.n	8000ff8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ff6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d108      	bne.n	8001012 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	e007      	b.n	8001022 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001020:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001034:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001044:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691a      	ldr	r2, [r3, #16]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69d9      	ldr	r1, [r3, #28]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1a      	ldr	r2, [r3, #32]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	430a      	orrs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0201 	orr.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2220      	movs	r2, #32
 800108a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	461a      	mov	r2, r3
 80010b4:	460b      	mov	r3, r1
 80010b6:	817b      	strh	r3, [r7, #10]
 80010b8:	4613      	mov	r3, r2
 80010ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b20      	cmp	r3, #32
 80010c6:	f040 80fd 	bne.w	80012c4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_I2C_Master_Transmit+0x30>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e0f6      	b.n	80012c6 <HAL_I2C_Master_Transmit+0x21e>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010e0:	f7ff fca6 	bl	8000a30 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2319      	movs	r3, #25
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 fa0a 	bl	800150c <I2C_WaitOnFlagUntilTimeout>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e0e1      	b.n	80012c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2221      	movs	r2, #33	; 0x21
 8001106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2210      	movs	r2, #16
 800110e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	893a      	ldrh	r2, [r7, #8]
 8001122:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800112e:	b29b      	uxth	r3, r3
 8001130:	2bff      	cmp	r3, #255	; 0xff
 8001132:	d906      	bls.n	8001142 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	22ff      	movs	r2, #255	; 0xff
 8001138:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800113a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e007      	b.n	8001152 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001146:	b29a      	uxth	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800114c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001150:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001156:	2b00      	cmp	r3, #0
 8001158:	d024      	beq.n	80011a4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001174:	b29b      	uxth	r3, r3
 8001176:	3b01      	subs	r3, #1
 8001178:	b29a      	uxth	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001182:	3b01      	subs	r3, #1
 8001184:	b29a      	uxth	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800118e:	b2db      	uxtb	r3, r3
 8001190:	3301      	adds	r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	8979      	ldrh	r1, [r7, #10]
 8001196:	4b4e      	ldr	r3, [pc, #312]	; (80012d0 <HAL_I2C_Master_Transmit+0x228>)
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f000 fc05 	bl	80019ac <I2C_TransferConfig>
 80011a2:	e066      	b.n	8001272 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	8979      	ldrh	r1, [r7, #10]
 80011ac:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <HAL_I2C_Master_Transmit+0x228>)
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f000 fbfa 	bl	80019ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80011b8:	e05b      	b.n	8001272 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	6a39      	ldr	r1, [r7, #32]
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 f9fd 	bl	80015be <I2C_WaitOnTXISFlagUntilTimeout>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e07b      	b.n	80012c6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f6:	3b01      	subs	r3, #1
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001202:	b29b      	uxth	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d034      	beq.n	8001272 <HAL_I2C_Master_Transmit+0x1ca>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800120c:	2b00      	cmp	r3, #0
 800120e:	d130      	bne.n	8001272 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	2200      	movs	r2, #0
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 f976 	bl	800150c <I2C_WaitOnFlagUntilTimeout>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e04d      	b.n	80012c6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122e:	b29b      	uxth	r3, r3
 8001230:	2bff      	cmp	r3, #255	; 0xff
 8001232:	d90e      	bls.n	8001252 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	22ff      	movs	r2, #255	; 0xff
 8001238:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123e:	b2da      	uxtb	r2, r3
 8001240:	8979      	ldrh	r1, [r7, #10]
 8001242:	2300      	movs	r3, #0
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 fbae 	bl	80019ac <I2C_TransferConfig>
 8001250:	e00f      	b.n	8001272 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001256:	b29a      	uxth	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001260:	b2da      	uxtb	r2, r3
 8001262:	8979      	ldrh	r1, [r7, #10]
 8001264:	2300      	movs	r3, #0
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 fb9d 	bl	80019ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001276:	b29b      	uxth	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d19e      	bne.n	80011ba <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	6a39      	ldr	r1, [r7, #32]
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f000 f9e3 	bl	800164c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e01a      	b.n	80012c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2220      	movs	r2, #32
 8001296:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6859      	ldr	r1, [r3, #4]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_I2C_Master_Transmit+0x22c>)
 80012a4:	400b      	ands	r3, r1
 80012a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2220      	movs	r2, #32
 80012ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e000      	b.n	80012c6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80012c4:	2302      	movs	r3, #2
  }
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	80002000 	.word	0x80002000
 80012d4:	fe00e800 	.word	0xfe00e800

080012d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af02      	add	r7, sp, #8
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	461a      	mov	r2, r3
 80012e4:	460b      	mov	r3, r1
 80012e6:	817b      	strh	r3, [r7, #10]
 80012e8:	4613      	mov	r3, r2
 80012ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b20      	cmp	r3, #32
 80012f6:	f040 80db 	bne.w	80014b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_I2C_Master_Receive+0x30>
 8001304:	2302      	movs	r3, #2
 8001306:	e0d4      	b.n	80014b2 <HAL_I2C_Master_Receive+0x1da>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001310:	f7ff fb8e 	bl	8000a30 <HAL_GetTick>
 8001314:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2319      	movs	r3, #25
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f8f2 	bl	800150c <I2C_WaitOnFlagUntilTimeout>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e0bf      	b.n	80014b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2222      	movs	r2, #34	; 0x22
 8001336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2210      	movs	r2, #16
 800133e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	893a      	ldrh	r2, [r7, #8]
 8001352:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135e:	b29b      	uxth	r3, r3
 8001360:	2bff      	cmp	r3, #255	; 0xff
 8001362:	d90e      	bls.n	8001382 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2201      	movs	r2, #1
 8001368:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136e:	b2da      	uxtb	r2, r3
 8001370:	8979      	ldrh	r1, [r7, #10]
 8001372:	4b52      	ldr	r3, [pc, #328]	; (80014bc <HAL_I2C_Master_Receive+0x1e4>)
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 fb16 	bl	80019ac <I2C_TransferConfig>
 8001380:	e06d      	b.n	800145e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001386:	b29a      	uxth	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001390:	b2da      	uxtb	r2, r3
 8001392:	8979      	ldrh	r1, [r7, #10]
 8001394:	4b49      	ldr	r3, [pc, #292]	; (80014bc <HAL_I2C_Master_Receive+0x1e4>)
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f000 fb05 	bl	80019ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80013a2:	e05c      	b.n	800145e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	6a39      	ldr	r1, [r7, #32]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 f993 	bl	80016d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e07c      	b.n	80014b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d034      	beq.n	800145e <HAL_I2C_Master_Receive+0x186>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d130      	bne.n	800145e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	2200      	movs	r2, #0
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f880 	bl	800150c <I2C_WaitOnFlagUntilTimeout>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e04d      	b.n	80014b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141a:	b29b      	uxth	r3, r3
 800141c:	2bff      	cmp	r3, #255	; 0xff
 800141e:	d90e      	bls.n	800143e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142a:	b2da      	uxtb	r2, r3
 800142c:	8979      	ldrh	r1, [r7, #10]
 800142e:	2300      	movs	r3, #0
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 fab8 	bl	80019ac <I2C_TransferConfig>
 800143c:	e00f      	b.n	800145e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144c:	b2da      	uxtb	r2, r3
 800144e:	8979      	ldrh	r1, [r7, #10]
 8001450:	2300      	movs	r3, #0
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 faa7 	bl	80019ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001462:	b29b      	uxth	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d19d      	bne.n	80013a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	6a39      	ldr	r1, [r7, #32]
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 f8ed 	bl	800164c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e01a      	b.n	80014b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2220      	movs	r2, #32
 8001482:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6859      	ldr	r1, [r3, #4]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_I2C_Master_Receive+0x1e8>)
 8001490:	400b      	ands	r3, r1
 8001492:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2220      	movs	r2, #32
 8001498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e000      	b.n	80014b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80014b0:	2302      	movs	r3, #2
  }
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	80002400 	.word	0x80002400
 80014c0:	fe00e800 	.word	0xfe00e800

080014c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d103      	bne.n	80014e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d007      	beq.n	8001500 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	619a      	str	r2, [r3, #24]
  }
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4613      	mov	r3, r2
 800151a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800151c:	e03b      	b.n	8001596 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	6839      	ldr	r1, [r7, #0]
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 f962 	bl	80017ec <I2C_IsErrorOccurred>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e041      	b.n	80015b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d02d      	beq.n	8001596 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800153a:	f7ff fa79 	bl	8000a30 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d302      	bcc.n	8001550 <I2C_WaitOnFlagUntilTimeout+0x44>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d122      	bne.n	8001596 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	4013      	ands	r3, r2
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	429a      	cmp	r2, r3
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	429a      	cmp	r2, r3
 800156c:	d113      	bne.n	8001596 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f043 0220 	orr.w	r2, r3, #32
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2220      	movs	r2, #32
 800157e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4013      	ands	r3, r2
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	bf0c      	ite	eq
 80015a6:	2301      	moveq	r3, #1
 80015a8:	2300      	movne	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d0b4      	beq.n	800151e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015ca:	e033      	b.n	8001634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 f90b 	bl	80017ec <I2C_IsErrorOccurred>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e031      	b.n	8001644 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e6:	d025      	beq.n	8001634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015e8:	f7ff fa22 	bl	8000a30 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d302      	bcc.n	80015fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d11a      	bne.n	8001634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b02      	cmp	r3, #2
 800160a:	d013      	beq.n	8001634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	f043 0220 	orr.w	r2, r3, #32
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2220      	movs	r2, #32
 800161c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e007      	b.n	8001644 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d1c4      	bne.n	80015cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001658:	e02f      	b.n	80016ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f8c4 	bl	80017ec <I2C_IsErrorOccurred>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e02d      	b.n	80016ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800166e:	f7ff f9df 	bl	8000a30 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	429a      	cmp	r2, r3
 800167c:	d302      	bcc.n	8001684 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d11a      	bne.n	80016ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	2b20      	cmp	r3, #32
 8001690:	d013      	beq.n	80016ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f043 0220 	orr.w	r2, r3, #32
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2220      	movs	r2, #32
 80016a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e007      	b.n	80016ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	d1c8      	bne.n	800165a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80016e4:	e071      	b.n	80017ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f87e 	bl	80017ec <I2C_IsErrorOccurred>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	2b20      	cmp	r3, #32
 8001706:	d13b      	bne.n	8001780 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d138      	bne.n	8001780 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b04      	cmp	r3, #4
 800171a:	d105      	bne.n	8001728 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	2b10      	cmp	r3, #16
 8001734:	d121      	bne.n	800177a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2210      	movs	r2, #16
 800173c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2204      	movs	r2, #4
 8001742:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2220      	movs	r2, #32
 800174a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6859      	ldr	r1, [r3, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001758:	400b      	ands	r3, r1
 800175a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2220      	movs	r2, #32
 8001760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	75fb      	strb	r3, [r7, #23]
 8001778:	e002      	b.n	8001780 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001780:	f7ff f956 	bl	8000a30 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	d302      	bcc.n	8001796 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d119      	bne.n	80017ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d116      	bne.n	80017ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d00f      	beq.n	80017ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f043 0220 	orr.w	r2, r3, #32
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2220      	movs	r2, #32
 80017ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d002      	beq.n	80017de <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d083      	beq.n	80016e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80017de:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	fe00e800 	.word	0xfe00e800

080017ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b00      	cmp	r3, #0
 8001816:	d068      	beq.n	80018ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2210      	movs	r2, #16
 800181e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001820:	e049      	b.n	80018b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d045      	beq.n	80018b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800182a:	f7ff f901 	bl	8000a30 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	429a      	cmp	r2, r3
 8001838:	d302      	bcc.n	8001840 <I2C_IsErrorOccurred+0x54>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d13a      	bne.n	80018b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001852:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800185e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001862:	d121      	bne.n	80018a8 <I2C_IsErrorOccurred+0xbc>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800186a:	d01d      	beq.n	80018a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2b20      	cmp	r3, #32
 8001870:	d01a      	beq.n	80018a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001880:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001882:	f7ff f8d5 	bl	8000a30 <HAL_GetTick>
 8001886:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001888:	e00e      	b.n	80018a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800188a:	f7ff f8d1 	bl	8000a30 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b19      	cmp	r3, #25
 8001896:	d907      	bls.n	80018a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	f043 0320 	orr.w	r3, r3, #32
 800189e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80018a6:	e006      	b.n	80018b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	2b20      	cmp	r3, #32
 80018b4:	d1e9      	bne.n	800188a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b20      	cmp	r3, #32
 80018c2:	d003      	beq.n	80018cc <I2C_IsErrorOccurred+0xe0>
 80018c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0aa      	beq.n	8001822 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80018cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2220      	movs	r2, #32
 80018da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00b      	beq.n	8001936 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800192e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00b      	beq.n	8001958 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001950:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01c      	beq.n	800199a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff fdaf 	bl	80014c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <I2C_IsErrorOccurred+0x1bc>)
 8001972:	400b      	ands	r3, r1
 8001974:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	431a      	orrs	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2220      	movs	r2, #32
 8001986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800199a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	fe00e800 	.word	0xfe00e800

080019ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	817b      	strh	r3, [r7, #10]
 80019ba:	4613      	mov	r3, r2
 80019bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019be:	897b      	ldrh	r3, [r7, #10]
 80019c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019c4:	7a7b      	ldrb	r3, [r7, #9]
 80019c6:	041b      	lsls	r3, r3, #16
 80019c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	0d5b      	lsrs	r3, r3, #21
 80019e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <I2C_TransferConfig+0x60>)
 80019ec:	430b      	orrs	r3, r1
 80019ee:	43db      	mvns	r3, r3
 80019f0:	ea02 0103 	and.w	r1, r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	03ff63ff 	.word	0x03ff63ff

08001a10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	d138      	bne.n	8001a98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e032      	b.n	8001a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2224      	movs	r2, #36	; 0x24
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6819      	ldr	r1, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e000      	b.n	8001a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a98:	2302      	movs	r3, #2
  }
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b20      	cmp	r3, #32
 8001aba:	d139      	bne.n	8001b30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e033      	b.n	8001b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2224      	movs	r2, #36	; 0x24
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001af8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e000      	b.n	8001b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
  }
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	f001 b823 	b.w	8002bac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 817d 	beq.w	8001e76 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b7c:	4bbc      	ldr	r3, [pc, #752]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d00c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b88:	4bb9      	ldr	r3, [pc, #740]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d15c      	bne.n	8001c4e <HAL_RCC_OscConfig+0x10e>
 8001b94:	4bb6      	ldr	r3, [pc, #728]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	d155      	bne.n	8001c4e <HAL_RCC_OscConfig+0x10e>
 8001ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	095b      	lsrs	r3, r3, #5
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d102      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x94>
 8001bce:	4ba8      	ldr	r3, [pc, #672]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	e015      	b.n	8001c00 <HAL_RCC_OscConfig+0xc0>
 8001bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001bf0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001bfc:	4b9c      	ldr	r3, [pc, #624]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c04:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c0c:	fa92 f2a2 	rbit	r2, r2
 8001c10:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c14:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c18:	fab2 f282 	clz	r2, r2
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f042 0220 	orr.w	r2, r2, #32
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	f002 021f 	and.w	r2, r2, #31
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 811f 	beq.w	8001e74 <HAL_RCC_OscConfig+0x334>
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 8116 	bne.w	8001e74 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f000 bfaf 	b.w	8002bac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x12e>
 8001c60:	4b83      	ldr	r3, [pc, #524]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a82      	ldr	r2, [pc, #520]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e036      	b.n	8001cdc <HAL_RCC_OscConfig+0x19c>
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x158>
 8001c7e:	4b7c      	ldr	r3, [pc, #496]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a7b      	ldr	r2, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b79      	ldr	r3, [pc, #484]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a78      	ldr	r2, [pc, #480]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e021      	b.n	8001cdc <HAL_RCC_OscConfig+0x19c>
 8001c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x184>
 8001caa:	4b71      	ldr	r3, [pc, #452]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a70      	ldr	r2, [pc, #448]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b6e      	ldr	r3, [pc, #440]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6d      	ldr	r2, [pc, #436]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0x19c>
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a69      	ldr	r2, [pc, #420]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a66      	ldr	r2, [pc, #408]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cda:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cdc:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	f023 020f 	bic.w	r2, r3, #15
 8001ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	495f      	ldr	r1, [pc, #380]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d059      	beq.n	8001dba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe fe93 	bl	8000a30 <HAL_GetTick>
 8001d0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe fe8e 	bl	8000a30 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b64      	cmp	r3, #100	; 0x64
 8001d1e:	d902      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	f000 bf43 	b.w	8002bac <HAL_RCC_OscConfig+0x106c>
 8001d26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d102      	bne.n	8001d58 <HAL_RCC_OscConfig+0x218>
 8001d52:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	e015      	b.n	8001d84 <HAL_RCC_OscConfig+0x244>
 8001d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d70:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d74:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d80:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d88:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d8c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d90:	fa92 f2a2 	rbit	r2, r2
 8001d94:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d98:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d9c:	fab2 f282 	clz	r2, r2
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	f042 0220 	orr.w	r2, r2, #32
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	f002 021f 	and.w	r2, r2, #31
 8001dac:	2101      	movs	r1, #1
 8001dae:	fa01 f202 	lsl.w	r2, r1, r2
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ab      	beq.n	8001d10 <HAL_RCC_OscConfig+0x1d0>
 8001db8:	e05d      	b.n	8001e76 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7fe fe39 	bl	8000a30 <HAL_GetTick>
 8001dbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7fe fe34 	bl	8000a30 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b64      	cmp	r3, #100	; 0x64
 8001dd2:	d902      	bls.n	8001dda <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	f000 bee9 	b.w	8002bac <HAL_RCC_OscConfig+0x106c>
 8001dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dde:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001dee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d102      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2cc>
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	e015      	b.n	8001e38 <HAL_RCC_OscConfig+0x2f8>
 8001e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e10:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e24:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e28:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_RCC_OscConfig+0x330>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e3c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e40:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e44:	fa92 f2a2 	rbit	r2, r2
 8001e48:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e4c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e50:	fab2 f282 	clz	r2, r2
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	f042 0220 	orr.w	r2, r2, #32
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	f002 021f 	and.w	r2, r2, #31
 8001e60:	2101      	movs	r1, #1
 8001e62:	fa01 f202 	lsl.w	r2, r1, r2
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1ab      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x284>
 8001e6c:	e003      	b.n	8001e76 <HAL_RCC_OscConfig+0x336>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 817d 	beq.w	8002186 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e8c:	4ba6      	ldr	r3, [pc, #664]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00b      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e98:	4ba3      	ldr	r3, [pc, #652]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d172      	bne.n	8001f8a <HAL_RCC_OscConfig+0x44a>
 8001ea4:	4ba0      	ldr	r3, [pc, #640]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d16c      	bne.n	8001f8a <HAL_RCC_OscConfig+0x44a>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ec2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x3a0>
 8001eda:	4b93      	ldr	r3, [pc, #588]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	e013      	b.n	8001f08 <HAL_RCC_OscConfig+0x3c8>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ef8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f04:	4b88      	ldr	r3, [pc, #544]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f12:	fa92 f2a2 	rbit	r2, r2
 8001f16:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f1a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f1e:	fab2 f282 	clz	r2, r2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f042 0220 	orr.w	r2, r2, #32
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f002 021f 	and.w	r2, r2, #31
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_RCC_OscConfig+0x410>
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d002      	beq.n	8001f50 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f000 be2e 	b.w	8002bac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f50:	4b75      	ldr	r3, [pc, #468]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	21f8      	movs	r1, #248	; 0xf8
 8001f66:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f6e:	fa91 f1a1 	rbit	r1, r1
 8001f72:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f76:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f7a:	fab1 f181 	clz	r1, r1
 8001f7e:	b2c9      	uxtb	r1, r1
 8001f80:	408b      	lsls	r3, r1
 8001f82:	4969      	ldr	r1, [pc, #420]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f88:	e0fd      	b.n	8002186 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8088 	beq.w	80020ac <HAL_RCC_OscConfig+0x56c>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001fae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fd32 	bl	8000a30 <HAL_GetTick>
 8001fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7fe fd2d 	bl	8000a30 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d902      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	f000 bde2 	b.w	8002bac <HAL_RCC_OscConfig+0x106c>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ffa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <HAL_RCC_OscConfig+0x4d8>
 8002012:	4b45      	ldr	r3, [pc, #276]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	e013      	b.n	8002040 <HAL_RCC_OscConfig+0x500>
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002030:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800203c:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	2202      	movs	r2, #2
 8002042:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002046:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002052:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f002 021f 	and.w	r2, r2, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0af      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	21f8      	movs	r1, #248	; 0xf8
 8002088:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002090:	fa91 f1a1 	rbit	r1, r1
 8002094:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002098:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800209c:	fab1 f181 	clz	r1, r1
 80020a0:	b2c9      	uxtb	r1, r1
 80020a2:	408b      	lsls	r3, r1
 80020a4:	4920      	ldr	r1, [pc, #128]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
 80020aa:	e06c      	b.n	8002186 <HAL_RCC_OscConfig+0x646>
 80020ac:	2301      	movs	r3, #1
 80020ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80020be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	461a      	mov	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe fcaa 	bl	8000a30 <HAL_GetTick>
 80020dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e2:	f7fe fca5 	bl	8000a30 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d902      	bls.n	80020f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	f000 bd5a 	b.w	8002bac <HAL_RCC_OscConfig+0x106c>
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800210a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d104      	bne.n	800212c <HAL_RCC_OscConfig+0x5ec>
 8002122:	4b01      	ldr	r3, [pc, #4]	; (8002128 <HAL_RCC_OscConfig+0x5e8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	e015      	b.n	8002154 <HAL_RCC_OscConfig+0x614>
 8002128:	40021000 	.word	0x40021000
 800212c:	2302      	movs	r3, #2
 800212e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800213e:	2302      	movs	r3, #2
 8002140:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002144:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002150:	4bc8      	ldr	r3, [pc, #800]	; (8002474 <HAL_RCC_OscConfig+0x934>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2202      	movs	r2, #2
 8002156:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800215a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800215e:	fa92 f2a2 	rbit	r2, r2
 8002162:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002166:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800216a:	fab2 f282 	clz	r2, r2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f042 0220 	orr.w	r2, r2, #32
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	f002 021f 	and.w	r2, r2, #31
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ad      	bne.n	80020e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8110 	beq.w	80023bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800219c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d079      	beq.n	80022a0 <HAL_RCC_OscConfig+0x760>
 80021ac:	2301      	movs	r3, #1
 80021ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80021be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	4bab      	ldr	r3, [pc, #684]	; (8002478 <HAL_RCC_OscConfig+0x938>)
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	461a      	mov	r2, r3
 80021d2:	2301      	movs	r3, #1
 80021d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7fe fc2b 	bl	8000a30 <HAL_GetTick>
 80021da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e0:	f7fe fc26 	bl	8000a30 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d902      	bls.n	80021f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	f000 bcdb 	b.w	8002bac <HAL_RCC_OscConfig+0x106c>
 80021f6:	2302      	movs	r3, #2
 80021f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002210:	2202      	movs	r2, #2
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fa93 f2a3 	rbit	r2, r3
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002234:	2202      	movs	r2, #2
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800224e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002250:	4b88      	ldr	r3, [pc, #544]	; (8002474 <HAL_RCC_OscConfig+0x934>)
 8002252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800225c:	2102      	movs	r1, #2
 800225e:	6019      	str	r1, [r3, #0]
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f1a3 	rbit	r1, r3
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002276:	6019      	str	r1, [r3, #0]
  return result;
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0a0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x6a0>
 800229e:	e08d      	b.n	80023bc <HAL_RCC_OscConfig+0x87c>
 80022a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022c2:	601a      	str	r2, [r3, #0]
  return result;
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b68      	ldr	r3, [pc, #416]	; (8002478 <HAL_RCC_OscConfig+0x938>)
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	461a      	mov	r2, r3
 80022de:	2300      	movs	r3, #0
 80022e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7fe fba5 	bl	8000a30 <HAL_GetTick>
 80022e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ec:	f7fe fba0 	bl	8000a30 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d902      	bls.n	8002302 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	f000 bc55 	b.w	8002bac <HAL_RCC_OscConfig+0x106c>
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800230a:	2202      	movs	r2, #2
 800230c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	fa93 f2a3 	rbit	r2, r3
 800231c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002320:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800232e:	2202      	movs	r2, #2
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002336:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	fa93 f2a3 	rbit	r2, r3
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002352:	2202      	movs	r2, #2
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	fa93 f2a3 	rbit	r2, r3
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800236c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_RCC_OscConfig+0x934>)
 8002370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800237a:	2102      	movs	r1, #2
 800237c:	6019      	str	r1, [r3, #0]
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	fa93 f1a3 	rbit	r1, r3
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002394:	6019      	str	r1, [r3, #0]
  return result;
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	2101      	movs	r1, #1
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d197      	bne.n	80022ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 81a1 	beq.w	8002714 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_RCC_OscConfig+0x934>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d116      	bne.n	8002412 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_RCC_OscConfig+0x934>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	4a22      	ldr	r2, [pc, #136]	; (8002474 <HAL_RCC_OscConfig+0x934>)
 80023ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ee:	61d3      	str	r3, [r2, #28]
 80023f0:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_RCC_OscConfig+0x934>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800240a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_RCC_OscConfig+0x93c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d11a      	bne.n	8002454 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <HAL_RCC_OscConfig+0x93c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a16      	ldr	r2, [pc, #88]	; (800247c <HAL_RCC_OscConfig+0x93c>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7fe fb01 	bl	8000a30 <HAL_GetTick>
 800242e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	e009      	b.n	8002448 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe fafc 	bl	8000a30 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b64      	cmp	r3, #100	; 0x64
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e3b1      	b.n	8002bac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_RCC_OscConfig+0x93c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ef      	beq.n	8002434 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10d      	bne.n	8002480 <HAL_RCC_OscConfig+0x940>
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCC_OscConfig+0x934>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a02      	ldr	r2, [pc, #8]	; (8002474 <HAL_RCC_OscConfig+0x934>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	e03c      	b.n	80024ec <HAL_RCC_OscConfig+0x9ac>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	10908120 	.word	0x10908120
 800247c:	40007000 	.word	0x40007000
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10c      	bne.n	80024aa <HAL_RCC_OscConfig+0x96a>
 8002490:	4bc1      	ldr	r3, [pc, #772]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4ac0      	ldr	r2, [pc, #768]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	4bbe      	ldr	r3, [pc, #760]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4abd      	ldr	r2, [pc, #756]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 80024a2:	f023 0304 	bic.w	r3, r3, #4
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	e020      	b.n	80024ec <HAL_RCC_OscConfig+0x9ac>
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b05      	cmp	r3, #5
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x994>
 80024ba:	4bb7      	ldr	r3, [pc, #732]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4ab6      	ldr	r2, [pc, #728]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	6213      	str	r3, [r2, #32]
 80024c6:	4bb4      	ldr	r3, [pc, #720]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4ab3      	ldr	r2, [pc, #716]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	e00b      	b.n	80024ec <HAL_RCC_OscConfig+0x9ac>
 80024d4:	4bb0      	ldr	r3, [pc, #704]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4aaf      	ldr	r2, [pc, #700]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	6213      	str	r3, [r2, #32]
 80024e0:	4bad      	ldr	r3, [pc, #692]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4aac      	ldr	r2, [pc, #688]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 80024e6:	f023 0304 	bic.w	r3, r3, #4
 80024ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8081 	beq.w	8002600 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7fe fa97 	bl	8000a30 <HAL_GetTick>
 8002502:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002508:	f7fe fa92 	bl	8000a30 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	; 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e345      	b.n	8002bac <HAL_RCC_OscConfig+0x106c>
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002528:	2202      	movs	r2, #2
 800252a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002530:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	fa93 f2a3 	rbit	r2, r3
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800254c:	2202      	movs	r2, #2
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	fa93 f2a3 	rbit	r2, r3
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002566:	601a      	str	r2, [r3, #0]
  return result;
 8002568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002570:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d102      	bne.n	800258c <HAL_RCC_OscConfig+0xa4c>
 8002586:	4b84      	ldr	r3, [pc, #528]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	e013      	b.n	80025b4 <HAL_RCC_OscConfig+0xa74>
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002594:	2202      	movs	r2, #2
 8002596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f2a3 	rbit	r2, r3
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	4b79      	ldr	r3, [pc, #484]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025bc:	2102      	movs	r1, #2
 80025be:	6011      	str	r1, [r2, #0]
 80025c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	fa92 f1a2 	rbit	r1, r2
 80025ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025d6:	6011      	str	r1, [r2, #0]
  return result;
 80025d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025dc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	fab2 f282 	clz	r2, r2
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	f002 021f 	and.w	r2, r2, #31
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d084      	beq.n	8002508 <HAL_RCC_OscConfig+0x9c8>
 80025fe:	e07f      	b.n	8002700 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002600:	f7fe fa16 	bl	8000a30 <HAL_GetTick>
 8002604:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	e00b      	b.n	8002622 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fa11 	bl	8000a30 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e2c4      	b.n	8002bac <HAL_RCC_OscConfig+0x106c>
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800262a:	2202      	movs	r2, #2
 800262c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002640:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800264e:	2202      	movs	r2, #2
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002656:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002668:	601a      	str	r2, [r3, #0]
  return result;
 800266a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002672:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f043 0302 	orr.w	r3, r3, #2
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d102      	bne.n	800268e <HAL_RCC_OscConfig+0xb4e>
 8002688:	4b43      	ldr	r3, [pc, #268]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	e013      	b.n	80026b6 <HAL_RCC_OscConfig+0xb76>
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002696:	2202      	movs	r2, #2
 8002698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	fa93 f2a3 	rbit	r2, r3
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	4b39      	ldr	r3, [pc, #228]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80026be:	2102      	movs	r1, #2
 80026c0:	6011      	str	r1, [r2, #0]
 80026c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	fa92 f1a2 	rbit	r1, r2
 80026d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026d8:	6011      	str	r1, [r2, #0]
  return result;
 80026da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	fab2 f282 	clz	r2, r2
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f002 021f 	and.w	r2, r2, #31
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f202 	lsl.w	r2, r1, r2
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d184      	bne.n	800260a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002700:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	4a22      	ldr	r2, [pc, #136]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 800270e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002712:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8242 	beq.w	8002baa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <HAL_RCC_OscConfig+0xc58>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b08      	cmp	r3, #8
 8002730:	f000 8213 	beq.w	8002b5a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2b02      	cmp	r3, #2
 8002742:	f040 8162 	bne.w	8002a0a <HAL_RCC_OscConfig+0xeca>
 8002746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800274e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fa93 f2a3 	rbit	r2, r3
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800276a:	601a      	str	r2, [r3, #0]
  return result;
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002774:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002780:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	461a      	mov	r2, r3
 8002788:	2300      	movs	r3, #0
 800278a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe f950 	bl	8000a30 <HAL_GetTick>
 8002790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002794:	e00c      	b.n	80027b0 <HAL_RCC_OscConfig+0xc70>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe f948 	bl	8000a30 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1fd      	b.n	8002bac <HAL_RCC_OscConfig+0x106c>
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027d4:	601a      	str	r2, [r3, #0]
  return result;
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d102      	bne.n	80027fa <HAL_RCC_OscConfig+0xcba>
 80027f4:	4bb0      	ldr	r3, [pc, #704]	; (8002ab8 <HAL_RCC_OscConfig+0xf78>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	e027      	b.n	800284a <HAL_RCC_OscConfig+0xd0a>
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	fa93 f2a3 	rbit	r2, r3
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002824:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002832:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	fa93 f2a3 	rbit	r2, r3
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	4b9c      	ldr	r3, [pc, #624]	; (8002ab8 <HAL_RCC_OscConfig+0xf78>)
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800284e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002852:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002856:	6011      	str	r1, [r2, #0]
 8002858:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800285c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	fa92 f1a2 	rbit	r1, r2
 8002866:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800286e:	6011      	str	r1, [r2, #0]
  return result;
 8002870:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002874:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	fab2 f282 	clz	r2, r2
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f042 0220 	orr.w	r2, r2, #32
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f002 021f 	and.w	r2, r2, #31
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f202 	lsl.w	r2, r1, r2
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d182      	bne.n	800279c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0xf78>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800289e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	430b      	orrs	r3, r1
 80028b8:	497f      	ldr	r1, [pc, #508]	; (8002ab8 <HAL_RCC_OscConfig+0xf78>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028e2:	601a      	str	r2, [r3, #0]
  return result;
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028ec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	461a      	mov	r2, r3
 8002900:	2301      	movs	r3, #1
 8002902:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe f894 	bl	8000a30 <HAL_GetTick>
 8002908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800290c:	e009      	b.n	8002922 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe f88f 	bl	8000a30 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e144      	b.n	8002bac <HAL_RCC_OscConfig+0x106c>
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800292a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	fa93 f2a3 	rbit	r2, r3
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002946:	601a      	str	r2, [r3, #0]
  return result;
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002950:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d102      	bne.n	800296c <HAL_RCC_OscConfig+0xe2c>
 8002966:	4b54      	ldr	r3, [pc, #336]	; (8002ab8 <HAL_RCC_OscConfig+0xf78>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	e027      	b.n	80029bc <HAL_RCC_OscConfig+0xe7c>
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	fa93 f2a3 	rbit	r2, r3
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800299a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f2a3 	rbit	r2, r3
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_RCC_OscConfig+0xf78>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029c8:	6011      	str	r1, [r2, #0]
 80029ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	fa92 f1a2 	rbit	r1, r2
 80029d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029dc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029e0:	6011      	str	r1, [r2, #0]
  return result;
 80029e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029e6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	fab2 f282 	clz	r2, r2
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	f042 0220 	orr.w	r2, r2, #32
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	f002 021f 	and.w	r2, r2, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d082      	beq.n	800290e <HAL_RCC_OscConfig+0xdce>
 8002a08:	e0cf      	b.n	8002baa <HAL_RCC_OscConfig+0x106a>
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	fa93 f2a3 	rbit	r2, r3
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a2e:	601a      	str	r2, [r3, #0]
  return result;
 8002a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a34:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fd ffee 	bl	8000a30 <HAL_GetTick>
 8002a54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a58:	e009      	b.n	8002a6e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fd ffe9 	bl	8000a30 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e09e      	b.n	8002bac <HAL_RCC_OscConfig+0x106c>
 8002a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a80:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	fa93 f2a3 	rbit	r2, r3
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a92:	601a      	str	r2, [r3, #0]
  return result;
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d104      	bne.n	8002abc <HAL_RCC_OscConfig+0xf7c>
 8002ab2:	4b01      	ldr	r3, [pc, #4]	; (8002ab8 <HAL_RCC_OscConfig+0xf78>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	e029      	b.n	8002b0c <HAL_RCC_OscConfig+0xfcc>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	fa93 f2a3 	rbit	r2, r3
 8002ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002adc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fa93 f2a3 	rbit	r2, r3
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_RCC_OscConfig+0x1078>)
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b10:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b18:	6011      	str	r1, [r2, #0]
 8002b1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b1e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	fa92 f1a2 	rbit	r1, r2
 8002b28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b2c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b30:	6011      	str	r1, [r2, #0]
  return result;
 8002b32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b36:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f042 0220 	orr.w	r2, r2, #32
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f002 021f 	and.w	r2, r2, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d180      	bne.n	8002a5a <HAL_RCC_OscConfig+0xf1a>
 8002b58:	e027      	b.n	8002baa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e01e      	b.n	8002bac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b6e:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <HAL_RCC_OscConfig+0x1078>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b7a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d10b      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b09e      	sub	sp, #120	; 0x78
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e162      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b90      	ldr	r3, [pc, #576]	; (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d910      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b8d      	ldr	r3, [pc, #564]	; (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	498b      	ldr	r1, [pc, #556]	; (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b89      	ldr	r3, [pc, #548]	; (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e14a      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b82      	ldr	r3, [pc, #520]	; (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	497f      	ldr	r1, [pc, #508]	; (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80dc 	beq.w	8002de8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d13c      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xf6>
 8002c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d102      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xa6>
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	; (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	e00f      	b.n	8002c82 <HAL_RCC_ClockConfig+0xc6>
 8002c62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c74:	663b      	str	r3, [r7, #96]	; 0x60
 8002c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c7e:	4b67      	ldr	r3, [pc, #412]	; (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c86:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c8a:	fa92 f2a2 	rbit	r2, r2
 8002c8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c92:	fab2 f282 	clz	r2, r2
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f042 0220 	orr.w	r2, r2, #32
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f002 021f 	and.w	r2, r2, #31
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d17b      	bne.n	8002da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0f3      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d13c      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x178>
 8002cba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x128>
 8002cde:	4b4f      	ldr	r3, [pc, #316]	; (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	e00f      	b.n	8002d04 <HAL_RCC_ClockConfig+0x148>
 8002ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cf6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d00:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d08:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d0c:	fa92 f2a2 	rbit	r2, r2
 8002d10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d14:	fab2 f282 	clz	r2, r2
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	f042 0220 	orr.w	r2, r2, #32
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	f002 021f 	and.w	r2, r2, #31
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d13a      	bne.n	8002da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0b2      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
 8002d34:	2302      	movs	r3, #2
 8002d36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	095b      	lsrs	r3, r3, #5
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d102      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x1a0>
 8002d56:	4b31      	ldr	r3, [pc, #196]	; (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	e00d      	b.n	8002d78 <HAL_RCC_ClockConfig+0x1bc>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
 8002d68:	2302      	movs	r3, #2
 8002d6a:	623b      	str	r3, [r7, #32]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2202      	movs	r2, #2
 8002d7a:	61ba      	str	r2, [r7, #24]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	fa92 f2a2 	rbit	r2, r2
 8002d82:	617a      	str	r2, [r7, #20]
  return result;
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	fab2 f282 	clz	r2, r2
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	f042 0220 	orr.w	r2, r2, #32
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	f002 021f 	and.w	r2, r2, #31
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e079      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f023 0203 	bic.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	491a      	ldr	r1, [pc, #104]	; (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db8:	f7fd fe3a 	bl	8000a30 <HAL_GetTick>
 8002dbc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc0:	f7fd fe36 	bl	8000a30 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e061      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_RCC_ClockConfig+0x260>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 020c 	and.w	r2, r3, #12
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d1eb      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d214      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 0207 	bic.w	r2, r3, #7
 8002dfe:	4906      	ldr	r1, [pc, #24]	; (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HAL_RCC_ClockConfig+0x25c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e040      	b.n	8002e9a <HAL_RCC_ClockConfig+0x2de>
 8002e18:	40022000 	.word	0x40022000
 8002e1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	491a      	ldr	r1, [pc, #104]	; (8002ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4912      	ldr	r1, [pc, #72]	; (8002ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e5e:	f000 f829 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e62:	4601      	mov	r1, r0
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCC_ClockConfig+0x2e8>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e6c:	22f0      	movs	r2, #240	; 0xf0
 8002e6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	fa92 f2a2 	rbit	r2, r2
 8002e76:	60fa      	str	r2, [r7, #12]
  return result;
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	fab2 f282 	clz	r2, r2
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	40d3      	lsrs	r3, r2
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x2ec>)
 8002e84:	5cd3      	ldrb	r3, [r2, r3]
 8002e86:	fa21 f303 	lsr.w	r3, r1, r3
 8002e8a:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_RCC_ClockConfig+0x2f0>)
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_RCC_ClockConfig+0x2f4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fd88 	bl	80009a8 <HAL_InitTick>
  
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3778      	adds	r7, #120	; 0x78
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	08004490 	.word	0x08004490
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	20000004 	.word	0x20000004

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d002      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d003      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x36>
 8002ee2:	e026      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ee4:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ee6:	613b      	str	r3, [r7, #16]
      break;
 8002ee8:	e026      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	0c9b      	lsrs	r3, r3, #18
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ef4:	5cd3      	ldrb	r3, [r2, r3]
 8002ef6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f02:	5cd3      	ldrb	r3, [r2, r3]
 8002f04:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f10:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e004      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	613b      	str	r3, [r7, #16]
      break;
 8002f30:	e002      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f34:	613b      	str	r3, [r7, #16]
      break;
 8002f36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f38:	693b      	ldr	r3, [r7, #16]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	007a1200 	.word	0x007a1200
 8002f50:	080044a8 	.word	0x080044a8
 8002f54:	080044b8 	.word	0x080044b8
 8002f58:	003d0900 	.word	0x003d0900

08002f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000000 	.word	0x20000000

08002f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f7a:	f7ff ffef 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002f7e:	4601      	mov	r1, r0
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	fa92 f2a2 	rbit	r2, r2
 8002f94:	603a      	str	r2, [r7, #0]
  return result;
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	fab2 f282 	clz	r2, r2
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	40d3      	lsrs	r3, r2
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	080044a0 	.word	0x080044a0

08002fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002fbe:	f7ff ffcd 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002fc2:	4601      	mov	r1, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002fcc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002fd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	fa92 f2a2 	rbit	r2, r2
 8002fd8:	603a      	str	r2, [r7, #0]
  return result;
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	fab2 f282 	clz	r2, r2
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	40d3      	lsrs	r3, r2
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002fe6:	5cd3      	ldrb	r3, [r2, r3]
 8002fe8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	080044a0 	.word	0x080044a0

08002ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b092      	sub	sp, #72	; 0x48
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80cd 	beq.w	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003020:	4b8e      	ldr	r3, [pc, #568]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10e      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302c:	4b8b      	ldr	r3, [pc, #556]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4a8a      	ldr	r2, [pc, #552]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003036:	61d3      	str	r3, [r2, #28]
 8003038:	4b88      	ldr	r3, [pc, #544]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	4b85      	ldr	r3, [pc, #532]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d118      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003056:	4b82      	ldr	r3, [pc, #520]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a81      	ldr	r2, [pc, #516]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003060:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003062:	f7fd fce5 	bl	8000a30 <HAL_GetTick>
 8003066:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	e008      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306a:	f7fd fce1 	bl	8000a30 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b64      	cmp	r3, #100	; 0x64
 8003076:	d901      	bls.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0ea      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	4b78      	ldr	r3, [pc, #480]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003088:	4b74      	ldr	r3, [pc, #464]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003090:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d07d      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d076      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030a6:	4b6d      	ldr	r3, [pc, #436]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b66      	ldr	r3, [pc, #408]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	461a      	mov	r2, r3
 80030d0:	2301      	movs	r3, #1
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	461a      	mov	r2, r3
 80030f4:	2300      	movs	r3, #0
 80030f6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d045      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fd fc92 	bl	8000a30 <HAL_GetTick>
 800310c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310e:	e00a      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003110:	f7fd fc8e 	bl	8000a30 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e095      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003126:	2302      	movs	r3, #2
 8003128:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	fa93 f3a3 	rbit	r3, r3
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	2302      	movs	r3, #2
 8003134:	623b      	str	r3, [r7, #32]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	61fb      	str	r3, [r7, #28]
  return result;
 800313e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f043 0302 	orr.w	r3, r3, #2
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d102      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003154:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	e007      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800315a:	2302      	movs	r3, #2
 800315c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2202      	movs	r2, #2
 800316c:	613a      	str	r2, [r7, #16]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	fa92 f2a2 	rbit	r2, r2
 8003174:	60fa      	str	r2, [r7, #12]
  return result;
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	fab2 f282 	clz	r2, r2
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	f002 021f 	and.w	r2, r2, #31
 8003188:	2101      	movs	r1, #1
 800318a:	fa01 f202 	lsl.w	r2, r1, r2
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0bd      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003194:	4b31      	ldr	r3, [pc, #196]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	492e      	ldr	r1, [pc, #184]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ae:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4a2a      	ldr	r2, [pc, #168]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031c6:	4b25      	ldr	r3, [pc, #148]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	4922      	ldr	r1, [pc, #136]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	f023 0210 	bic.w	r2, r3, #16
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	491a      	ldr	r1, [pc, #104]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003202:	4b16      	ldr	r3, [pc, #88]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	4913      	ldr	r1, [pc, #76]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003210:	4313      	orrs	r3, r2
 8003212:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	490b      	ldr	r1, [pc, #44]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	4313      	orrs	r3, r2
 8003230:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	4904      	ldr	r1, [pc, #16]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	4313      	orrs	r3, r2
 800324e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3748      	adds	r7, #72	; 0x48
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	40007000 	.word	0x40007000
 8003264:	10908100 	.word	0x10908100

08003268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e040      	b.n	80032fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fd fa98 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2224      	movs	r2, #36	; 0x24
 8003294:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f9e8 	bl	8003684 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8af 	bl	8003418 <UART_SetConfig>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e01b      	b.n	80032fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fa67 	bl	80037c8 <UART_CheckIdleState>
 80032fa:	4603      	mov	r3, r0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	; 0x28
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003318:	2b20      	cmp	r3, #32
 800331a:	d178      	bne.n	800340e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_UART_Transmit+0x24>
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e071      	b.n	8003410 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2221      	movs	r2, #33	; 0x21
 8003338:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800333a:	f7fd fb79 	bl	8000a30 <HAL_GetTick>
 800333e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003358:	d108      	bne.n	800336c <HAL_UART_Transmit+0x68>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d104      	bne.n	800336c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	e003      	b.n	8003374 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003374:	e030      	b.n	80033d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2200      	movs	r2, #0
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fac9 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e03c      	b.n	8003410 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033a8:	b292      	uxth	r2, r2
 80033aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	3302      	adds	r3, #2
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	e008      	b.n	80033c6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	781a      	ldrb	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	b292      	uxth	r2, r2
 80033be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	3301      	adds	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1c8      	bne.n	8003376 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2200      	movs	r2, #0
 80033ec:	2140      	movs	r1, #64	; 0x40
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fa92 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d004      	beq.n	8003404 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e005      	b.n	8003410 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	e000      	b.n	8003410 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800340e:	2302      	movs	r3, #2
  }
}
 8003410:	4618      	mov	r0, r3
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4b8a      	ldr	r3, [pc, #552]	; (800366c <UART_SetConfig+0x254>)
 8003444:	4013      	ands	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	6979      	ldr	r1, [r7, #20]
 800344c:	430b      	orrs	r3, r1
 800344e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	4313      	orrs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	430a      	orrs	r2, r1
 8003488:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a78      	ldr	r2, [pc, #480]	; (8003670 <UART_SetConfig+0x258>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d120      	bne.n	80034d6 <UART_SetConfig+0xbe>
 8003494:	4b77      	ldr	r3, [pc, #476]	; (8003674 <UART_SetConfig+0x25c>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b03      	cmp	r3, #3
 800349e:	d817      	bhi.n	80034d0 <UART_SetConfig+0xb8>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <UART_SetConfig+0x90>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034c5 	.word	0x080034c5
 80034b0:	080034cb 	.word	0x080034cb
 80034b4:	080034bf 	.word	0x080034bf
 80034b8:	2300      	movs	r3, #0
 80034ba:	77fb      	strb	r3, [r7, #31]
 80034bc:	e01d      	b.n	80034fa <UART_SetConfig+0xe2>
 80034be:	2302      	movs	r3, #2
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e01a      	b.n	80034fa <UART_SetConfig+0xe2>
 80034c4:	2304      	movs	r3, #4
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e017      	b.n	80034fa <UART_SetConfig+0xe2>
 80034ca:	2308      	movs	r3, #8
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e014      	b.n	80034fa <UART_SetConfig+0xe2>
 80034d0:	2310      	movs	r3, #16
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e011      	b.n	80034fa <UART_SetConfig+0xe2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a67      	ldr	r2, [pc, #412]	; (8003678 <UART_SetConfig+0x260>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d102      	bne.n	80034e6 <UART_SetConfig+0xce>
 80034e0:	2300      	movs	r3, #0
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	e009      	b.n	80034fa <UART_SetConfig+0xe2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a64      	ldr	r2, [pc, #400]	; (800367c <UART_SetConfig+0x264>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d102      	bne.n	80034f6 <UART_SetConfig+0xde>
 80034f0:	2300      	movs	r3, #0
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e001      	b.n	80034fa <UART_SetConfig+0xe2>
 80034f6:	2310      	movs	r3, #16
 80034f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003502:	d15a      	bne.n	80035ba <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003504:	7ffb      	ldrb	r3, [r7, #31]
 8003506:	2b08      	cmp	r3, #8
 8003508:	d827      	bhi.n	800355a <UART_SetConfig+0x142>
 800350a:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <UART_SetConfig+0xf8>)
 800350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003510:	08003535 	.word	0x08003535
 8003514:	0800353d 	.word	0x0800353d
 8003518:	08003545 	.word	0x08003545
 800351c:	0800355b 	.word	0x0800355b
 8003520:	0800354b 	.word	0x0800354b
 8003524:	0800355b 	.word	0x0800355b
 8003528:	0800355b 	.word	0x0800355b
 800352c:	0800355b 	.word	0x0800355b
 8003530:	08003553 	.word	0x08003553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003534:	f7ff fd1e 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 8003538:	61b8      	str	r0, [r7, #24]
        break;
 800353a:	e013      	b.n	8003564 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800353c:	f7ff fd3c 	bl	8002fb8 <HAL_RCC_GetPCLK2Freq>
 8003540:	61b8      	str	r0, [r7, #24]
        break;
 8003542:	e00f      	b.n	8003564 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003544:	4b4e      	ldr	r3, [pc, #312]	; (8003680 <UART_SetConfig+0x268>)
 8003546:	61bb      	str	r3, [r7, #24]
        break;
 8003548:	e00c      	b.n	8003564 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354a:	f7ff fcb3 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 800354e:	61b8      	str	r0, [r7, #24]
        break;
 8003550:	e008      	b.n	8003564 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003556:	61bb      	str	r3, [r7, #24]
        break;
 8003558:	e004      	b.n	8003564 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	77bb      	strb	r3, [r7, #30]
        break;
 8003562:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d074      	beq.n	8003654 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	005a      	lsls	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	441a      	add	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d916      	bls.n	80035b4 <UART_SetConfig+0x19c>
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d212      	bcs.n	80035b4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f023 030f 	bic.w	r3, r3, #15
 8003596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	89fa      	ldrh	r2, [r7, #14]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e04f      	b.n	8003654 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	77bb      	strb	r3, [r7, #30]
 80035b8:	e04c      	b.n	8003654 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ba:	7ffb      	ldrb	r3, [r7, #31]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d828      	bhi.n	8003612 <UART_SetConfig+0x1fa>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x1b0>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003613 	.word	0x08003613
 80035d8:	08003603 	.word	0x08003603
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003613 	.word	0x08003613
 80035e4:	08003613 	.word	0x08003613
 80035e8:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff fcc2 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 80035f0:	61b8      	str	r0, [r7, #24]
        break;
 80035f2:	e013      	b.n	800361c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff fce0 	bl	8002fb8 <HAL_RCC_GetPCLK2Freq>
 80035f8:	61b8      	str	r0, [r7, #24]
        break;
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b20      	ldr	r3, [pc, #128]	; (8003680 <UART_SetConfig+0x268>)
 80035fe:	61bb      	str	r3, [r7, #24]
        break;
 8003600:	e00c      	b.n	800361c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7ff fc57 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8003606:	61b8      	str	r0, [r7, #24]
        break;
 8003608:	e008      	b.n	800361c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	61bb      	str	r3, [r7, #24]
        break;
 8003610:	e004      	b.n	800361c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	77bb      	strb	r3, [r7, #30]
        break;
 800361a:	bf00      	nop
    }

    if (pclk != 0U)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d018      	beq.n	8003654 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	085a      	lsrs	r2, r3, #1
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	441a      	add	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b0f      	cmp	r3, #15
 800363a:	d909      	bls.n	8003650 <UART_SetConfig+0x238>
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003642:	d205      	bcs.n	8003650 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	b29a      	uxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60da      	str	r2, [r3, #12]
 800364e:	e001      	b.n	8003654 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003660:	7fbb      	ldrb	r3, [r7, #30]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	efff69f3 	.word	0xefff69f3
 8003670:	40013800 	.word	0x40013800
 8003674:	40021000 	.word	0x40021000
 8003678:	40004400 	.word	0x40004400
 800367c:	40004800 	.word	0x40004800
 8003680:	007a1200 	.word	0x007a1200

08003684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01a      	beq.n	800379a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003782:	d10a      	bne.n	800379a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b098      	sub	sp, #96	; 0x60
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037d8:	f7fd f92a 	bl	8000a30 <HAL_GetTick>
 80037dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d12e      	bne.n	800384a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f4:	2200      	movs	r2, #0
 80037f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f88c 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d021      	beq.n	800384a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800381a:	653b      	str	r3, [r7, #80]	; 0x50
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003824:	647b      	str	r3, [r7, #68]	; 0x44
 8003826:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003828:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800382a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800382c:	e841 2300 	strex	r3, r2, [r1]
 8003830:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e6      	bne.n	8003806 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e062      	b.n	8003910 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b04      	cmp	r3, #4
 8003856:	d149      	bne.n	80038ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003860:	2200      	movs	r2, #0
 8003862:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f856 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d03c      	beq.n	80038ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	623b      	str	r3, [r7, #32]
   return(result);
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
 8003892:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e6      	bne.n	8003872 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3308      	adds	r3, #8
 80038aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3308      	adds	r3, #8
 80038c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038c4:	61fa      	str	r2, [r7, #28]
 80038c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	69b9      	ldr	r1, [r7, #24]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	617b      	str	r3, [r7, #20]
   return(result);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e5      	bne.n	80038a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e011      	b.n	8003910 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3758      	adds	r7, #88	; 0x58
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003928:	e04f      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d04b      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fd f87d 	bl	8000a30 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <UART_WaitOnFlagUntilTimeout+0x30>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e04e      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d037      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d034      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d031      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d110      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2208      	movs	r2, #8
 800397a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f838 	bl	80039f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2208      	movs	r2, #8
 8003986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e029      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a4:	d111      	bne.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f81e 	bl	80039f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e00f      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4013      	ands	r3, r2
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d0a0      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b095      	sub	sp, #84	; 0x54
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a18:	643b      	str	r3, [r7, #64]	; 0x40
 8003a1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e6      	bne.n	80039fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3308      	adds	r3, #8
 8003a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e5      	bne.n	8003a2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d118      	bne.n	8003a9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f023 0310 	bic.w	r3, r3, #16
 8003a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6979      	ldr	r1, [r7, #20]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	613b      	str	r3, [r7, #16]
   return(result);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e6      	bne.n	8003a68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003aae:	bf00      	nop
 8003ab0:	3754      	adds	r7, #84	; 0x54
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <sniprintf>:
 8003abc:	b40c      	push	{r2, r3}
 8003abe:	b530      	push	{r4, r5, lr}
 8003ac0:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <sniprintf+0x64>)
 8003ac2:	1e0c      	subs	r4, r1, #0
 8003ac4:	681d      	ldr	r5, [r3, #0]
 8003ac6:	b09d      	sub	sp, #116	; 0x74
 8003ac8:	da08      	bge.n	8003adc <sniprintf+0x20>
 8003aca:	238b      	movs	r3, #139	; 0x8b
 8003acc:	602b      	str	r3, [r5, #0]
 8003ace:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad2:	b01d      	add	sp, #116	; 0x74
 8003ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ad8:	b002      	add	sp, #8
 8003ada:	4770      	bx	lr
 8003adc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003ae0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ae4:	bf14      	ite	ne
 8003ae6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003aea:	4623      	moveq	r3, r4
 8003aec:	9304      	str	r3, [sp, #16]
 8003aee:	9307      	str	r3, [sp, #28]
 8003af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003af4:	9002      	str	r0, [sp, #8]
 8003af6:	9006      	str	r0, [sp, #24]
 8003af8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003afc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003afe:	ab21      	add	r3, sp, #132	; 0x84
 8003b00:	a902      	add	r1, sp, #8
 8003b02:	4628      	mov	r0, r5
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	f000 f993 	bl	8003e30 <_svfiprintf_r>
 8003b0a:	1c43      	adds	r3, r0, #1
 8003b0c:	bfbc      	itt	lt
 8003b0e:	238b      	movlt	r3, #139	; 0x8b
 8003b10:	602b      	strlt	r3, [r5, #0]
 8003b12:	2c00      	cmp	r4, #0
 8003b14:	d0dd      	beq.n	8003ad2 <sniprintf+0x16>
 8003b16:	9b02      	ldr	r3, [sp, #8]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	e7d9      	b.n	8003ad2 <sniprintf+0x16>
 8003b1e:	bf00      	nop
 8003b20:	20000058 	.word	0x20000058

08003b24 <memset>:
 8003b24:	4402      	add	r2, r0
 8003b26:	4603      	mov	r3, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <__errno>:
 8003b34:	4b01      	ldr	r3, [pc, #4]	; (8003b3c <__errno+0x8>)
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000058 	.word	0x20000058

08003b40 <__libc_init_array>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4d0d      	ldr	r5, [pc, #52]	; (8003b78 <__libc_init_array+0x38>)
 8003b44:	4c0d      	ldr	r4, [pc, #52]	; (8003b7c <__libc_init_array+0x3c>)
 8003b46:	1b64      	subs	r4, r4, r5
 8003b48:	10a4      	asrs	r4, r4, #2
 8003b4a:	2600      	movs	r6, #0
 8003b4c:	42a6      	cmp	r6, r4
 8003b4e:	d109      	bne.n	8003b64 <__libc_init_array+0x24>
 8003b50:	4d0b      	ldr	r5, [pc, #44]	; (8003b80 <__libc_init_array+0x40>)
 8003b52:	4c0c      	ldr	r4, [pc, #48]	; (8003b84 <__libc_init_array+0x44>)
 8003b54:	f000 fc6a 	bl	800442c <_init>
 8003b58:	1b64      	subs	r4, r4, r5
 8003b5a:	10a4      	asrs	r4, r4, #2
 8003b5c:	2600      	movs	r6, #0
 8003b5e:	42a6      	cmp	r6, r4
 8003b60:	d105      	bne.n	8003b6e <__libc_init_array+0x2e>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b68:	4798      	blx	r3
 8003b6a:	3601      	adds	r6, #1
 8003b6c:	e7ee      	b.n	8003b4c <__libc_init_array+0xc>
 8003b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b72:	4798      	blx	r3
 8003b74:	3601      	adds	r6, #1
 8003b76:	e7f2      	b.n	8003b5e <__libc_init_array+0x1e>
 8003b78:	080044fc 	.word	0x080044fc
 8003b7c:	080044fc 	.word	0x080044fc
 8003b80:	080044fc 	.word	0x080044fc
 8003b84:	08004500 	.word	0x08004500

08003b88 <__retarget_lock_acquire_recursive>:
 8003b88:	4770      	bx	lr

08003b8a <__retarget_lock_release_recursive>:
 8003b8a:	4770      	bx	lr

08003b8c <_free_r>:
 8003b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b8e:	2900      	cmp	r1, #0
 8003b90:	d044      	beq.n	8003c1c <_free_r+0x90>
 8003b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b96:	9001      	str	r0, [sp, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b9e:	bfb8      	it	lt
 8003ba0:	18e4      	addlt	r4, r4, r3
 8003ba2:	f000 f8df 	bl	8003d64 <__malloc_lock>
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <_free_r+0x94>)
 8003ba8:	9801      	ldr	r0, [sp, #4]
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	b933      	cbnz	r3, 8003bbc <_free_r+0x30>
 8003bae:	6063      	str	r3, [r4, #4]
 8003bb0:	6014      	str	r4, [r2, #0]
 8003bb2:	b003      	add	sp, #12
 8003bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bb8:	f000 b8da 	b.w	8003d70 <__malloc_unlock>
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	d908      	bls.n	8003bd2 <_free_r+0x46>
 8003bc0:	6825      	ldr	r5, [r4, #0]
 8003bc2:	1961      	adds	r1, r4, r5
 8003bc4:	428b      	cmp	r3, r1
 8003bc6:	bf01      	itttt	eq
 8003bc8:	6819      	ldreq	r1, [r3, #0]
 8003bca:	685b      	ldreq	r3, [r3, #4]
 8003bcc:	1949      	addeq	r1, r1, r5
 8003bce:	6021      	streq	r1, [r4, #0]
 8003bd0:	e7ed      	b.n	8003bae <_free_r+0x22>
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b10b      	cbz	r3, 8003bdc <_free_r+0x50>
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	d9fa      	bls.n	8003bd2 <_free_r+0x46>
 8003bdc:	6811      	ldr	r1, [r2, #0]
 8003bde:	1855      	adds	r5, r2, r1
 8003be0:	42a5      	cmp	r5, r4
 8003be2:	d10b      	bne.n	8003bfc <_free_r+0x70>
 8003be4:	6824      	ldr	r4, [r4, #0]
 8003be6:	4421      	add	r1, r4
 8003be8:	1854      	adds	r4, r2, r1
 8003bea:	42a3      	cmp	r3, r4
 8003bec:	6011      	str	r1, [r2, #0]
 8003bee:	d1e0      	bne.n	8003bb2 <_free_r+0x26>
 8003bf0:	681c      	ldr	r4, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	6053      	str	r3, [r2, #4]
 8003bf6:	440c      	add	r4, r1
 8003bf8:	6014      	str	r4, [r2, #0]
 8003bfa:	e7da      	b.n	8003bb2 <_free_r+0x26>
 8003bfc:	d902      	bls.n	8003c04 <_free_r+0x78>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	6003      	str	r3, [r0, #0]
 8003c02:	e7d6      	b.n	8003bb2 <_free_r+0x26>
 8003c04:	6825      	ldr	r5, [r4, #0]
 8003c06:	1961      	adds	r1, r4, r5
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	bf04      	itt	eq
 8003c0c:	6819      	ldreq	r1, [r3, #0]
 8003c0e:	685b      	ldreq	r3, [r3, #4]
 8003c10:	6063      	str	r3, [r4, #4]
 8003c12:	bf04      	itt	eq
 8003c14:	1949      	addeq	r1, r1, r5
 8003c16:	6021      	streq	r1, [r4, #0]
 8003c18:	6054      	str	r4, [r2, #4]
 8003c1a:	e7ca      	b.n	8003bb2 <_free_r+0x26>
 8003c1c:	b003      	add	sp, #12
 8003c1e:	bd30      	pop	{r4, r5, pc}
 8003c20:	2000029c 	.word	0x2000029c

08003c24 <sbrk_aligned>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	4e0e      	ldr	r6, [pc, #56]	; (8003c60 <sbrk_aligned+0x3c>)
 8003c28:	460c      	mov	r4, r1
 8003c2a:	6831      	ldr	r1, [r6, #0]
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	b911      	cbnz	r1, 8003c36 <sbrk_aligned+0x12>
 8003c30:	f000 fba6 	bl	8004380 <_sbrk_r>
 8003c34:	6030      	str	r0, [r6, #0]
 8003c36:	4621      	mov	r1, r4
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f000 fba1 	bl	8004380 <_sbrk_r>
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	d00a      	beq.n	8003c58 <sbrk_aligned+0x34>
 8003c42:	1cc4      	adds	r4, r0, #3
 8003c44:	f024 0403 	bic.w	r4, r4, #3
 8003c48:	42a0      	cmp	r0, r4
 8003c4a:	d007      	beq.n	8003c5c <sbrk_aligned+0x38>
 8003c4c:	1a21      	subs	r1, r4, r0
 8003c4e:	4628      	mov	r0, r5
 8003c50:	f000 fb96 	bl	8004380 <_sbrk_r>
 8003c54:	3001      	adds	r0, #1
 8003c56:	d101      	bne.n	8003c5c <sbrk_aligned+0x38>
 8003c58:	f04f 34ff 	mov.w	r4, #4294967295
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	200002a0 	.word	0x200002a0

08003c64 <_malloc_r>:
 8003c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c68:	1ccd      	adds	r5, r1, #3
 8003c6a:	f025 0503 	bic.w	r5, r5, #3
 8003c6e:	3508      	adds	r5, #8
 8003c70:	2d0c      	cmp	r5, #12
 8003c72:	bf38      	it	cc
 8003c74:	250c      	movcc	r5, #12
 8003c76:	2d00      	cmp	r5, #0
 8003c78:	4607      	mov	r7, r0
 8003c7a:	db01      	blt.n	8003c80 <_malloc_r+0x1c>
 8003c7c:	42a9      	cmp	r1, r5
 8003c7e:	d905      	bls.n	8003c8c <_malloc_r+0x28>
 8003c80:	230c      	movs	r3, #12
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	2600      	movs	r6, #0
 8003c86:	4630      	mov	r0, r6
 8003c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d60 <_malloc_r+0xfc>
 8003c90:	f000 f868 	bl	8003d64 <__malloc_lock>
 8003c94:	f8d8 3000 	ldr.w	r3, [r8]
 8003c98:	461c      	mov	r4, r3
 8003c9a:	bb5c      	cbnz	r4, 8003cf4 <_malloc_r+0x90>
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	f7ff ffc0 	bl	8003c24 <sbrk_aligned>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	d155      	bne.n	8003d56 <_malloc_r+0xf2>
 8003caa:	f8d8 4000 	ldr.w	r4, [r8]
 8003cae:	4626      	mov	r6, r4
 8003cb0:	2e00      	cmp	r6, #0
 8003cb2:	d145      	bne.n	8003d40 <_malloc_r+0xdc>
 8003cb4:	2c00      	cmp	r4, #0
 8003cb6:	d048      	beq.n	8003d4a <_malloc_r+0xe6>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	4631      	mov	r1, r6
 8003cbc:	4638      	mov	r0, r7
 8003cbe:	eb04 0903 	add.w	r9, r4, r3
 8003cc2:	f000 fb5d 	bl	8004380 <_sbrk_r>
 8003cc6:	4581      	cmp	r9, r0
 8003cc8:	d13f      	bne.n	8003d4a <_malloc_r+0xe6>
 8003cca:	6821      	ldr	r1, [r4, #0]
 8003ccc:	1a6d      	subs	r5, r5, r1
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	f7ff ffa7 	bl	8003c24 <sbrk_aligned>
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d037      	beq.n	8003d4a <_malloc_r+0xe6>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	442b      	add	r3, r5
 8003cde:	6023      	str	r3, [r4, #0]
 8003ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d038      	beq.n	8003d5a <_malloc_r+0xf6>
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	42a2      	cmp	r2, r4
 8003cec:	d12b      	bne.n	8003d46 <_malloc_r+0xe2>
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	e00f      	b.n	8003d14 <_malloc_r+0xb0>
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	1b52      	subs	r2, r2, r5
 8003cf8:	d41f      	bmi.n	8003d3a <_malloc_r+0xd6>
 8003cfa:	2a0b      	cmp	r2, #11
 8003cfc:	d917      	bls.n	8003d2e <_malloc_r+0xca>
 8003cfe:	1961      	adds	r1, r4, r5
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	6025      	str	r5, [r4, #0]
 8003d04:	bf18      	it	ne
 8003d06:	6059      	strne	r1, [r3, #4]
 8003d08:	6863      	ldr	r3, [r4, #4]
 8003d0a:	bf08      	it	eq
 8003d0c:	f8c8 1000 	streq.w	r1, [r8]
 8003d10:	5162      	str	r2, [r4, r5]
 8003d12:	604b      	str	r3, [r1, #4]
 8003d14:	4638      	mov	r0, r7
 8003d16:	f104 060b 	add.w	r6, r4, #11
 8003d1a:	f000 f829 	bl	8003d70 <__malloc_unlock>
 8003d1e:	f026 0607 	bic.w	r6, r6, #7
 8003d22:	1d23      	adds	r3, r4, #4
 8003d24:	1af2      	subs	r2, r6, r3
 8003d26:	d0ae      	beq.n	8003c86 <_malloc_r+0x22>
 8003d28:	1b9b      	subs	r3, r3, r6
 8003d2a:	50a3      	str	r3, [r4, r2]
 8003d2c:	e7ab      	b.n	8003c86 <_malloc_r+0x22>
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	6862      	ldr	r2, [r4, #4]
 8003d32:	d1dd      	bne.n	8003cf0 <_malloc_r+0x8c>
 8003d34:	f8c8 2000 	str.w	r2, [r8]
 8003d38:	e7ec      	b.n	8003d14 <_malloc_r+0xb0>
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	6864      	ldr	r4, [r4, #4]
 8003d3e:	e7ac      	b.n	8003c9a <_malloc_r+0x36>
 8003d40:	4634      	mov	r4, r6
 8003d42:	6876      	ldr	r6, [r6, #4]
 8003d44:	e7b4      	b.n	8003cb0 <_malloc_r+0x4c>
 8003d46:	4613      	mov	r3, r2
 8003d48:	e7cc      	b.n	8003ce4 <_malloc_r+0x80>
 8003d4a:	230c      	movs	r3, #12
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	4638      	mov	r0, r7
 8003d50:	f000 f80e 	bl	8003d70 <__malloc_unlock>
 8003d54:	e797      	b.n	8003c86 <_malloc_r+0x22>
 8003d56:	6025      	str	r5, [r4, #0]
 8003d58:	e7dc      	b.n	8003d14 <_malloc_r+0xb0>
 8003d5a:	605b      	str	r3, [r3, #4]
 8003d5c:	deff      	udf	#255	; 0xff
 8003d5e:	bf00      	nop
 8003d60:	2000029c 	.word	0x2000029c

08003d64 <__malloc_lock>:
 8003d64:	4801      	ldr	r0, [pc, #4]	; (8003d6c <__malloc_lock+0x8>)
 8003d66:	f7ff bf0f 	b.w	8003b88 <__retarget_lock_acquire_recursive>
 8003d6a:	bf00      	nop
 8003d6c:	20000298 	.word	0x20000298

08003d70 <__malloc_unlock>:
 8003d70:	4801      	ldr	r0, [pc, #4]	; (8003d78 <__malloc_unlock+0x8>)
 8003d72:	f7ff bf0a 	b.w	8003b8a <__retarget_lock_release_recursive>
 8003d76:	bf00      	nop
 8003d78:	20000298 	.word	0x20000298

08003d7c <__ssputs_r>:
 8003d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d80:	688e      	ldr	r6, [r1, #8]
 8003d82:	461f      	mov	r7, r3
 8003d84:	42be      	cmp	r6, r7
 8003d86:	680b      	ldr	r3, [r1, #0]
 8003d88:	4682      	mov	sl, r0
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	4690      	mov	r8, r2
 8003d8e:	d82c      	bhi.n	8003dea <__ssputs_r+0x6e>
 8003d90:	898a      	ldrh	r2, [r1, #12]
 8003d92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d96:	d026      	beq.n	8003de6 <__ssputs_r+0x6a>
 8003d98:	6965      	ldr	r5, [r4, #20]
 8003d9a:	6909      	ldr	r1, [r1, #16]
 8003d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003da0:	eba3 0901 	sub.w	r9, r3, r1
 8003da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003da8:	1c7b      	adds	r3, r7, #1
 8003daa:	444b      	add	r3, r9
 8003dac:	106d      	asrs	r5, r5, #1
 8003dae:	429d      	cmp	r5, r3
 8003db0:	bf38      	it	cc
 8003db2:	461d      	movcc	r5, r3
 8003db4:	0553      	lsls	r3, r2, #21
 8003db6:	d527      	bpl.n	8003e08 <__ssputs_r+0x8c>
 8003db8:	4629      	mov	r1, r5
 8003dba:	f7ff ff53 	bl	8003c64 <_malloc_r>
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	b360      	cbz	r0, 8003e1c <__ssputs_r+0xa0>
 8003dc2:	6921      	ldr	r1, [r4, #16]
 8003dc4:	464a      	mov	r2, r9
 8003dc6:	f000 faeb 	bl	80043a0 <memcpy>
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd4:	81a3      	strh	r3, [r4, #12]
 8003dd6:	6126      	str	r6, [r4, #16]
 8003dd8:	6165      	str	r5, [r4, #20]
 8003dda:	444e      	add	r6, r9
 8003ddc:	eba5 0509 	sub.w	r5, r5, r9
 8003de0:	6026      	str	r6, [r4, #0]
 8003de2:	60a5      	str	r5, [r4, #8]
 8003de4:	463e      	mov	r6, r7
 8003de6:	42be      	cmp	r6, r7
 8003de8:	d900      	bls.n	8003dec <__ssputs_r+0x70>
 8003dea:	463e      	mov	r6, r7
 8003dec:	6820      	ldr	r0, [r4, #0]
 8003dee:	4632      	mov	r2, r6
 8003df0:	4641      	mov	r1, r8
 8003df2:	f000 faab 	bl	800434c <memmove>
 8003df6:	68a3      	ldr	r3, [r4, #8]
 8003df8:	1b9b      	subs	r3, r3, r6
 8003dfa:	60a3      	str	r3, [r4, #8]
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	4433      	add	r3, r6
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	2000      	movs	r0, #0
 8003e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e08:	462a      	mov	r2, r5
 8003e0a:	f000 fad7 	bl	80043bc <_realloc_r>
 8003e0e:	4606      	mov	r6, r0
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d1e0      	bne.n	8003dd6 <__ssputs_r+0x5a>
 8003e14:	6921      	ldr	r1, [r4, #16]
 8003e16:	4650      	mov	r0, sl
 8003e18:	f7ff feb8 	bl	8003b8c <_free_r>
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	f8ca 3000 	str.w	r3, [sl]
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e28:	81a3      	strh	r3, [r4, #12]
 8003e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2e:	e7e9      	b.n	8003e04 <__ssputs_r+0x88>

08003e30 <_svfiprintf_r>:
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	4698      	mov	r8, r3
 8003e36:	898b      	ldrh	r3, [r1, #12]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	b09d      	sub	sp, #116	; 0x74
 8003e3c:	4607      	mov	r7, r0
 8003e3e:	460d      	mov	r5, r1
 8003e40:	4614      	mov	r4, r2
 8003e42:	d50e      	bpl.n	8003e62 <_svfiprintf_r+0x32>
 8003e44:	690b      	ldr	r3, [r1, #16]
 8003e46:	b963      	cbnz	r3, 8003e62 <_svfiprintf_r+0x32>
 8003e48:	2140      	movs	r1, #64	; 0x40
 8003e4a:	f7ff ff0b 	bl	8003c64 <_malloc_r>
 8003e4e:	6028      	str	r0, [r5, #0]
 8003e50:	6128      	str	r0, [r5, #16]
 8003e52:	b920      	cbnz	r0, 8003e5e <_svfiprintf_r+0x2e>
 8003e54:	230c      	movs	r3, #12
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5c:	e0d0      	b.n	8004000 <_svfiprintf_r+0x1d0>
 8003e5e:	2340      	movs	r3, #64	; 0x40
 8003e60:	616b      	str	r3, [r5, #20]
 8003e62:	2300      	movs	r3, #0
 8003e64:	9309      	str	r3, [sp, #36]	; 0x24
 8003e66:	2320      	movs	r3, #32
 8003e68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e70:	2330      	movs	r3, #48	; 0x30
 8003e72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004018 <_svfiprintf_r+0x1e8>
 8003e76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e7a:	f04f 0901 	mov.w	r9, #1
 8003e7e:	4623      	mov	r3, r4
 8003e80:	469a      	mov	sl, r3
 8003e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e86:	b10a      	cbz	r2, 8003e8c <_svfiprintf_r+0x5c>
 8003e88:	2a25      	cmp	r2, #37	; 0x25
 8003e8a:	d1f9      	bne.n	8003e80 <_svfiprintf_r+0x50>
 8003e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e90:	d00b      	beq.n	8003eaa <_svfiprintf_r+0x7a>
 8003e92:	465b      	mov	r3, fp
 8003e94:	4622      	mov	r2, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	4638      	mov	r0, r7
 8003e9a:	f7ff ff6f 	bl	8003d7c <__ssputs_r>
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	f000 80a9 	beq.w	8003ff6 <_svfiprintf_r+0x1c6>
 8003ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ea6:	445a      	add	r2, fp
 8003ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8003eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80a1 	beq.w	8003ff6 <_svfiprintf_r+0x1c6>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ebe:	f10a 0a01 	add.w	sl, sl, #1
 8003ec2:	9304      	str	r3, [sp, #16]
 8003ec4:	9307      	str	r3, [sp, #28]
 8003ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eca:	931a      	str	r3, [sp, #104]	; 0x68
 8003ecc:	4654      	mov	r4, sl
 8003ece:	2205      	movs	r2, #5
 8003ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed4:	4850      	ldr	r0, [pc, #320]	; (8004018 <_svfiprintf_r+0x1e8>)
 8003ed6:	f7fc f983 	bl	80001e0 <memchr>
 8003eda:	9a04      	ldr	r2, [sp, #16]
 8003edc:	b9d8      	cbnz	r0, 8003f16 <_svfiprintf_r+0xe6>
 8003ede:	06d0      	lsls	r0, r2, #27
 8003ee0:	bf44      	itt	mi
 8003ee2:	2320      	movmi	r3, #32
 8003ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ee8:	0711      	lsls	r1, r2, #28
 8003eea:	bf44      	itt	mi
 8003eec:	232b      	movmi	r3, #43	; 0x2b
 8003eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef8:	d015      	beq.n	8003f26 <_svfiprintf_r+0xf6>
 8003efa:	9a07      	ldr	r2, [sp, #28]
 8003efc:	4654      	mov	r4, sl
 8003efe:	2000      	movs	r0, #0
 8003f00:	f04f 0c0a 	mov.w	ip, #10
 8003f04:	4621      	mov	r1, r4
 8003f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f0a:	3b30      	subs	r3, #48	; 0x30
 8003f0c:	2b09      	cmp	r3, #9
 8003f0e:	d94d      	bls.n	8003fac <_svfiprintf_r+0x17c>
 8003f10:	b1b0      	cbz	r0, 8003f40 <_svfiprintf_r+0x110>
 8003f12:	9207      	str	r2, [sp, #28]
 8003f14:	e014      	b.n	8003f40 <_svfiprintf_r+0x110>
 8003f16:	eba0 0308 	sub.w	r3, r0, r8
 8003f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	9304      	str	r3, [sp, #16]
 8003f22:	46a2      	mov	sl, r4
 8003f24:	e7d2      	b.n	8003ecc <_svfiprintf_r+0x9c>
 8003f26:	9b03      	ldr	r3, [sp, #12]
 8003f28:	1d19      	adds	r1, r3, #4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	9103      	str	r1, [sp, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bfbb      	ittet	lt
 8003f32:	425b      	neglt	r3, r3
 8003f34:	f042 0202 	orrlt.w	r2, r2, #2
 8003f38:	9307      	strge	r3, [sp, #28]
 8003f3a:	9307      	strlt	r3, [sp, #28]
 8003f3c:	bfb8      	it	lt
 8003f3e:	9204      	strlt	r2, [sp, #16]
 8003f40:	7823      	ldrb	r3, [r4, #0]
 8003f42:	2b2e      	cmp	r3, #46	; 0x2e
 8003f44:	d10c      	bne.n	8003f60 <_svfiprintf_r+0x130>
 8003f46:	7863      	ldrb	r3, [r4, #1]
 8003f48:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4a:	d134      	bne.n	8003fb6 <_svfiprintf_r+0x186>
 8003f4c:	9b03      	ldr	r3, [sp, #12]
 8003f4e:	1d1a      	adds	r2, r3, #4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	9203      	str	r2, [sp, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bfb8      	it	lt
 8003f58:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f5c:	3402      	adds	r4, #2
 8003f5e:	9305      	str	r3, [sp, #20]
 8003f60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004028 <_svfiprintf_r+0x1f8>
 8003f64:	7821      	ldrb	r1, [r4, #0]
 8003f66:	2203      	movs	r2, #3
 8003f68:	4650      	mov	r0, sl
 8003f6a:	f7fc f939 	bl	80001e0 <memchr>
 8003f6e:	b138      	cbz	r0, 8003f80 <_svfiprintf_r+0x150>
 8003f70:	9b04      	ldr	r3, [sp, #16]
 8003f72:	eba0 000a 	sub.w	r0, r0, sl
 8003f76:	2240      	movs	r2, #64	; 0x40
 8003f78:	4082      	lsls	r2, r0
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	3401      	adds	r4, #1
 8003f7e:	9304      	str	r3, [sp, #16]
 8003f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f84:	4825      	ldr	r0, [pc, #148]	; (800401c <_svfiprintf_r+0x1ec>)
 8003f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f8a:	2206      	movs	r2, #6
 8003f8c:	f7fc f928 	bl	80001e0 <memchr>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d038      	beq.n	8004006 <_svfiprintf_r+0x1d6>
 8003f94:	4b22      	ldr	r3, [pc, #136]	; (8004020 <_svfiprintf_r+0x1f0>)
 8003f96:	bb1b      	cbnz	r3, 8003fe0 <_svfiprintf_r+0x1b0>
 8003f98:	9b03      	ldr	r3, [sp, #12]
 8003f9a:	3307      	adds	r3, #7
 8003f9c:	f023 0307 	bic.w	r3, r3, #7
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	9303      	str	r3, [sp, #12]
 8003fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa6:	4433      	add	r3, r6
 8003fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8003faa:	e768      	b.n	8003e7e <_svfiprintf_r+0x4e>
 8003fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	e7a6      	b.n	8003f04 <_svfiprintf_r+0xd4>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	3401      	adds	r4, #1
 8003fba:	9305      	str	r3, [sp, #20]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f04f 0c0a 	mov.w	ip, #10
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fc8:	3a30      	subs	r2, #48	; 0x30
 8003fca:	2a09      	cmp	r2, #9
 8003fcc:	d903      	bls.n	8003fd6 <_svfiprintf_r+0x1a6>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0c6      	beq.n	8003f60 <_svfiprintf_r+0x130>
 8003fd2:	9105      	str	r1, [sp, #20]
 8003fd4:	e7c4      	b.n	8003f60 <_svfiprintf_r+0x130>
 8003fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fda:	4604      	mov	r4, r0
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e7f0      	b.n	8003fc2 <_svfiprintf_r+0x192>
 8003fe0:	ab03      	add	r3, sp, #12
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	462a      	mov	r2, r5
 8003fe6:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <_svfiprintf_r+0x1f4>)
 8003fe8:	a904      	add	r1, sp, #16
 8003fea:	4638      	mov	r0, r7
 8003fec:	f3af 8000 	nop.w
 8003ff0:	1c42      	adds	r2, r0, #1
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	d1d6      	bne.n	8003fa4 <_svfiprintf_r+0x174>
 8003ff6:	89ab      	ldrh	r3, [r5, #12]
 8003ff8:	065b      	lsls	r3, r3, #25
 8003ffa:	f53f af2d 	bmi.w	8003e58 <_svfiprintf_r+0x28>
 8003ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004000:	b01d      	add	sp, #116	; 0x74
 8004002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004006:	ab03      	add	r3, sp, #12
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	462a      	mov	r2, r5
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <_svfiprintf_r+0x1f4>)
 800400e:	a904      	add	r1, sp, #16
 8004010:	4638      	mov	r0, r7
 8004012:	f000 f879 	bl	8004108 <_printf_i>
 8004016:	e7eb      	b.n	8003ff0 <_svfiprintf_r+0x1c0>
 8004018:	080044c8 	.word	0x080044c8
 800401c:	080044d2 	.word	0x080044d2
 8004020:	00000000 	.word	0x00000000
 8004024:	08003d7d 	.word	0x08003d7d
 8004028:	080044ce 	.word	0x080044ce

0800402c <_printf_common>:
 800402c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004030:	4616      	mov	r6, r2
 8004032:	4699      	mov	r9, r3
 8004034:	688a      	ldr	r2, [r1, #8]
 8004036:	690b      	ldr	r3, [r1, #16]
 8004038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800403c:	4293      	cmp	r3, r2
 800403e:	bfb8      	it	lt
 8004040:	4613      	movlt	r3, r2
 8004042:	6033      	str	r3, [r6, #0]
 8004044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004048:	4607      	mov	r7, r0
 800404a:	460c      	mov	r4, r1
 800404c:	b10a      	cbz	r2, 8004052 <_printf_common+0x26>
 800404e:	3301      	adds	r3, #1
 8004050:	6033      	str	r3, [r6, #0]
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	0699      	lsls	r1, r3, #26
 8004056:	bf42      	ittt	mi
 8004058:	6833      	ldrmi	r3, [r6, #0]
 800405a:	3302      	addmi	r3, #2
 800405c:	6033      	strmi	r3, [r6, #0]
 800405e:	6825      	ldr	r5, [r4, #0]
 8004060:	f015 0506 	ands.w	r5, r5, #6
 8004064:	d106      	bne.n	8004074 <_printf_common+0x48>
 8004066:	f104 0a19 	add.w	sl, r4, #25
 800406a:	68e3      	ldr	r3, [r4, #12]
 800406c:	6832      	ldr	r2, [r6, #0]
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	42ab      	cmp	r3, r5
 8004072:	dc26      	bgt.n	80040c2 <_printf_common+0x96>
 8004074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004078:	1e13      	subs	r3, r2, #0
 800407a:	6822      	ldr	r2, [r4, #0]
 800407c:	bf18      	it	ne
 800407e:	2301      	movne	r3, #1
 8004080:	0692      	lsls	r2, r2, #26
 8004082:	d42b      	bmi.n	80040dc <_printf_common+0xb0>
 8004084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004088:	4649      	mov	r1, r9
 800408a:	4638      	mov	r0, r7
 800408c:	47c0      	blx	r8
 800408e:	3001      	adds	r0, #1
 8004090:	d01e      	beq.n	80040d0 <_printf_common+0xa4>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	6922      	ldr	r2, [r4, #16]
 8004096:	f003 0306 	and.w	r3, r3, #6
 800409a:	2b04      	cmp	r3, #4
 800409c:	bf02      	ittt	eq
 800409e:	68e5      	ldreq	r5, [r4, #12]
 80040a0:	6833      	ldreq	r3, [r6, #0]
 80040a2:	1aed      	subeq	r5, r5, r3
 80040a4:	68a3      	ldr	r3, [r4, #8]
 80040a6:	bf0c      	ite	eq
 80040a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040ac:	2500      	movne	r5, #0
 80040ae:	4293      	cmp	r3, r2
 80040b0:	bfc4      	itt	gt
 80040b2:	1a9b      	subgt	r3, r3, r2
 80040b4:	18ed      	addgt	r5, r5, r3
 80040b6:	2600      	movs	r6, #0
 80040b8:	341a      	adds	r4, #26
 80040ba:	42b5      	cmp	r5, r6
 80040bc:	d11a      	bne.n	80040f4 <_printf_common+0xc8>
 80040be:	2000      	movs	r0, #0
 80040c0:	e008      	b.n	80040d4 <_printf_common+0xa8>
 80040c2:	2301      	movs	r3, #1
 80040c4:	4652      	mov	r2, sl
 80040c6:	4649      	mov	r1, r9
 80040c8:	4638      	mov	r0, r7
 80040ca:	47c0      	blx	r8
 80040cc:	3001      	adds	r0, #1
 80040ce:	d103      	bne.n	80040d8 <_printf_common+0xac>
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295
 80040d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d8:	3501      	adds	r5, #1
 80040da:	e7c6      	b.n	800406a <_printf_common+0x3e>
 80040dc:	18e1      	adds	r1, r4, r3
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	2030      	movs	r0, #48	; 0x30
 80040e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040e6:	4422      	add	r2, r4
 80040e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040f0:	3302      	adds	r3, #2
 80040f2:	e7c7      	b.n	8004084 <_printf_common+0x58>
 80040f4:	2301      	movs	r3, #1
 80040f6:	4622      	mov	r2, r4
 80040f8:	4649      	mov	r1, r9
 80040fa:	4638      	mov	r0, r7
 80040fc:	47c0      	blx	r8
 80040fe:	3001      	adds	r0, #1
 8004100:	d0e6      	beq.n	80040d0 <_printf_common+0xa4>
 8004102:	3601      	adds	r6, #1
 8004104:	e7d9      	b.n	80040ba <_printf_common+0x8e>
	...

08004108 <_printf_i>:
 8004108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	7e0f      	ldrb	r7, [r1, #24]
 800410e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004110:	2f78      	cmp	r7, #120	; 0x78
 8004112:	4691      	mov	r9, r2
 8004114:	4680      	mov	r8, r0
 8004116:	460c      	mov	r4, r1
 8004118:	469a      	mov	sl, r3
 800411a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800411e:	d807      	bhi.n	8004130 <_printf_i+0x28>
 8004120:	2f62      	cmp	r7, #98	; 0x62
 8004122:	d80a      	bhi.n	800413a <_printf_i+0x32>
 8004124:	2f00      	cmp	r7, #0
 8004126:	f000 80d4 	beq.w	80042d2 <_printf_i+0x1ca>
 800412a:	2f58      	cmp	r7, #88	; 0x58
 800412c:	f000 80c0 	beq.w	80042b0 <_printf_i+0x1a8>
 8004130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004138:	e03a      	b.n	80041b0 <_printf_i+0xa8>
 800413a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800413e:	2b15      	cmp	r3, #21
 8004140:	d8f6      	bhi.n	8004130 <_printf_i+0x28>
 8004142:	a101      	add	r1, pc, #4	; (adr r1, 8004148 <_printf_i+0x40>)
 8004144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004148:	080041a1 	.word	0x080041a1
 800414c:	080041b5 	.word	0x080041b5
 8004150:	08004131 	.word	0x08004131
 8004154:	08004131 	.word	0x08004131
 8004158:	08004131 	.word	0x08004131
 800415c:	08004131 	.word	0x08004131
 8004160:	080041b5 	.word	0x080041b5
 8004164:	08004131 	.word	0x08004131
 8004168:	08004131 	.word	0x08004131
 800416c:	08004131 	.word	0x08004131
 8004170:	08004131 	.word	0x08004131
 8004174:	080042b9 	.word	0x080042b9
 8004178:	080041e1 	.word	0x080041e1
 800417c:	08004273 	.word	0x08004273
 8004180:	08004131 	.word	0x08004131
 8004184:	08004131 	.word	0x08004131
 8004188:	080042db 	.word	0x080042db
 800418c:	08004131 	.word	0x08004131
 8004190:	080041e1 	.word	0x080041e1
 8004194:	08004131 	.word	0x08004131
 8004198:	08004131 	.word	0x08004131
 800419c:	0800427b 	.word	0x0800427b
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	1d1a      	adds	r2, r3, #4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	602a      	str	r2, [r5, #0]
 80041a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b0:	2301      	movs	r3, #1
 80041b2:	e09f      	b.n	80042f4 <_printf_i+0x1ec>
 80041b4:	6820      	ldr	r0, [r4, #0]
 80041b6:	682b      	ldr	r3, [r5, #0]
 80041b8:	0607      	lsls	r7, r0, #24
 80041ba:	f103 0104 	add.w	r1, r3, #4
 80041be:	6029      	str	r1, [r5, #0]
 80041c0:	d501      	bpl.n	80041c6 <_printf_i+0xbe>
 80041c2:	681e      	ldr	r6, [r3, #0]
 80041c4:	e003      	b.n	80041ce <_printf_i+0xc6>
 80041c6:	0646      	lsls	r6, r0, #25
 80041c8:	d5fb      	bpl.n	80041c2 <_printf_i+0xba>
 80041ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041ce:	2e00      	cmp	r6, #0
 80041d0:	da03      	bge.n	80041da <_printf_i+0xd2>
 80041d2:	232d      	movs	r3, #45	; 0x2d
 80041d4:	4276      	negs	r6, r6
 80041d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041da:	485a      	ldr	r0, [pc, #360]	; (8004344 <_printf_i+0x23c>)
 80041dc:	230a      	movs	r3, #10
 80041de:	e012      	b.n	8004206 <_printf_i+0xfe>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	6820      	ldr	r0, [r4, #0]
 80041e4:	1d19      	adds	r1, r3, #4
 80041e6:	6029      	str	r1, [r5, #0]
 80041e8:	0605      	lsls	r5, r0, #24
 80041ea:	d501      	bpl.n	80041f0 <_printf_i+0xe8>
 80041ec:	681e      	ldr	r6, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <_printf_i+0xee>
 80041f0:	0641      	lsls	r1, r0, #25
 80041f2:	d5fb      	bpl.n	80041ec <_printf_i+0xe4>
 80041f4:	881e      	ldrh	r6, [r3, #0]
 80041f6:	4853      	ldr	r0, [pc, #332]	; (8004344 <_printf_i+0x23c>)
 80041f8:	2f6f      	cmp	r7, #111	; 0x6f
 80041fa:	bf0c      	ite	eq
 80041fc:	2308      	moveq	r3, #8
 80041fe:	230a      	movne	r3, #10
 8004200:	2100      	movs	r1, #0
 8004202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004206:	6865      	ldr	r5, [r4, #4]
 8004208:	60a5      	str	r5, [r4, #8]
 800420a:	2d00      	cmp	r5, #0
 800420c:	bfa2      	ittt	ge
 800420e:	6821      	ldrge	r1, [r4, #0]
 8004210:	f021 0104 	bicge.w	r1, r1, #4
 8004214:	6021      	strge	r1, [r4, #0]
 8004216:	b90e      	cbnz	r6, 800421c <_printf_i+0x114>
 8004218:	2d00      	cmp	r5, #0
 800421a:	d04b      	beq.n	80042b4 <_printf_i+0x1ac>
 800421c:	4615      	mov	r5, r2
 800421e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004222:	fb03 6711 	mls	r7, r3, r1, r6
 8004226:	5dc7      	ldrb	r7, [r0, r7]
 8004228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800422c:	4637      	mov	r7, r6
 800422e:	42bb      	cmp	r3, r7
 8004230:	460e      	mov	r6, r1
 8004232:	d9f4      	bls.n	800421e <_printf_i+0x116>
 8004234:	2b08      	cmp	r3, #8
 8004236:	d10b      	bne.n	8004250 <_printf_i+0x148>
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	07de      	lsls	r6, r3, #31
 800423c:	d508      	bpl.n	8004250 <_printf_i+0x148>
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	6861      	ldr	r1, [r4, #4]
 8004242:	4299      	cmp	r1, r3
 8004244:	bfde      	ittt	le
 8004246:	2330      	movle	r3, #48	; 0x30
 8004248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800424c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004250:	1b52      	subs	r2, r2, r5
 8004252:	6122      	str	r2, [r4, #16]
 8004254:	f8cd a000 	str.w	sl, [sp]
 8004258:	464b      	mov	r3, r9
 800425a:	aa03      	add	r2, sp, #12
 800425c:	4621      	mov	r1, r4
 800425e:	4640      	mov	r0, r8
 8004260:	f7ff fee4 	bl	800402c <_printf_common>
 8004264:	3001      	adds	r0, #1
 8004266:	d14a      	bne.n	80042fe <_printf_i+0x1f6>
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	b004      	add	sp, #16
 800426e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	f043 0320 	orr.w	r3, r3, #32
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	4833      	ldr	r0, [pc, #204]	; (8004348 <_printf_i+0x240>)
 800427c:	2778      	movs	r7, #120	; 0x78
 800427e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	6829      	ldr	r1, [r5, #0]
 8004286:	061f      	lsls	r7, r3, #24
 8004288:	f851 6b04 	ldr.w	r6, [r1], #4
 800428c:	d402      	bmi.n	8004294 <_printf_i+0x18c>
 800428e:	065f      	lsls	r7, r3, #25
 8004290:	bf48      	it	mi
 8004292:	b2b6      	uxthmi	r6, r6
 8004294:	07df      	lsls	r7, r3, #31
 8004296:	bf48      	it	mi
 8004298:	f043 0320 	orrmi.w	r3, r3, #32
 800429c:	6029      	str	r1, [r5, #0]
 800429e:	bf48      	it	mi
 80042a0:	6023      	strmi	r3, [r4, #0]
 80042a2:	b91e      	cbnz	r6, 80042ac <_printf_i+0x1a4>
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	f023 0320 	bic.w	r3, r3, #32
 80042aa:	6023      	str	r3, [r4, #0]
 80042ac:	2310      	movs	r3, #16
 80042ae:	e7a7      	b.n	8004200 <_printf_i+0xf8>
 80042b0:	4824      	ldr	r0, [pc, #144]	; (8004344 <_printf_i+0x23c>)
 80042b2:	e7e4      	b.n	800427e <_printf_i+0x176>
 80042b4:	4615      	mov	r5, r2
 80042b6:	e7bd      	b.n	8004234 <_printf_i+0x12c>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	6826      	ldr	r6, [r4, #0]
 80042bc:	6961      	ldr	r1, [r4, #20]
 80042be:	1d18      	adds	r0, r3, #4
 80042c0:	6028      	str	r0, [r5, #0]
 80042c2:	0635      	lsls	r5, r6, #24
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	d501      	bpl.n	80042cc <_printf_i+0x1c4>
 80042c8:	6019      	str	r1, [r3, #0]
 80042ca:	e002      	b.n	80042d2 <_printf_i+0x1ca>
 80042cc:	0670      	lsls	r0, r6, #25
 80042ce:	d5fb      	bpl.n	80042c8 <_printf_i+0x1c0>
 80042d0:	8019      	strh	r1, [r3, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	6123      	str	r3, [r4, #16]
 80042d6:	4615      	mov	r5, r2
 80042d8:	e7bc      	b.n	8004254 <_printf_i+0x14c>
 80042da:	682b      	ldr	r3, [r5, #0]
 80042dc:	1d1a      	adds	r2, r3, #4
 80042de:	602a      	str	r2, [r5, #0]
 80042e0:	681d      	ldr	r5, [r3, #0]
 80042e2:	6862      	ldr	r2, [r4, #4]
 80042e4:	2100      	movs	r1, #0
 80042e6:	4628      	mov	r0, r5
 80042e8:	f7fb ff7a 	bl	80001e0 <memchr>
 80042ec:	b108      	cbz	r0, 80042f2 <_printf_i+0x1ea>
 80042ee:	1b40      	subs	r0, r0, r5
 80042f0:	6060      	str	r0, [r4, #4]
 80042f2:	6863      	ldr	r3, [r4, #4]
 80042f4:	6123      	str	r3, [r4, #16]
 80042f6:	2300      	movs	r3, #0
 80042f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fc:	e7aa      	b.n	8004254 <_printf_i+0x14c>
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	462a      	mov	r2, r5
 8004302:	4649      	mov	r1, r9
 8004304:	4640      	mov	r0, r8
 8004306:	47d0      	blx	sl
 8004308:	3001      	adds	r0, #1
 800430a:	d0ad      	beq.n	8004268 <_printf_i+0x160>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	079b      	lsls	r3, r3, #30
 8004310:	d413      	bmi.n	800433a <_printf_i+0x232>
 8004312:	68e0      	ldr	r0, [r4, #12]
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	4298      	cmp	r0, r3
 8004318:	bfb8      	it	lt
 800431a:	4618      	movlt	r0, r3
 800431c:	e7a6      	b.n	800426c <_printf_i+0x164>
 800431e:	2301      	movs	r3, #1
 8004320:	4632      	mov	r2, r6
 8004322:	4649      	mov	r1, r9
 8004324:	4640      	mov	r0, r8
 8004326:	47d0      	blx	sl
 8004328:	3001      	adds	r0, #1
 800432a:	d09d      	beq.n	8004268 <_printf_i+0x160>
 800432c:	3501      	adds	r5, #1
 800432e:	68e3      	ldr	r3, [r4, #12]
 8004330:	9903      	ldr	r1, [sp, #12]
 8004332:	1a5b      	subs	r3, r3, r1
 8004334:	42ab      	cmp	r3, r5
 8004336:	dcf2      	bgt.n	800431e <_printf_i+0x216>
 8004338:	e7eb      	b.n	8004312 <_printf_i+0x20a>
 800433a:	2500      	movs	r5, #0
 800433c:	f104 0619 	add.w	r6, r4, #25
 8004340:	e7f5      	b.n	800432e <_printf_i+0x226>
 8004342:	bf00      	nop
 8004344:	080044d9 	.word	0x080044d9
 8004348:	080044ea 	.word	0x080044ea

0800434c <memmove>:
 800434c:	4288      	cmp	r0, r1
 800434e:	b510      	push	{r4, lr}
 8004350:	eb01 0402 	add.w	r4, r1, r2
 8004354:	d902      	bls.n	800435c <memmove+0x10>
 8004356:	4284      	cmp	r4, r0
 8004358:	4623      	mov	r3, r4
 800435a:	d807      	bhi.n	800436c <memmove+0x20>
 800435c:	1e43      	subs	r3, r0, #1
 800435e:	42a1      	cmp	r1, r4
 8004360:	d008      	beq.n	8004374 <memmove+0x28>
 8004362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800436a:	e7f8      	b.n	800435e <memmove+0x12>
 800436c:	4402      	add	r2, r0
 800436e:	4601      	mov	r1, r0
 8004370:	428a      	cmp	r2, r1
 8004372:	d100      	bne.n	8004376 <memmove+0x2a>
 8004374:	bd10      	pop	{r4, pc}
 8004376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800437a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800437e:	e7f7      	b.n	8004370 <memmove+0x24>

08004380 <_sbrk_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4d06      	ldr	r5, [pc, #24]	; (800439c <_sbrk_r+0x1c>)
 8004384:	2300      	movs	r3, #0
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	602b      	str	r3, [r5, #0]
 800438c:	f7fc fa84 	bl	8000898 <_sbrk>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d102      	bne.n	800439a <_sbrk_r+0x1a>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	b103      	cbz	r3, 800439a <_sbrk_r+0x1a>
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	20000294 	.word	0x20000294

080043a0 <memcpy>:
 80043a0:	440a      	add	r2, r1
 80043a2:	4291      	cmp	r1, r2
 80043a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043a8:	d100      	bne.n	80043ac <memcpy+0xc>
 80043aa:	4770      	bx	lr
 80043ac:	b510      	push	{r4, lr}
 80043ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043b6:	4291      	cmp	r1, r2
 80043b8:	d1f9      	bne.n	80043ae <memcpy+0xe>
 80043ba:	bd10      	pop	{r4, pc}

080043bc <_realloc_r>:
 80043bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c0:	4680      	mov	r8, r0
 80043c2:	4614      	mov	r4, r2
 80043c4:	460e      	mov	r6, r1
 80043c6:	b921      	cbnz	r1, 80043d2 <_realloc_r+0x16>
 80043c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043cc:	4611      	mov	r1, r2
 80043ce:	f7ff bc49 	b.w	8003c64 <_malloc_r>
 80043d2:	b92a      	cbnz	r2, 80043e0 <_realloc_r+0x24>
 80043d4:	f7ff fbda 	bl	8003b8c <_free_r>
 80043d8:	4625      	mov	r5, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e0:	f000 f81b 	bl	800441a <_malloc_usable_size_r>
 80043e4:	4284      	cmp	r4, r0
 80043e6:	4607      	mov	r7, r0
 80043e8:	d802      	bhi.n	80043f0 <_realloc_r+0x34>
 80043ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043ee:	d812      	bhi.n	8004416 <_realloc_r+0x5a>
 80043f0:	4621      	mov	r1, r4
 80043f2:	4640      	mov	r0, r8
 80043f4:	f7ff fc36 	bl	8003c64 <_malloc_r>
 80043f8:	4605      	mov	r5, r0
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d0ed      	beq.n	80043da <_realloc_r+0x1e>
 80043fe:	42bc      	cmp	r4, r7
 8004400:	4622      	mov	r2, r4
 8004402:	4631      	mov	r1, r6
 8004404:	bf28      	it	cs
 8004406:	463a      	movcs	r2, r7
 8004408:	f7ff ffca 	bl	80043a0 <memcpy>
 800440c:	4631      	mov	r1, r6
 800440e:	4640      	mov	r0, r8
 8004410:	f7ff fbbc 	bl	8003b8c <_free_r>
 8004414:	e7e1      	b.n	80043da <_realloc_r+0x1e>
 8004416:	4635      	mov	r5, r6
 8004418:	e7df      	b.n	80043da <_realloc_r+0x1e>

0800441a <_malloc_usable_size_r>:
 800441a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800441e:	1f18      	subs	r0, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	bfbc      	itt	lt
 8004424:	580b      	ldrlt	r3, [r1, r0]
 8004426:	18c0      	addlt	r0, r0, r3
 8004428:	4770      	bx	lr
	...

0800442c <_init>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr

08004438 <_fini>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr
