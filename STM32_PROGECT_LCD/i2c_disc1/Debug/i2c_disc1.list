
i2c_disc1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008550  08008550  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008550  08008550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008558  08008558  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008558  08008558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800855c  0800855c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000984  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a00  20000a00  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017c2d  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b99  00000000  00000000  00037d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001328  00000000  00000000  0003b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ec4  00000000  00000000  0003cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024103  00000000  00000000  0003daa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a9ef  00000000  00000000  00061ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd524  00000000  00000000  0007c596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005370  00000000  00000000  00149abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0014ee2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008510 	.word	0x08008510

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008510 	.word	0x08008510

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint8_t buf[12];
strcpy((char*)buf, "hello!\r\n");
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4a15      	ldr	r2, [pc, #84]	; (8000534 <main+0x60>)
 80004de:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e0:	c303      	stmia	r3!, {r0, r1}
 80004e2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fc7c 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f828 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f94e 	bl	800078c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f0:	f000 f88e 	bl	8000610 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004f4:	f000 f8ba 	bl	800066c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f8:	f000 f8e8 	bl	80006cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004fc:	f007 fbb4 	bl	8007c68 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000500:	f000 f91a 	bl	8000738 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  strcpy((char*)buf, "hello!\r\n");
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <main+0x60>)
 8000508:	ca07      	ldmia	r2, {r0, r1, r2}
 800050a:	c303      	stmia	r3!, {r0, r1}
 800050c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe59 	bl	80001c8 <strlen>
 8000516:	4603      	mov	r3, r0
 8000518:	b29a      	uxth	r2, r3
 800051a:	1d39      	adds	r1, r7, #4
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <main+0x64>)
 8000522:	f004 f857 	bl	80045d4 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000526:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800052a:	f000 fccb 	bl	8000ec4 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800052e:	f007 fbc1 	bl	8007cb4 <MX_USB_HOST_Process>
	  strcpy((char*)buf, "hello!\r\n");
 8000532:	e7e7      	b.n	8000504 <main+0x30>
 8000534:	08008528 	.word	0x08008528
 8000538:	2000018c 	.word	0x2000018c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f007 ff50 	bl	80083f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 f958 	bl	8003878 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ce:	f000 f9db 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2105      	movs	r1, #5
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 fbb9 	bl	8003d68 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 f9c4 	bl	8000988 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_I2C1_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MX_I2C1_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_I2C1_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_I2C1_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_I2C1_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_I2C1_Init+0x50>)
 800064e:	f002 fb2f 	bl	8002cb0 <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f996 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000098 	.word	0x20000098
 8000664:	40005400 	.word	0x40005400
 8000668:	000186a0 	.word	0x000186a0

0800066c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <MX_I2S3_Init+0x58>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_I2S3_Init+0x54>)
 800068c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000690:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000694:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <MX_I2S3_Init+0x5c>)
 8000696:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_I2S3_Init+0x54>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_I2S3_Init+0x54>)
 80006ac:	f002 fc44 	bl	8002f38 <HAL_I2S_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006b6:	f000 f967 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000ec 	.word	0x200000ec
 80006c4:	40003c00 	.word	0x40003c00
 80006c8:	00017700 	.word	0x00017700

080006cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_SPI1_Init+0x64>)
 80006d2:	4a18      	ldr	r2, [pc, #96]	; (8000734 <MX_SPI1_Init+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_SPI1_Init+0x64>)
 8000718:	220a      	movs	r2, #10
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_SPI1_Init+0x64>)
 800071e:	f003 fe83 	bl	8004428 <HAL_SPI_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000728:	f000 f92e 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000134 	.word	0x20000134
 8000734:	40013000 	.word	0x40013000

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_USART2_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000770:	f003 fee3 	bl	800453a <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 f905 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000018c 	.word	0x2000018c
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4b72      	ldr	r3, [pc, #456]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a71      	ldr	r2, [pc, #452]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b6f      	ldr	r3, [pc, #444]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b6b      	ldr	r3, [pc, #428]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a6a      	ldr	r2, [pc, #424]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b68      	ldr	r3, [pc, #416]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b64      	ldr	r3, [pc, #400]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a63      	ldr	r2, [pc, #396]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b61      	ldr	r3, [pc, #388]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b5d      	ldr	r3, [pc, #372]	; (8000970 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a5c      	ldr	r2, [pc, #368]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b5a      	ldr	r3, [pc, #360]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b56      	ldr	r3, [pc, #344]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a55      	ldr	r2, [pc, #340]	; (8000970 <MX_GPIO_Init+0x1e4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b53      	ldr	r3, [pc, #332]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b4f      	ldr	r3, [pc, #316]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a4e      	ldr	r2, [pc, #312]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b4c      	ldr	r3, [pc, #304]	; (8000970 <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4849      	ldr	r0, [pc, #292]	; (8000974 <MX_GPIO_Init+0x1e8>)
 8000850:	f000 fe0a 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4847      	ldr	r0, [pc, #284]	; (8000978 <MX_GPIO_Init+0x1ec>)
 800085a:	f000 fe05 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085e:	2200      	movs	r2, #0
 8000860:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000864:	4845      	ldr	r0, [pc, #276]	; (800097c <MX_GPIO_Init+0x1f0>)
 8000866:	f000 fdff 	bl	8001468 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	483c      	ldr	r0, [pc, #240]	; (8000974 <MX_GPIO_Init+0x1e8>)
 8000882:	f000 fc55 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4836      	ldr	r0, [pc, #216]	; (8000978 <MX_GPIO_Init+0x1ec>)
 800089e:	f000 fc47 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b2:	2305      	movs	r3, #5
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	482e      	ldr	r0, [pc, #184]	; (8000978 <MX_GPIO_Init+0x1ec>)
 80008be:	f000 fc37 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	482a      	ldr	r0, [pc, #168]	; (8000980 <MX_GPIO_Init+0x1f4>)
 80008d8:	f000 fc2a 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008dc:	2304      	movs	r3, #4
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4825      	ldr	r0, [pc, #148]	; (8000984 <MX_GPIO_Init+0x1f8>)
 80008f0:	f000 fc1e 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000906:	2305      	movs	r3, #5
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	481c      	ldr	r0, [pc, #112]	; (8000984 <MX_GPIO_Init+0x1f8>)
 8000912:	f000 fc0d 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000916:	f24f 0310 	movw	r3, #61456	; 0xf010
 800091a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4813      	ldr	r0, [pc, #76]	; (800097c <MX_GPIO_Init+0x1f0>)
 8000930:	f000 fbfe 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000934:	2320      	movs	r3, #32
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_GPIO_Init+0x1f0>)
 8000948:	f000 fbf2 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800094c:	2302      	movs	r3, #2
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000950:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_GPIO_Init+0x1e8>)
 8000962:	f000 fbe5 	bl	8001130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	; 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40020800 	.word	0x40020800
 800097c:	40020c00 	.word	0x40020c00
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 fb6a 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_I2C_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <HAL_I2C_MspInit+0x8c>)
 8000a40:	f000 fb76 	bl	8001130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400

08000a74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <HAL_I2S_MspInit+0xf0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d15a      	bne.n	8000b5a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aa8:	23c0      	movs	r3, #192	; 0xc0
 8000aaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fb77 	bl	80041a8 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ac0:	f7ff ff62 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b28:	2306      	movs	r3, #6
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	480e      	ldr	r0, [pc, #56]	; (8000b6c <HAL_I2S_MspInit+0xf8>)
 8000b34:	f000 fafc 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b38:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <HAL_I2S_MspInit+0xfc>)
 8000b56:	f000 faeb 	bl	8001130 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	; 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40003c00 	.word	0x40003c00
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020800 	.word	0x40020800

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_SPI_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12b      	bne.n	8000bee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bce:	23e0      	movs	r3, #224	; 0xe0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bde:	2305      	movs	r3, #5
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000bea:	f000 faa1 	bl	8001130 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40013000 	.word	0x40013000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <HAL_UART_MspInit+0x84>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12b      	bne.n	8000c7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c5e:	230c      	movs	r3, #12
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0x8c>)
 8000c7a:	f000 fa59 	bl	8001130 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f8d0 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <OTG_FS_IRQHandler+0x10>)
 8000cee:	f000 fe3f 	bl	8001970 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200005b4 	.word	0x200005b4

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f007 fb78 	bl	8008420 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20020000 	.word	0x20020000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	200001d0 	.word	0x200001d0
 8000d64:	20000a00 	.word	0x20000a00

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d92:	490e      	ldr	r1, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da8:	4c0b      	ldr	r4, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db6:	f7ff ffd7 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f007 fb37 	bl	800842c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fb89 	bl	80004d4 <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000dd0:	08008560 	.word	0x08008560
  ldr r2, =_sbss
 8000dd4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000dd8:	20000a00 	.word	0x20000a00

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <HAL_Init+0x40>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_Init+0x40>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x40>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f94f 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fdbe 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f967 	bl	8001116 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f92f 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	200001d4 	.word	0x200001d4

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200001d4 	.word	0x200001d4

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff29 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff3e 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff31 	bl	8000f70 <__NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffa2 	bl	8001068 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e16b      	b.n	8001424 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 815a 	bne.w	800141e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d005      	beq.n	8001182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	2b02      	cmp	r3, #2
 8001180:	d130      	bne.n	80011e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f003 0201 	and.w	r2, r3, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d017      	beq.n	8001220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d123      	bne.n	8001274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	69b9      	ldr	r1, [r7, #24]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80b4 	beq.w	800141e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b60      	ldr	r3, [pc, #384]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a5f      	ldr	r2, [pc, #380]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b5d      	ldr	r3, [pc, #372]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d2:	4a5b      	ldr	r2, [pc, #364]	; (8001440 <HAL_GPIO_Init+0x310>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_GPIO_Init+0x314>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d02b      	beq.n	8001356 <HAL_GPIO_Init+0x226>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_GPIO_Init+0x318>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d025      	beq.n	8001352 <HAL_GPIO_Init+0x222>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_GPIO_Init+0x31c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01f      	beq.n	800134e <HAL_GPIO_Init+0x21e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <HAL_GPIO_Init+0x320>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0x21a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4e      	ldr	r2, [pc, #312]	; (8001454 <HAL_GPIO_Init+0x324>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x216>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4d      	ldr	r2, [pc, #308]	; (8001458 <HAL_GPIO_Init+0x328>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_Init+0x212>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4c      	ldr	r2, [pc, #304]	; (800145c <HAL_GPIO_Init+0x32c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x20e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4b      	ldr	r2, [pc, #300]	; (8001460 <HAL_GPIO_Init+0x330>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_GPIO_Init+0x20a>
 8001336:	2307      	movs	r3, #7
 8001338:	e00e      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133a:	2308      	movs	r3, #8
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133e:	2306      	movs	r3, #6
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001356:	2300      	movs	r3, #0
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x310>)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_GPIO_Init+0x334>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_GPIO_Init+0x334>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ee:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_GPIO_Init+0x334>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f67f ae90 	bls.w	800114c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800149a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149c:	b08f      	sub	sp, #60	; 0x3c
 800149e:	af0a      	add	r7, sp, #40	; 0x28
 80014a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e054      	b.n	8001556 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f006 fc2c 	bl	8007d24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2203      	movs	r2, #3
 80014d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 fc58 	bl	8004da0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	687e      	ldr	r6, [r7, #4]
 80014f8:	466d      	mov	r5, sp
 80014fa:	f106 0410 	add.w	r4, r6, #16
 80014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150a:	e885 0003 	stmia.w	r5, {r0, r1}
 800150e:	1d33      	adds	r3, r6, #4
 8001510:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001512:	6838      	ldr	r0, [r7, #0]
 8001514:	f003 fbd2 	bl	8004cbc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fc4f 	bl	8004dc2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	687e      	ldr	r6, [r7, #4]
 800152c:	466d      	mov	r5, sp
 800152e:	f106 0410 	add.w	r4, r6, #16
 8001532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800153e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001542:	1d33      	adds	r3, r6, #4
 8001544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001546:	6838      	ldr	r0, [r7, #0]
 8001548:	f003 fdd8 	bl	80050fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800155e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800155e:	b590      	push	{r4, r7, lr}
 8001560:	b089      	sub	sp, #36	; 0x24
 8001562:	af04      	add	r7, sp, #16
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	4608      	mov	r0, r1
 8001568:	4611      	mov	r1, r2
 800156a:	461a      	mov	r2, r3
 800156c:	4603      	mov	r3, r0
 800156e:	70fb      	strb	r3, [r7, #3]
 8001570:	460b      	mov	r3, r1
 8001572:	70bb      	strb	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_HCD_HC_Init+0x28>
 8001582:	2302      	movs	r3, #2
 8001584:	e076      	b.n	8001674 <HAL_HCD_HC_Init+0x116>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	212c      	movs	r1, #44	; 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	333d      	adds	r3, #61	; 0x3d
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	212c      	movs	r1, #44	; 0x2c
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	3338      	adds	r3, #56	; 0x38
 80015ae:	787a      	ldrb	r2, [r7, #1]
 80015b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	212c      	movs	r1, #44	; 0x2c
 80015b8:	fb01 f303 	mul.w	r3, r1, r3
 80015bc:	4413      	add	r3, r2
 80015be:	3340      	adds	r3, #64	; 0x40
 80015c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015c2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	212c      	movs	r1, #44	; 0x2c
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	3339      	adds	r3, #57	; 0x39
 80015d2:	78fa      	ldrb	r2, [r7, #3]
 80015d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	212c      	movs	r1, #44	; 0x2c
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	333f      	adds	r3, #63	; 0x3f
 80015e4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	78ba      	ldrb	r2, [r7, #2]
 80015ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015f2:	b2d0      	uxtb	r0, r2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	212c      	movs	r1, #44	; 0x2c
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	333a      	adds	r3, #58	; 0x3a
 8001600:	4602      	mov	r2, r0
 8001602:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001604:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001608:	2b00      	cmp	r3, #0
 800160a:	da09      	bge.n	8001620 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	212c      	movs	r1, #44	; 0x2c
 8001612:	fb01 f303 	mul.w	r3, r1, r3
 8001616:	4413      	add	r3, r2
 8001618:	333b      	adds	r3, #59	; 0x3b
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e008      	b.n	8001632 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	212c      	movs	r1, #44	; 0x2c
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	333b      	adds	r3, #59	; 0x3b
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	212c      	movs	r1, #44	; 0x2c
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	4413      	add	r3, r2
 800163e:	333c      	adds	r3, #60	; 0x3c
 8001640:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001644:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	787c      	ldrb	r4, [r7, #1]
 800164c:	78ba      	ldrb	r2, [r7, #2]
 800164e:	78f9      	ldrb	r1, [r7, #3]
 8001650:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	4623      	mov	r3, r4
 8001662:	f003 fed1 	bl	8005408 <USB_HC_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}

0800167c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_HCD_HC_Halt+0x1e>
 8001696:	2302      	movs	r3, #2
 8001698:	e00f      	b.n	80016ba <HAL_HCD_HC_Halt+0x3e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 f921 	bl	80058f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	70fb      	strb	r3, [r7, #3]
 80016d6:	460b      	mov	r3, r1
 80016d8:	70bb      	strb	r3, [r7, #2]
 80016da:	4613      	mov	r3, r2
 80016dc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	212c      	movs	r1, #44	; 0x2c
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	333b      	adds	r3, #59	; 0x3b
 80016ec:	78ba      	ldrb	r2, [r7, #2]
 80016ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	212c      	movs	r1, #44	; 0x2c
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	333f      	adds	r3, #63	; 0x3f
 80016fe:	787a      	ldrb	r2, [r7, #1]
 8001700:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001702:	7c3b      	ldrb	r3, [r7, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d112      	bne.n	800172e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	212c      	movs	r1, #44	; 0x2c
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	4413      	add	r3, r2
 8001714:	3342      	adds	r3, #66	; 0x42
 8001716:	2203      	movs	r2, #3
 8001718:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	212c      	movs	r1, #44	; 0x2c
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	333d      	adds	r3, #61	; 0x3d
 8001728:	7f3a      	ldrb	r2, [r7, #28]
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e008      	b.n	8001740 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	212c      	movs	r1, #44	; 0x2c
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	4413      	add	r3, r2
 800173a:	3342      	adds	r3, #66	; 0x42
 800173c:	2202      	movs	r2, #2
 800173e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b03      	cmp	r3, #3
 8001744:	f200 80c6 	bhi.w	80018d4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001748:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	08001761 	.word	0x08001761
 8001754:	080018c1 	.word	0x080018c1
 8001758:	080017c5 	.word	0x080017c5
 800175c:	08001843 	.word	0x08001843
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001760:	7c3b      	ldrb	r3, [r7, #16]
 8001762:	2b01      	cmp	r3, #1
 8001764:	f040 80b8 	bne.w	80018d8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001768:	78bb      	ldrb	r3, [r7, #2]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 80b4 	bne.w	80018d8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001770:	8b3b      	ldrh	r3, [r7, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d108      	bne.n	8001788 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	3355      	adds	r3, #85	; 0x55
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	212c      	movs	r1, #44	; 0x2c
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	4413      	add	r3, r2
 8001794:	3355      	adds	r3, #85	; 0x55
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	3342      	adds	r3, #66	; 0x42
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017ae:	e093      	b.n	80018d8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	3342      	adds	r3, #66	; 0x42
 80017be:	2202      	movs	r2, #2
 80017c0:	701a      	strb	r2, [r3, #0]
      break;
 80017c2:	e089      	b.n	80018d8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017c4:	78bb      	ldrb	r3, [r7, #2]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d11d      	bne.n	8001806 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	212c      	movs	r1, #44	; 0x2c
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	3355      	adds	r3, #85	; 0x55
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	212c      	movs	r1, #44	; 0x2c
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	3342      	adds	r3, #66	; 0x42
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017f0:	e073      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	212c      	movs	r1, #44	; 0x2c
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	3342      	adds	r3, #66	; 0x42
 8001800:	2202      	movs	r2, #2
 8001802:	701a      	strb	r2, [r3, #0]
      break;
 8001804:	e069      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	3354      	adds	r3, #84	; 0x54
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	212c      	movs	r1, #44	; 0x2c
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	3342      	adds	r3, #66	; 0x42
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
      break;
 800182c:	e055      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	212c      	movs	r1, #44	; 0x2c
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	3342      	adds	r3, #66	; 0x42
 800183c:	2202      	movs	r2, #2
 800183e:	701a      	strb	r2, [r3, #0]
      break;
 8001840:	e04b      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001842:	78bb      	ldrb	r3, [r7, #2]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d11d      	bne.n	8001884 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	212c      	movs	r1, #44	; 0x2c
 800184e:	fb01 f303 	mul.w	r3, r1, r3
 8001852:	4413      	add	r3, r2
 8001854:	3355      	adds	r3, #85	; 0x55
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	212c      	movs	r1, #44	; 0x2c
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	3342      	adds	r3, #66	; 0x42
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800186e:	e034      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	212c      	movs	r1, #44	; 0x2c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4413      	add	r3, r2
 800187c:	3342      	adds	r3, #66	; 0x42
 800187e:	2202      	movs	r2, #2
 8001880:	701a      	strb	r2, [r3, #0]
      break;
 8001882:	e02a      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	212c      	movs	r1, #44	; 0x2c
 800188a:	fb01 f303 	mul.w	r3, r1, r3
 800188e:	4413      	add	r3, r2
 8001890:	3354      	adds	r3, #84	; 0x54
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	212c      	movs	r1, #44	; 0x2c
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	3342      	adds	r3, #66	; 0x42
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
      break;
 80018aa:	e016      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3342      	adds	r3, #66	; 0x42
 80018ba:	2202      	movs	r2, #2
 80018bc:	701a      	strb	r2, [r3, #0]
      break;
 80018be:	e00c      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	212c      	movs	r1, #44	; 0x2c
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	3342      	adds	r3, #66	; 0x42
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
      break;
 80018d2:	e002      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018d4:	bf00      	nop
 80018d6:	e000      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018d8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	212c      	movs	r1, #44	; 0x2c
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	3344      	adds	r3, #68	; 0x44
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	8b3a      	ldrh	r2, [r7, #24]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	202c      	movs	r0, #44	; 0x2c
 80018f4:	fb00 f303 	mul.w	r3, r0, r3
 80018f8:	440b      	add	r3, r1
 80018fa:	334c      	adds	r3, #76	; 0x4c
 80018fc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	212c      	movs	r1, #44	; 0x2c
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	4413      	add	r3, r2
 800190a:	3360      	adds	r3, #96	; 0x60
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	212c      	movs	r1, #44	; 0x2c
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	3350      	adds	r3, #80	; 0x50
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	212c      	movs	r1, #44	; 0x2c
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	3339      	adds	r3, #57	; 0x39
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3361      	adds	r3, #97	; 0x61
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	222c      	movs	r2, #44	; 0x2c
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	3338      	adds	r3, #56	; 0x38
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	18d1      	adds	r1, r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	f003 fe74 	bl	800564c <USB_HC_StartXfer>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop

08001970 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 fb75 	bl	8005076 <USB_GetMode>
 800198c:	4603      	mov	r3, r0
 800198e:	2b01      	cmp	r3, #1
 8001990:	f040 80f6 	bne.w	8001b80 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fb59 	bl	8005050 <USB_ReadInterrupts>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80ec 	beq.w	8001b7e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 fb50 	bl	8005050 <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019ba:	d104      	bne.n	80019c6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 fb40 	bl	8005050 <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019da:	d104      	bne.n	80019e6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fb30 	bl	8005050 <USB_ReadInterrupts>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019fa:	d104      	bne.n	8001a06 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 fb20 	bl	8005050 <USB_ReadInterrupts>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d103      	bne.n	8001a22 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 fb12 	bl	8005050 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a36:	d11c      	bne.n	8001a72 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a40:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10f      	bne.n	8001a72 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a52:	2110      	movs	r1, #16
 8001a54:	6938      	ldr	r0, [r7, #16]
 8001a56:	f003 fa01 	bl	8004e5c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a5a:	6938      	ldr	r0, [r7, #16]
 8001a5c:	f003 fa32 	bl	8004ec4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fc08 	bl	800527c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f006 f9d7 	bl	8007e20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 faea 	bl	8005050 <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a86:	d102      	bne.n	8001a8e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f001 f89e 	bl	8002bca <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fadc 	bl	8005050 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d106      	bne.n	8001ab0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f006 f9a0 	bl	8007de8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2208      	movs	r2, #8
 8001aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 facb 	bl	8005050 <USB_ReadInterrupts>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	d101      	bne.n	8001ac8 <HAL_HCD_IRQHandler+0x158>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_HCD_IRQHandler+0x15a>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d012      	beq.n	8001af4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0210 	bic.w	r2, r2, #16
 8001adc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 ffa1 	bl	8002a26 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699a      	ldr	r2, [r3, #24]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0210 	orr.w	r2, r2, #16
 8001af2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 faa9 	bl	8005050 <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b08:	d13a      	bne.n	8001b80 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fede 	bl	80058d0 <USB_HC_ReadInterrupt>
 8001b14:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e025      	b.n	8001b68 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d018      	beq.n	8001b62 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b46:	d106      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8ab 	bl	8001caa <HCD_HC_IN_IRQHandler>
 8001b54:	e005      	b.n	8001b62 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fbf9 	bl	8002354 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d3d4      	bcc.n	8001b1c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	e000      	b.n	8001b80 <HAL_HCD_IRQHandler+0x210>
      return;
 8001b7e:	bf00      	nop
    }
  }
}
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_HCD_Start+0x16>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e013      	b.n	8001bc4 <HAL_HCD_Start+0x3e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fbca 	bl	8005344 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 f8e2 	bl	8004d7e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_HCD_Stop+0x16>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e00d      	b.n	8001bfe <HAL_HCD_Stop+0x32>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 ffb8 	bl	8005b64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fb6c 	bl	80052f0 <USB_ResetPort>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	212c      	movs	r1, #44	; 0x2c
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	3360      	adds	r3, #96	; 0x60
 8001c3c:	781b      	ldrb	r3, [r3, #0]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	212c      	movs	r1, #44	; 0x2c
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	3350      	adds	r3, #80	; 0x50
 8001c64:	681b      	ldr	r3, [r3, #0]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 fbb0 	bl	80053e4 <USB_GetCurrentFrame>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fb8b 	bl	80053b6 <USB_GetHostSpeed>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	015a      	lsls	r2, r3, #5
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d11a      	bne.n	8001d10 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2304      	movs	r3, #4
 8001cea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3361      	adds	r3, #97	; 0x61
 8001cfa:	2206      	movs	r2, #6
 8001cfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fdf2 	bl	80058f2 <USB_HC_Halt>
 8001d0e:	e0af      	b.n	8001e70 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d26:	d11b      	bne.n	8001d60 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d34:	461a      	mov	r2, r3
 8001d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3361      	adds	r3, #97	; 0x61
 8001d4a:	2207      	movs	r2, #7
 8001d4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fdca 	bl	80058f2 <USB_HC_Halt>
 8001d5e:	e087      	b.n	8001e70 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d109      	bne.n	8001d8a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	461a      	mov	r2, r3
 8001d84:	2320      	movs	r3, #32
 8001d86:	6093      	str	r3, [r2, #8]
 8001d88:	e072      	b.n	8001e70 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d11a      	bne.n	8001dd6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dac:	461a      	mov	r2, r3
 8001dae:	2308      	movs	r3, #8
 8001db0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3361      	adds	r3, #97	; 0x61
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 fd8f 	bl	80058f2 <USB_HC_Halt>
 8001dd4:	e04c      	b.n	8001e70 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dec:	d11b      	bne.n	8001e26 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	212c      	movs	r1, #44	; 0x2c
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3361      	adds	r3, #97	; 0x61
 8001e10:	2208      	movs	r2, #8
 8001e12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fd67 	bl	80058f2 <USB_HC_Halt>
 8001e24:	e024      	b.n	8001e70 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e38:	2b80      	cmp	r3, #128	; 0x80
 8001e3a:	d119      	bne.n	8001e70 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	212c      	movs	r1, #44	; 0x2c
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3361      	adds	r3, #97	; 0x61
 8001e5c:	2206      	movs	r2, #6
 8001e5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fd41 	bl	80058f2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e86:	d112      	bne.n	8001eae <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fd2d 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eaa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001eac:	e24e      	b.n	800234c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	f040 80df 	bne.w	8002084 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d019      	beq.n	8001f02 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	3348      	adds	r3, #72	; 0x48
 8001edc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	0159      	lsls	r1, r3, #5
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	440b      	add	r3, r1
 8001ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ef0:	1ad2      	subs	r2, r2, r3
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	202c      	movs	r0, #44	; 0x2c
 8001ef8:	fb00 f303 	mul.w	r3, r0, r3
 8001efc:	440b      	add	r3, r1
 8001efe:	3350      	adds	r3, #80	; 0x50
 8001f00:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3361      	adds	r3, #97	; 0x61
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	335c      	adds	r3, #92	; 0x5c
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	2301      	movs	r3, #1
 8001f36:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	212c      	movs	r1, #44	; 0x2c
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	333f      	adds	r3, #63	; 0x3f
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	212c      	movs	r1, #44	; 0x2c
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	333f      	adds	r3, #63	; 0x3f
 8001f5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d111      	bne.n	8001f84 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fcc1 	bl	80058f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2310      	movs	r3, #16
 8001f80:	6093      	str	r3, [r2, #8]
 8001f82:	e03a      	b.n	8001ffa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	333f      	adds	r3, #63	; 0x3f
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d009      	beq.n	8001fac <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	212c      	movs	r1, #44	; 0x2c
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	333f      	adds	r3, #63	; 0x3f
 8001fa6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d126      	bne.n	8001ffa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	015a      	lsls	r2, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	0151      	lsls	r1, r2, #5
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	440a      	add	r2, r1
 8001fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fca:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	212c      	movs	r1, #44	; 0x2c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3360      	adds	r3, #96	; 0x60
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	b2d9      	uxtb	r1, r3
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	202c      	movs	r0, #44	; 0x2c
 8001fe8:	fb00 f303 	mul.w	r3, r0, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	3360      	adds	r3, #96	; 0x60
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f005 ff21 	bl	8007e3c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d12b      	bne.n	800205a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3348      	adds	r3, #72	; 0x48
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	202c      	movs	r0, #44	; 0x2c
 8002018:	fb00 f202 	mul.w	r2, r0, r2
 800201c:	440a      	add	r2, r1
 800201e:	3240      	adds	r2, #64	; 0x40
 8002020:	8812      	ldrh	r2, [r2, #0]
 8002022:	fbb3 f3f2 	udiv	r3, r3, r2
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 818e 	beq.w	800234c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	3354      	adds	r3, #84	; 0x54
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	f083 0301 	eor.w	r3, r3, #1
 8002044:	b2d8      	uxtb	r0, r3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	212c      	movs	r1, #44	; 0x2c
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	3354      	adds	r3, #84	; 0x54
 8002054:	4602      	mov	r2, r0
 8002056:	701a      	strb	r2, [r3, #0]
}
 8002058:	e178      	b.n	800234c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	3354      	adds	r3, #84	; 0x54
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	f083 0301 	eor.w	r3, r3, #1
 800206e:	b2d8      	uxtb	r0, r3
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	3354      	adds	r3, #84	; 0x54
 800207e:	4602      	mov	r2, r0
 8002080:	701a      	strb	r2, [r3, #0]
}
 8002082:	e163      	b.n	800234c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	f040 80f6 	bne.w	8002288 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	212c      	movs	r1, #44	; 0x2c
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	3361      	adds	r3, #97	; 0x61
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d109      	bne.n	80020c4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	3360      	adds	r3, #96	; 0x60
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
 80020c2:	e0c9      	b.n	8002258 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3361      	adds	r3, #97	; 0x61
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d109      	bne.n	80020ec <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3360      	adds	r3, #96	; 0x60
 80020e6:	2205      	movs	r2, #5
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e0b5      	b.n	8002258 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3361      	adds	r3, #97	; 0x61
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b06      	cmp	r3, #6
 80020fe:	d009      	beq.n	8002114 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	212c      	movs	r1, #44	; 0x2c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3361      	adds	r3, #97	; 0x61
 800210e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002110:	2b08      	cmp	r3, #8
 8002112:	d150      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	335c      	adds	r3, #92	; 0x5c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	202c      	movs	r0, #44	; 0x2c
 800212c:	fb00 f303 	mul.w	r3, r0, r3
 8002130:	440b      	add	r3, r1
 8002132:	335c      	adds	r3, #92	; 0x5c
 8002134:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	335c      	adds	r3, #92	; 0x5c
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d912      	bls.n	8002170 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	335c      	adds	r3, #92	; 0x5c
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3360      	adds	r3, #96	; 0x60
 800216a:	2204      	movs	r2, #4
 800216c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800216e:	e073      	b.n	8002258 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3360      	adds	r3, #96	; 0x60
 800217e:	2202      	movs	r2, #2
 8002180:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002198:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021a0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021b4:	e050      	b.n	8002258 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	3361      	adds	r3, #97	; 0x61
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d122      	bne.n	8002210 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	3360      	adds	r3, #96	; 0x60
 80021d8:	2202      	movs	r2, #2
 80021da:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021f2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021fa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4413      	add	r3, r2
 8002204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e023      	b.n	8002258 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3361      	adds	r3, #97	; 0x61
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b07      	cmp	r3, #7
 8002222:	d119      	bne.n	8002258 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	212c      	movs	r1, #44	; 0x2c
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	335c      	adds	r3, #92	; 0x5c
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	202c      	movs	r0, #44	; 0x2c
 800223c:	fb00 f303 	mul.w	r3, r0, r3
 8002240:	440b      	add	r3, r1
 8002242:	335c      	adds	r3, #92	; 0x5c
 8002244:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3360      	adds	r3, #96	; 0x60
 8002254:	2204      	movs	r2, #4
 8002256:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	461a      	mov	r2, r3
 8002266:	2302      	movs	r3, #2
 8002268:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	b2d9      	uxtb	r1, r3
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	202c      	movs	r0, #44	; 0x2c
 8002274:	fb00 f303 	mul.w	r3, r0, r3
 8002278:	4413      	add	r3, r2
 800227a:	3360      	adds	r3, #96	; 0x60
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f005 fddb 	bl	8007e3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002286:	e061      	b.n	800234c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b10      	cmp	r3, #16
 800229c:	d156      	bne.n	800234c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	333f      	adds	r3, #63	; 0x3f
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d111      	bne.n	80022d6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	335c      	adds	r3, #92	; 0x5c
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 fb0f 	bl	80058f2 <USB_HC_Halt>
 80022d4:	e031      	b.n	800233a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	333f      	adds	r3, #63	; 0x3f
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	333f      	adds	r3, #63	; 0x3f
 80022f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d11d      	bne.n	800233a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	335c      	adds	r3, #92	; 0x5c
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d110      	bne.n	800233a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	212c      	movs	r1, #44	; 0x2c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	3361      	adds	r3, #97	; 0x61
 8002326:	2203      	movs	r2, #3
 8002328:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f003 fadc 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	461a      	mov	r2, r3
 8002348:	2310      	movs	r3, #16
 800234a:	6093      	str	r3, [r2, #8]
}
 800234c:	bf00      	nop
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b04      	cmp	r3, #4
 8002382:	d11a      	bne.n	80023ba <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	461a      	mov	r2, r3
 8002392:	2304      	movs	r3, #4
 8002394:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3361      	adds	r3, #97	; 0x61
 80023a4:	2206      	movs	r2, #6
 80023a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 fa9d 	bl	80058f2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80023b8:	e331      	b.n	8002a1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b20      	cmp	r3, #32
 80023ce:	d12e      	bne.n	800242e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	461a      	mov	r2, r3
 80023de:	2320      	movs	r3, #32
 80023e0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	333d      	adds	r3, #61	; 0x3d
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	f040 8313 	bne.w	8002a1e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	333d      	adds	r3, #61	; 0x3d
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3360      	adds	r3, #96	; 0x60
 8002418:	2202      	movs	r2, #2
 800241a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fa63 	bl	80058f2 <USB_HC_Halt>
}
 800242c:	e2f7      	b.n	8002a1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002444:	d112      	bne.n	800246c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	461a      	mov	r2, r3
 8002454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002458:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f003 fa44 	bl	80058f2 <USB_HC_Halt>
}
 800246a:	e2d8      	b.n	8002a1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d140      	bne.n	8002504 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	335c      	adds	r3, #92	; 0x5c
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d111      	bne.n	80024ce <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	333d      	adds	r3, #61	; 0x3d
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	461a      	mov	r2, r3
 80024ca:	2340      	movs	r3, #64	; 0x40
 80024cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	461a      	mov	r2, r3
 80024dc:	2301      	movs	r3, #1
 80024de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3361      	adds	r3, #97	; 0x61
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 f9f8 	bl	80058f2 <USB_HC_Halt>
}
 8002502:	e28c      	b.n	8002a1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d12c      	bne.n	8002574 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3361      	adds	r3, #97	; 0x61
 8002528:	2204      	movs	r2, #4
 800252a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	333d      	adds	r3, #61	; 0x3d
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	335c      	adds	r3, #92	; 0x5c
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f003 f9c9 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	2340      	movs	r3, #64	; 0x40
 8002570:	6093      	str	r3, [r2, #8]
}
 8002572:	e254      	b.n	8002a1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b08      	cmp	r3, #8
 8002588:	d11a      	bne.n	80025c0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	461a      	mov	r2, r3
 8002598:	2308      	movs	r3, #8
 800259a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	212c      	movs	r1, #44	; 0x2c
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	3361      	adds	r3, #97	; 0x61
 80025aa:	2205      	movs	r2, #5
 80025ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 f99a 	bl	80058f2 <USB_HC_Halt>
}
 80025be:	e22e      	b.n	8002a1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d140      	bne.n	8002658 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	335c      	adds	r3, #92	; 0x5c
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	212c      	movs	r1, #44	; 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	3361      	adds	r3, #97	; 0x61
 80025f6:	2203      	movs	r2, #3
 80025f8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	333d      	adds	r3, #61	; 0x3d
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d112      	bne.n	8002634 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	333c      	adds	r3, #60	; 0x3c
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d108      	bne.n	8002634 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	333d      	adds	r3, #61	; 0x3d
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f003 f957 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	461a      	mov	r2, r3
 8002652:	2310      	movs	r3, #16
 8002654:	6093      	str	r3, [r2, #8]
}
 8002656:	e1e2      	b.n	8002a1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	d164      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d111      	bne.n	800269a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3361      	adds	r3, #97	; 0x61
 8002684:	2206      	movs	r2, #6
 8002686:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f003 f92d 	bl	80058f2 <USB_HC_Halt>
 8002698:	e044      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	335c      	adds	r3, #92	; 0x5c
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	202c      	movs	r0, #44	; 0x2c
 80026b2:	fb00 f303 	mul.w	r3, r0, r3
 80026b6:	440b      	add	r3, r1
 80026b8:	335c      	adds	r3, #92	; 0x5c
 80026ba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	335c      	adds	r3, #92	; 0x5c
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d920      	bls.n	8002712 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	212c      	movs	r1, #44	; 0x2c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	335c      	adds	r3, #92	; 0x5c
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	3360      	adds	r3, #96	; 0x60
 80026f0:	2204      	movs	r2, #4
 80026f2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	b2d9      	uxtb	r1, r3
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	202c      	movs	r0, #44	; 0x2c
 80026fe:	fb00 f303 	mul.w	r3, r0, r3
 8002702:	4413      	add	r3, r2
 8002704:	3360      	adds	r3, #96	; 0x60
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f005 fb96 	bl	8007e3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002710:	e008      	b.n	8002724 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3360      	adds	r3, #96	; 0x60
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	6093      	str	r3, [r2, #8]
}
 8002736:	e172      	b.n	8002a1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274e:	d11b      	bne.n	8002788 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	3361      	adds	r3, #97	; 0x61
 800275e:	2208      	movs	r2, #8
 8002760:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f003 f8c0 	bl	80058f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	461a      	mov	r2, r3
 8002780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002784:	6093      	str	r3, [r2, #8]
}
 8002786:	e14a      	b.n	8002a1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b02      	cmp	r3, #2
 800279c:	f040 813f 	bne.w	8002a1e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	3361      	adds	r3, #97	; 0x61
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d17d      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3360      	adds	r3, #96	; 0x60
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	333f      	adds	r3, #63	; 0x3f
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d00a      	beq.n	80027f0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	333f      	adds	r3, #63	; 0x3f
 80027e8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	f040 8100 	bne.w	80029f0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d113      	bne.n	8002820 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3355      	adds	r3, #85	; 0x55
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	f083 0301 	eor.w	r3, r3, #1
 800280c:	b2d8      	uxtb	r0, r3
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3355      	adds	r3, #85	; 0x55
 800281c:	4602      	mov	r2, r0
 800281e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2b01      	cmp	r3, #1
 8002826:	f040 80e3 	bne.w	80029f0 <HCD_HC_OUT_IRQHandler+0x69c>
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	334c      	adds	r3, #76	; 0x4c
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80d8 	beq.w	80029f0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	334c      	adds	r3, #76	; 0x4c
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	202c      	movs	r0, #44	; 0x2c
 8002856:	fb00 f202 	mul.w	r2, r0, r2
 800285a:	440a      	add	r2, r1
 800285c:	3240      	adds	r2, #64	; 0x40
 800285e:	8812      	ldrh	r2, [r2, #0]
 8002860:	4413      	add	r3, r2
 8002862:	3b01      	subs	r3, #1
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	202c      	movs	r0, #44	; 0x2c
 800286a:	fb00 f202 	mul.w	r2, r0, r2
 800286e:	440a      	add	r2, r1
 8002870:	3240      	adds	r2, #64	; 0x40
 8002872:	8812      	ldrh	r2, [r2, #0]
 8002874:	fbb3 f3f2 	udiv	r3, r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80b5 	beq.w	80029f0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	3355      	adds	r3, #85	; 0x55
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	f083 0301 	eor.w	r3, r3, #1
 800289a:	b2d8      	uxtb	r0, r3
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3355      	adds	r3, #85	; 0x55
 80028aa:	4602      	mov	r2, r0
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e09f      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3361      	adds	r3, #97	; 0x61
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d109      	bne.n	80028d8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3360      	adds	r3, #96	; 0x60
 80028d2:	2202      	movs	r2, #2
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e08b      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3361      	adds	r3, #97	; 0x61
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d109      	bne.n	8002900 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3360      	adds	r3, #96	; 0x60
 80028fa:	2202      	movs	r2, #2
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e077      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3361      	adds	r3, #97	; 0x61
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b05      	cmp	r3, #5
 8002912:	d109      	bne.n	8002928 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3360      	adds	r3, #96	; 0x60
 8002922:	2205      	movs	r2, #5
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e063      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3361      	adds	r3, #97	; 0x61
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b06      	cmp	r3, #6
 800293a:	d009      	beq.n	8002950 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3361      	adds	r3, #97	; 0x61
 800294a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800294c:	2b08      	cmp	r3, #8
 800294e:	d14f      	bne.n	80029f0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	335c      	adds	r3, #92	; 0x5c
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	202c      	movs	r0, #44	; 0x2c
 8002968:	fb00 f303 	mul.w	r3, r0, r3
 800296c:	440b      	add	r3, r1
 800296e:	335c      	adds	r3, #92	; 0x5c
 8002970:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	335c      	adds	r3, #92	; 0x5c
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d912      	bls.n	80029ac <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3360      	adds	r3, #96	; 0x60
 80029a6:	2204      	movs	r2, #4
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e021      	b.n	80029f0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3360      	adds	r3, #96	; 0x60
 80029ba:	2202      	movs	r2, #2
 80029bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029d4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029dc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	461a      	mov	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	461a      	mov	r2, r3
 80029fe:	2302      	movs	r3, #2
 8002a00:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	b2d9      	uxtb	r1, r3
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	202c      	movs	r0, #44	; 0x2c
 8002a0c:	fb00 f303 	mul.w	r3, r0, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3360      	adds	r3, #96	; 0x60
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f005 fa0f 	bl	8007e3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a1e:	bf00      	nop
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b08a      	sub	sp, #40	; 0x28
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	0c5b      	lsrs	r3, r3, #17
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a5a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d004      	beq.n	8002a6c <HCD_RXQLVL_IRQHandler+0x46>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	f000 80a9 	beq.w	8002bbc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a6a:	e0aa      	b.n	8002bc2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80a6 	beq.w	8002bc0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3344      	adds	r3, #68	; 0x44
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 809b 	beq.w	8002bc0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	3350      	adds	r3, #80	; 0x50
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	441a      	add	r2, r3
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	202c      	movs	r0, #44	; 0x2c
 8002aa4:	fb00 f303 	mul.w	r3, r0, r3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	334c      	adds	r3, #76	; 0x4c
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d87a      	bhi.n	8002ba8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3344      	adds	r3, #68	; 0x44
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f002 fa68 	bl	8004fa0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3344      	adds	r3, #68	; 0x44
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	441a      	add	r2, r3
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	202c      	movs	r0, #44	; 0x2c
 8002aea:	fb00 f303 	mul.w	r3, r0, r3
 8002aee:	440b      	add	r3, r1
 8002af0:	3344      	adds	r3, #68	; 0x44
 8002af2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3350      	adds	r3, #80	; 0x50
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	441a      	add	r2, r3
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	202c      	movs	r0, #44	; 0x2c
 8002b0e:	fb00 f303 	mul.w	r3, r0, r3
 8002b12:	440b      	add	r3, r1
 8002b14:	3350      	adds	r3, #80	; 0x50
 8002b16:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	0cdb      	lsrs	r3, r3, #19
 8002b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b2c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3340      	adds	r3, #64	; 0x40
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d13c      	bne.n	8002bc0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d039      	beq.n	8002bc0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b62:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b6a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3354      	adds	r3, #84	; 0x54
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	f083 0301 	eor.w	r3, r3, #1
 8002b92:	b2d8      	uxtb	r0, r3
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3354      	adds	r3, #84	; 0x54
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	701a      	strb	r2, [r3, #0]
      break;
 8002ba6:	e00b      	b.n	8002bc0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3360      	adds	r3, #96	; 0x60
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	701a      	strb	r2, [r3, #0]
      break;
 8002bba:	e001      	b.n	8002bc0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002bbc:	bf00      	nop
 8002bbe:	e000      	b.n	8002bc2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002bc0:	bf00      	nop
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	3728      	adds	r7, #40	; 0x28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bf6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d10b      	bne.n	8002c1a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d102      	bne.n	8002c12 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f005 f8f9 	bl	8007e04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d132      	bne.n	8002c8a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f043 0308 	orr.w	r3, r3, #8
 8002c2a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d126      	bne.n	8002c84 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d113      	bne.n	8002c66 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c48:	d106      	bne.n	8002c58 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 fb13 	bl	800527c <USB_InitFSLSPClkSel>
 8002c56:	e011      	b.n	8002c7c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 fb0c 	bl	800527c <USB_InitFSLSPClkSel>
 8002c64:	e00a      	b.n	8002c7c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d106      	bne.n	8002c7c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c74:	461a      	mov	r2, r3
 8002c76:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c7a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f005 f8eb 	bl	8007e58 <HAL_HCD_PortEnabled_Callback>
 8002c82:	e002      	b.n	8002c8a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f005 f8f5 	bl	8007e74 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d103      	bne.n	8002c9c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f043 0320 	orr.w	r3, r3, #32
 8002c9a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	6013      	str	r3, [r2, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e12b      	b.n	8002f1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd fe84 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d14:	f001 fa20 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8002d18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4a81      	ldr	r2, [pc, #516]	; (8002f24 <HAL_I2C_Init+0x274>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d807      	bhi.n	8002d34 <HAL_I2C_Init+0x84>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a80      	ldr	r2, [pc, #512]	; (8002f28 <HAL_I2C_Init+0x278>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e006      	b.n	8002d42 <HAL_I2C_Init+0x92>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a7d      	ldr	r2, [pc, #500]	; (8002f2c <HAL_I2C_Init+0x27c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bf94      	ite	ls
 8002d3c:	2301      	movls	r3, #1
 8002d3e:	2300      	movhi	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0e7      	b.n	8002f1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a78      	ldr	r2, [pc, #480]	; (8002f30 <HAL_I2C_Init+0x280>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0c9b      	lsrs	r3, r3, #18
 8002d54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a6a      	ldr	r2, [pc, #424]	; (8002f24 <HAL_I2C_Init+0x274>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d802      	bhi.n	8002d84 <HAL_I2C_Init+0xd4>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	3301      	adds	r3, #1
 8002d82:	e009      	b.n	8002d98 <HAL_I2C_Init+0xe8>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_I2C_Init+0x284>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	3301      	adds	r3, #1
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002daa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	495c      	ldr	r1, [pc, #368]	; (8002f24 <HAL_I2C_Init+0x274>)
 8002db4:	428b      	cmp	r3, r1
 8002db6:	d819      	bhi.n	8002dec <HAL_I2C_Init+0x13c>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1e59      	subs	r1, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc6:	1c59      	adds	r1, r3, #1
 8002dc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dcc:	400b      	ands	r3, r1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_I2C_Init+0x138>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1e59      	subs	r1, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	e051      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002de8:	2304      	movs	r3, #4
 8002dea:	e04f      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d111      	bne.n	8002e18 <HAL_I2C_Init+0x168>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	440b      	add	r3, r1
 8002e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e012      	b.n	8002e3e <HAL_I2C_Init+0x18e>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e58      	subs	r0, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	0099      	lsls	r1, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Init+0x196>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e022      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10e      	bne.n	8002e6c <HAL_I2C_Init+0x1bc>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1e58      	subs	r0, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	440b      	add	r3, r1
 8002e5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6a:	e00f      	b.n	8002e8c <HAL_I2C_Init+0x1dc>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e58      	subs	r0, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	0099      	lsls	r1, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	6809      	ldr	r1, [r1, #0]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6911      	ldr	r1, [r2, #16]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68d2      	ldr	r2, [r2, #12]
 8002ec6:	4311      	orrs	r1, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	000186a0 	.word	0x000186a0
 8002f28:	001e847f 	.word	0x001e847f
 8002f2c:	003d08ff 	.word	0x003d08ff
 8002f30:	431bde83 	.word	0x431bde83
 8002f34:	10624dd3 	.word	0x10624dd3

08002f38 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e128      	b.n	800319c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a90      	ldr	r2, [pc, #576]	; (80031a4 <HAL_I2S_Init+0x26c>)
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fd fd85 	bl	8000a74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f80:	f023 030f 	bic.w	r3, r3, #15
 8002f84:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d060      	beq.n	8003058 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f9e:	2310      	movs	r3, #16
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e001      	b.n	8002fa8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d802      	bhi.n	8002fb6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f001 f9d8 	bl	800436c <HAL_RCCEx_GetPeriphCLKFreq>
 8002fbc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc6:	d125      	bne.n	8003014 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	3305      	adds	r3, #5
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	e01f      	b.n	8003032 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	461a      	mov	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	3305      	adds	r3, #5
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	e00e      	b.n	8003032 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fbb2 f2f3 	udiv	r2, r2, r3
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	461a      	mov	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	3305      	adds	r3, #5
 8003030:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_I2S_Init+0x270>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	08db      	lsrs	r3, r3, #3
 800303c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	e003      	b.n	8003060 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003058:	2302      	movs	r3, #2
 800305a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d902      	bls.n	800306c <HAL_I2S_Init+0x134>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	2bff      	cmp	r3, #255	; 0xff
 800306a:	d907      	bls.n	800307c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f043 0210 	orr.w	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e08f      	b.n	800319c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	ea42 0103 	orr.w	r1, r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	430a      	orrs	r2, r1
 800308e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800309a:	f023 030f 	bic.w	r3, r3, #15
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6851      	ldr	r1, [r2, #4]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6892      	ldr	r2, [r2, #8]
 80030a6:	4311      	orrs	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68d2      	ldr	r2, [r2, #12]
 80030ac:	4311      	orrs	r1, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6992      	ldr	r2, [r2, #24]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030be:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d161      	bne.n	800318c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a38      	ldr	r2, [pc, #224]	; (80031ac <HAL_I2S_Init+0x274>)
 80030cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a37      	ldr	r2, [pc, #220]	; (80031b0 <HAL_I2S_Init+0x278>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d101      	bne.n	80030dc <HAL_I2S_Init+0x1a4>
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <HAL_I2S_Init+0x27c>)
 80030da:	e001      	b.n	80030e0 <HAL_I2S_Init+0x1a8>
 80030dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	4932      	ldr	r1, [pc, #200]	; (80031b0 <HAL_I2S_Init+0x278>)
 80030e8:	428a      	cmp	r2, r1
 80030ea:	d101      	bne.n	80030f0 <HAL_I2S_Init+0x1b8>
 80030ec:	4a31      	ldr	r2, [pc, #196]	; (80031b4 <HAL_I2S_Init+0x27c>)
 80030ee:	e001      	b.n	80030f4 <HAL_I2S_Init+0x1bc>
 80030f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80030f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030f8:	f023 030f 	bic.w	r3, r3, #15
 80030fc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2b      	ldr	r2, [pc, #172]	; (80031b0 <HAL_I2S_Init+0x278>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_I2S_Init+0x1d4>
 8003108:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <HAL_I2S_Init+0x27c>)
 800310a:	e001      	b.n	8003110 <HAL_I2S_Init+0x1d8>
 800310c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003110:	2202      	movs	r2, #2
 8003112:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <HAL_I2S_Init+0x278>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_I2S_Init+0x1ea>
 800311e:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <HAL_I2S_Init+0x27c>)
 8003120:	e001      	b.n	8003126 <HAL_I2S_Init+0x1ee>
 8003122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003132:	d003      	beq.n	800313c <HAL_I2S_Init+0x204>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800313c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	e001      	b.n	8003148 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003152:	4313      	orrs	r3, r2
 8003154:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800315c:	4313      	orrs	r3, r2
 800315e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003166:	4313      	orrs	r3, r2
 8003168:	b29a      	uxth	r2, r3
 800316a:	897b      	ldrh	r3, [r7, #10]
 800316c:	4313      	orrs	r3, r2
 800316e:	b29b      	uxth	r3, r3
 8003170:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003174:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a0d      	ldr	r2, [pc, #52]	; (80031b0 <HAL_I2S_Init+0x278>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_I2S_Init+0x24c>
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_I2S_Init+0x27c>)
 8003182:	e001      	b.n	8003188 <HAL_I2S_Init+0x250>
 8003184:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003188:	897a      	ldrh	r2, [r7, #10]
 800318a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3720      	adds	r7, #32
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	080032af 	.word	0x080032af
 80031a8:	cccccccd 	.word	0xcccccccd
 80031ac:	080033c5 	.word	0x080033c5
 80031b0:	40003800 	.word	0x40003800
 80031b4:	40003400 	.word	0x40003400

080031b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	1c9a      	adds	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003238:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff ffb8 	bl	80031b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	b292      	uxth	r2, r2
 8003264:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	1c9a      	adds	r2, r3, #2
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10e      	bne.n	80032a6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003296:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff93 	bl	80031cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d13a      	bne.n	8003340 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d109      	bne.n	80032e8 <I2S_IRQHandler+0x3a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d102      	bne.n	80032e8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ffb4 	bl	8003250 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d126      	bne.n	8003340 <I2S_IRQHandler+0x92>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d11f      	bne.n	8003340 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800330e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f043 0202 	orr.w	r2, r3, #2
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ff50 	bl	80031e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b03      	cmp	r3, #3
 800334a:	d136      	bne.n	80033ba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b02      	cmp	r3, #2
 8003354:	d109      	bne.n	800336a <I2S_IRQHandler+0xbc>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003360:	2b80      	cmp	r3, #128	; 0x80
 8003362:	d102      	bne.n	800336a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff45 	bl	80031f4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b08      	cmp	r3, #8
 8003372:	d122      	bne.n	80033ba <I2S_IRQHandler+0x10c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b20      	cmp	r3, #32
 8003380:	d11b      	bne.n	80033ba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003390:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	f043 0204 	orr.w	r2, r3, #4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff13 	bl	80031e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a92      	ldr	r2, [pc, #584]	; (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d101      	bne.n	80033e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033de:	4b92      	ldr	r3, [pc, #584]	; (8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033e0:	e001      	b.n	80033e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a8b      	ldr	r2, [pc, #556]	; (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80033fc:	4b8a      	ldr	r3, [pc, #552]	; (8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033fe:	e001      	b.n	8003404 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003400:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003410:	d004      	beq.n	800341c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 8099 	bne.w	800354e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d107      	bne.n	8003436 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f925 	bl	8003680 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d107      	bne.n	8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9c8 	bl	80037e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d13a      	bne.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d035      	beq.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a6e      	ldr	r2, [pc, #440]	; (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800346e:	4b6e      	ldr	r3, [pc, #440]	; (8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003470:	e001      	b.n	8003476 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003472:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4969      	ldr	r1, [pc, #420]	; (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800347e:	428b      	cmp	r3, r1
 8003480:	d101      	bne.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003482:	4b69      	ldr	r3, [pc, #420]	; (8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003484:	e001      	b.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800348e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800349e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff fe88 	bl	80031e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	f040 80c3 	bne.w	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80bd 	beq.w	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a49      	ldr	r2, [pc, #292]	; (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003502:	4b49      	ldr	r3, [pc, #292]	; (8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003504:	e001      	b.n	800350a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003506:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4944      	ldr	r1, [pc, #272]	; (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003512:	428b      	cmp	r3, r1
 8003514:	d101      	bne.n	800351a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003516:	4b44      	ldr	r3, [pc, #272]	; (8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003518:	e001      	b.n	800351e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800351a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800351e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003522:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f043 0204 	orr.w	r2, r3, #4
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fe4a 	bl	80031e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800354c:	e089      	b.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b02      	cmp	r3, #2
 8003556:	d107      	bne.n	8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8be 	bl	80036e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d107      	bne.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f8fd 	bl	800377c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d12f      	bne.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b00      	cmp	r3, #0
 8003594:	d02a      	beq.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d101      	bne.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035b2:	e001      	b.n	80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4919      	ldr	r1, [pc, #100]	; (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035c0:	428b      	cmp	r3, r1
 80035c2:	d101      	bne.n	80035c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035c6:	e001      	b.n	80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f043 0202 	orr.w	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff fdfa 	bl	80031e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d136      	bne.n	8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d031      	beq.n	8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800360c:	e001      	b.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800360e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4902      	ldr	r1, [pc, #8]	; (8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800361a:	428b      	cmp	r3, r1
 800361c:	d106      	bne.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800361e:	4b02      	ldr	r3, [pc, #8]	; (8003628 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003620:	e006      	b.n	8003630 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003622:	bf00      	nop
 8003624:	40003800 	.word	0x40003800
 8003628:	40003400 	.word	0x40003400
 800362c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003630:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003634:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003644:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f043 0204 	orr.w	r2, r3, #4
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fdc0 	bl	80031e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003660:	e000      	b.n	8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003662:	bf00      	nop
}
 8003664:	bf00      	nop
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c99      	adds	r1, r3, #2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6251      	str	r1, [r2, #36]	; 0x24
 8003692:	881a      	ldrh	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d113      	bne.n	80036da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff ffc9 	bl	800366c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	1c99      	adds	r1, r3, #2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6251      	str	r1, [r2, #36]	; 0x24
 80036f6:	8819      	ldrh	r1, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <I2SEx_TxISR_I2SExt+0x90>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <I2SEx_TxISR_I2SExt+0x22>
 8003702:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <I2SEx_TxISR_I2SExt+0x94>)
 8003704:	e001      	b.n	800370a <I2SEx_TxISR_I2SExt+0x26>
 8003706:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800370a:	460a      	mov	r2, r1
 800370c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d121      	bne.n	800376a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a12      	ldr	r2, [pc, #72]	; (8003774 <I2SEx_TxISR_I2SExt+0x90>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <I2SEx_TxISR_I2SExt+0x50>
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <I2SEx_TxISR_I2SExt+0x94>)
 8003732:	e001      	b.n	8003738 <I2SEx_TxISR_I2SExt+0x54>
 8003734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	490d      	ldr	r1, [pc, #52]	; (8003774 <I2SEx_TxISR_I2SExt+0x90>)
 8003740:	428b      	cmp	r3, r1
 8003742:	d101      	bne.n	8003748 <I2SEx_TxISR_I2SExt+0x64>
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <I2SEx_TxISR_I2SExt+0x94>)
 8003746:	e001      	b.n	800374c <I2SEx_TxISR_I2SExt+0x68>
 8003748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003750:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff81 	bl	800366c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40003800 	.word	0x40003800
 8003778:	40003400 	.word	0x40003400

0800377c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68d8      	ldr	r0, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	1c99      	adds	r1, r3, #2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003794:	b282      	uxth	r2, r0
 8003796:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d113      	bne.n	80037d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff ff4a 	bl	800366c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a20      	ldr	r2, [pc, #128]	; (8003870 <I2SEx_RxISR_I2SExt+0x90>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <I2SEx_RxISR_I2SExt+0x16>
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <I2SEx_RxISR_I2SExt+0x94>)
 80037f4:	e001      	b.n	80037fa <I2SEx_RxISR_I2SExt+0x1a>
 80037f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fa:	68d8      	ldr	r0, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	1c99      	adds	r1, r3, #2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003806:	b282      	uxth	r2, r0
 8003808:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d121      	bne.n	8003866 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a12      	ldr	r2, [pc, #72]	; (8003870 <I2SEx_RxISR_I2SExt+0x90>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <I2SEx_RxISR_I2SExt+0x50>
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <I2SEx_RxISR_I2SExt+0x94>)
 800382e:	e001      	b.n	8003834 <I2SEx_RxISR_I2SExt+0x54>
 8003830:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	490d      	ldr	r1, [pc, #52]	; (8003870 <I2SEx_RxISR_I2SExt+0x90>)
 800383c:	428b      	cmp	r3, r1
 800383e:	d101      	bne.n	8003844 <I2SEx_RxISR_I2SExt+0x64>
 8003840:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <I2SEx_RxISR_I2SExt+0x94>)
 8003842:	e001      	b.n	8003848 <I2SEx_RxISR_I2SExt+0x68>
 8003844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003848:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800384c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff03 	bl	800366c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40003800 	.word	0x40003800
 8003874:	40003400 	.word	0x40003400

08003878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e267      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d075      	beq.n	8003982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003896:	4b88      	ldr	r3, [pc, #544]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d00c      	beq.n	80038bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038a2:	4b85      	ldr	r3, [pc, #532]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d112      	bne.n	80038d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ae:	4b82      	ldr	r3, [pc, #520]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ba:	d10b      	bne.n	80038d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038bc:	4b7e      	ldr	r3, [pc, #504]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d05b      	beq.n	8003980 <HAL_RCC_OscConfig+0x108>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d157      	bne.n	8003980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e242      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038dc:	d106      	bne.n	80038ec <HAL_RCC_OscConfig+0x74>
 80038de:	4b76      	ldr	r3, [pc, #472]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a75      	ldr	r2, [pc, #468]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e01d      	b.n	8003928 <HAL_RCC_OscConfig+0xb0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0x98>
 80038f6:	4b70      	ldr	r3, [pc, #448]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a6f      	ldr	r2, [pc, #444]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80038fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6c      	ldr	r2, [pc, #432]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e00b      	b.n	8003928 <HAL_RCC_OscConfig+0xb0>
 8003910:	4b69      	ldr	r3, [pc, #420]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a68      	ldr	r2, [pc, #416]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b66      	ldr	r3, [pc, #408]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a65      	ldr	r2, [pc, #404]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d013      	beq.n	8003958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fd fabc 	bl	8000eac <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003938:	f7fd fab8 	bl	8000eac <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	; 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e207      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	4b5b      	ldr	r3, [pc, #364]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0xc0>
 8003956:	e014      	b.n	8003982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fd faa8 	bl	8000eac <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003960:	f7fd faa4 	bl	8000eac <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	; 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e1f3      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	4b51      	ldr	r3, [pc, #324]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0xe8>
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d063      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800398e:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800399a:	4b47      	ldr	r3, [pc, #284]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d11c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a6:	4b44      	ldr	r3, [pc, #272]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d116      	bne.n	80039e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b2:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_RCC_OscConfig+0x152>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e1c7      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ca:	4b3b      	ldr	r3, [pc, #236]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4937      	ldr	r1, [pc, #220]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	e03a      	b.n	8003a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e8:	4b34      	ldr	r3, [pc, #208]	; (8003abc <HAL_RCC_OscConfig+0x244>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fd fa5d 	bl	8000eac <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f6:	f7fd fa59 	bl	8000eac <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1a8      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a14:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4925      	ldr	r1, [pc, #148]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]
 8003a28:	e015      	b.n	8003a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <HAL_RCC_OscConfig+0x244>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fa3c 	bl	8000eac <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a38:	f7fd fa38 	bl	8000eac <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e187      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d036      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d016      	beq.n	8003a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <HAL_RCC_OscConfig+0x248>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fd fa1c 	bl	8000eac <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a78:	f7fd fa18 	bl	8000eac <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e167      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x200>
 8003a96:	e01b      	b.n	8003ad0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <HAL_RCC_OscConfig+0x248>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9e:	f7fd fa05 	bl	8000eac <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa4:	e00e      	b.n	8003ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa6:	f7fd fa01 	bl	8000eac <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d907      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e150      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	42470000 	.word	0x42470000
 8003ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac4:	4b88      	ldr	r3, [pc, #544]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ea      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8097 	beq.w	8003c0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae2:	4b81      	ldr	r3, [pc, #516]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	4b7d      	ldr	r3, [pc, #500]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	4a7c      	ldr	r2, [pc, #496]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afc:	6413      	str	r3, [r2, #64]	; 0x40
 8003afe:	4b7a      	ldr	r3, [pc, #488]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0e:	4b77      	ldr	r3, [pc, #476]	; (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d118      	bne.n	8003b4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1a:	4b74      	ldr	r3, [pc, #464]	; (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a73      	ldr	r2, [pc, #460]	; (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b26:	f7fd f9c1 	bl	8000eac <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2e:	f7fd f9bd 	bl	8000eac <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e10c      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b40:	4b6a      	ldr	r3, [pc, #424]	; (8003cec <HAL_RCC_OscConfig+0x474>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d106      	bne.n	8003b62 <HAL_RCC_OscConfig+0x2ea>
 8003b54:	4b64      	ldr	r3, [pc, #400]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	4a63      	ldr	r2, [pc, #396]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b60:	e01c      	b.n	8003b9c <HAL_RCC_OscConfig+0x324>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b05      	cmp	r3, #5
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x30c>
 8003b6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	4a5e      	ldr	r2, [pc, #376]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b70:	f043 0304 	orr.w	r3, r3, #4
 8003b74:	6713      	str	r3, [r2, #112]	; 0x70
 8003b76:	4b5c      	ldr	r3, [pc, #368]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	4a5b      	ldr	r2, [pc, #364]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6713      	str	r3, [r2, #112]	; 0x70
 8003b82:	e00b      	b.n	8003b9c <HAL_RCC_OscConfig+0x324>
 8003b84:	4b58      	ldr	r3, [pc, #352]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b88:	4a57      	ldr	r2, [pc, #348]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b90:	4b55      	ldr	r3, [pc, #340]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	4a54      	ldr	r2, [pc, #336]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003b96:	f023 0304 	bic.w	r3, r3, #4
 8003b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d015      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7fd f982 	bl	8000eac <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7fd f97e 	bl	8000eac <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0cb      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc2:	4b49      	ldr	r3, [pc, #292]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0ee      	beq.n	8003bac <HAL_RCC_OscConfig+0x334>
 8003bce:	e014      	b.n	8003bfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd0:	f7fd f96c 	bl	8000eac <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fd f968 	bl	8000eac <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e0b5      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bee:	4b3e      	ldr	r3, [pc, #248]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ee      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c00:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	4a38      	ldr	r2, [pc, #224]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80a1 	beq.w	8003d58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c16:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d05c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d141      	bne.n	8003cae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2a:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <HAL_RCC_OscConfig+0x478>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fd f93c 	bl	8000eac <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c38:	f7fd f938 	bl	8000eac <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e087      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4a:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	019b      	lsls	r3, r3, #6
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	491b      	ldr	r1, [pc, #108]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <HAL_RCC_OscConfig+0x478>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c86:	f7fd f911 	bl	8000eac <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8e:	f7fd f90d 	bl	8000eac <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e05c      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x416>
 8003cac:	e054      	b.n	8003d58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_RCC_OscConfig+0x478>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd f8fa 	bl	8000eac <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd f8f6 	bl	8000eac <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e045      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x444>
 8003cda:	e03d      	b.n	8003d58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e038      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x4ec>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d028      	beq.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d121      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d11a      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d24:	4013      	ands	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d111      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d107      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800

08003d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0cc      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b68      	ldr	r3, [pc, #416]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d90c      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b65      	ldr	r3, [pc, #404]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b63      	ldr	r3, [pc, #396]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0b8      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d020      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dbc:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a58      	ldr	r2, [pc, #352]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd4:	4b53      	ldr	r3, [pc, #332]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4a52      	ldr	r2, [pc, #328]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de0:	4b50      	ldr	r3, [pc, #320]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	494d      	ldr	r1, [pc, #308]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d044      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d107      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d119      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e07f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	4b3f      	ldr	r3, [pc, #252]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e06f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e36:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e067      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e46:	4b37      	ldr	r3, [pc, #220]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 0203 	bic.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4934      	ldr	r1, [pc, #208]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e58:	f7fd f828 	bl	8000eac <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e60:	f7fd f824 	bl	8000eac <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e04f      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 020c 	and.w	r2, r3, #12
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d1eb      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e88:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d20c      	bcs.n	8003eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b22      	ldr	r3, [pc, #136]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e032      	b.n	8003f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ebc:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4916      	ldr	r1, [pc, #88]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eda:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	490e      	ldr	r1, [pc, #56]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eee:	f000 f821 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	490a      	ldr	r1, [pc, #40]	; (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003f00:	5ccb      	ldrb	r3, [r1, r3]
 8003f02:	fa22 f303 	lsr.w	r3, r2, r3
 8003f06:	4a09      	ldr	r2, [pc, #36]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc ff88 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023c00 	.word	0x40023c00
 8003f24:	40023800 	.word	0x40023800
 8003f28:	08008538 	.word	0x08008538
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	20000004 	.word	0x20000004

08003f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f38:	b094      	sub	sp, #80	; 0x50
 8003f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f40:	2300      	movs	r3, #0
 8003f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f44:	2300      	movs	r3, #0
 8003f46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f4c:	4b79      	ldr	r3, [pc, #484]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d00d      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x40>
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	f200 80e1 	bhi.w	8004120 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x34>
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d003      	beq.n	8003f6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f66:	e0db      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b73      	ldr	r3, [pc, #460]	; (8004138 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f6c:	e0db      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f6e:	4b73      	ldr	r3, [pc, #460]	; (800413c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f72:	e0d8      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f74:	4b6f      	ldr	r3, [pc, #444]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f7e:	4b6d      	ldr	r3, [pc, #436]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d063      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8a:	4b6a      	ldr	r3, [pc, #424]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	2200      	movs	r2, #0
 8003f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fa6:	4622      	mov	r2, r4
 8003fa8:	462b      	mov	r3, r5
 8003faa:	f04f 0000 	mov.w	r0, #0
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	0159      	lsls	r1, r3, #5
 8003fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb8:	0150      	lsls	r0, r2, #5
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	1a51      	subs	r1, r2, r1
 8003fc2:	6139      	str	r1, [r7, #16]
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd8:	4659      	mov	r1, fp
 8003fda:	018b      	lsls	r3, r1, #6
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	018a      	lsls	r2, r1, #6
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fec:	4659      	mov	r1, fp
 8003fee:	eb63 0901 	sbc.w	r9, r3, r1
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004006:	4690      	mov	r8, r2
 8004008:	4699      	mov	r9, r3
 800400a:	4623      	mov	r3, r4
 800400c:	eb18 0303 	adds.w	r3, r8, r3
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	462b      	mov	r3, r5
 8004014:	eb49 0303 	adc.w	r3, r9, r3
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004026:	4629      	mov	r1, r5
 8004028:	024b      	lsls	r3, r1, #9
 800402a:	4621      	mov	r1, r4
 800402c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004030:	4621      	mov	r1, r4
 8004032:	024a      	lsls	r2, r1, #9
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403a:	2200      	movs	r2, #0
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
 800403e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004040:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004044:	f7fc f8c8 	bl	80001d8 <__aeabi_uldivmod>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4613      	mov	r3, r2
 800404e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004050:	e058      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004052:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	099b      	lsrs	r3, r3, #6
 8004058:	2200      	movs	r2, #0
 800405a:	4618      	mov	r0, r3
 800405c:	4611      	mov	r1, r2
 800405e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	2300      	movs	r3, #0
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
 8004068:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	f04f 0000 	mov.w	r0, #0
 8004074:	f04f 0100 	mov.w	r1, #0
 8004078:	0159      	lsls	r1, r3, #5
 800407a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407e:	0150      	lsls	r0, r2, #5
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4641      	mov	r1, r8
 8004086:	ebb2 0a01 	subs.w	sl, r2, r1
 800408a:	4649      	mov	r1, r9
 800408c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800409c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040a4:	ebb2 040a 	subs.w	r4, r2, sl
 80040a8:	eb63 050b 	sbc.w	r5, r3, fp
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	00eb      	lsls	r3, r5, #3
 80040b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ba:	00e2      	lsls	r2, r4, #3
 80040bc:	4614      	mov	r4, r2
 80040be:	461d      	mov	r5, r3
 80040c0:	4643      	mov	r3, r8
 80040c2:	18e3      	adds	r3, r4, r3
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	464b      	mov	r3, r9
 80040c8:	eb45 0303 	adc.w	r3, r5, r3
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040da:	4629      	mov	r1, r5
 80040dc:	028b      	lsls	r3, r1, #10
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e4:	4621      	mov	r1, r4
 80040e6:	028a      	lsls	r2, r1, #10
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ee:	2200      	movs	r2, #0
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	61fa      	str	r2, [r7, #28]
 80040f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f8:	f7fc f86e 	bl	80001d8 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4613      	mov	r3, r2
 8004102:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_GetSysClockFreq+0x200>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	3301      	adds	r3, #1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800411e:	e002      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_RCC_GetSysClockFreq+0x204>)
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004128:	4618      	mov	r0, r3
 800412a:	3750      	adds	r7, #80	; 0x50
 800412c:	46bd      	mov	sp, r7
 800412e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	00f42400 	.word	0x00f42400
 800413c:	007a1200 	.word	0x007a1200

08004140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_RCC_GetHCLKFreq+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000000 	.word	0x20000000

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800415c:	f7ff fff0 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0a9b      	lsrs	r3, r3, #10
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	; (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40023800 	.word	0x40023800
 800417c:	08008548 	.word	0x08008548

08004180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004184:	f7ff ffdc 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004188:	4602      	mov	r2, r0
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	0b5b      	lsrs	r3, r3, #13
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	4903      	ldr	r1, [pc, #12]	; (80041a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004196:	5ccb      	ldrb	r3, [r1, r3]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40023800 	.word	0x40023800
 80041a4:	08008548 	.word	0x08008548

080041a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d035      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041d0:	4b62      	ldr	r3, [pc, #392]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041d6:	f7fc fe69 	bl	8000eac <HAL_GetTick>
 80041da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041de:	f7fc fe65 	bl	8000eac <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e0b0      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f0:	4b5b      	ldr	r3, [pc, #364]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f0      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	019a      	lsls	r2, r3, #6
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	071b      	lsls	r3, r3, #28
 8004208:	4955      	ldr	r1, [pc, #340]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004210:	4b52      	ldr	r3, [pc, #328]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004216:	f7fc fe49 	bl	8000eac <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800421e:	f7fc fe45 	bl	8000eac <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e090      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004230:	4b4b      	ldr	r3, [pc, #300]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8083 	beq.w	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	4b44      	ldr	r3, [pc, #272]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	4a43      	ldr	r2, [pc, #268]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6413      	str	r3, [r2, #64]	; 0x40
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004266:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a3e      	ldr	r2, [pc, #248]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800426c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004270:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004272:	f7fc fe1b 	bl	8000eac <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004278:	e008      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800427a:	f7fc fe17 	bl	8000eac <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e062      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800428c:	4b35      	ldr	r3, [pc, #212]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02f      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d028      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b6:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042c6:	4b28      	ldr	r3, [pc, #160]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042cc:	4a24      	ldr	r2, [pc, #144]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042d2:	4b23      	ldr	r3, [pc, #140]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d114      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042de:	f7fc fde5 	bl	8000eac <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fc fde1 	bl	8000eac <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e02a      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	4b18      	ldr	r3, [pc, #96]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ee      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004314:	d10d      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432a:	490d      	ldr	r1, [pc, #52]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432c:	4313      	orrs	r3, r2
 800432e:	608b      	str	r3, [r1, #8]
 8004330:	e005      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004338:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800433c:	6093      	str	r3, [r2, #8]
 800433e:	4b08      	ldr	r3, [pc, #32]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004340:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434a:	4905      	ldr	r1, [pc, #20]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	42470068 	.word	0x42470068
 8004360:	40023800 	.word	0x40023800
 8004364:	40007000 	.word	0x40007000
 8004368:	42470e40 	.word	0x42470e40

0800436c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d13e      	bne.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800438a:	4b23      	ldr	r3, [pc, #140]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d12f      	bne.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043a0:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043a2:	617b      	str	r3, [r7, #20]
          break;
 80043a4:	e02f      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043a6:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b2:	d108      	bne.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043b4:	4b18      	ldr	r3, [pc, #96]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043bc:	4a18      	ldr	r2, [pc, #96]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	e007      	b.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ce:	4a15      	ldr	r2, [pc, #84]	; (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043dc:	099b      	lsrs	r3, r3, #6
 80043de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f0:	0f1b      	lsrs	r3, r3, #28
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	617b      	str	r3, [r7, #20]
          break;
 80043fe:	e002      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
          break;
 8004404:	bf00      	nop
        }
      }
      break;
 8004406:	bf00      	nop
    }
  }
  return frequency;
 8004408:	697b      	ldr	r3, [r7, #20]
}
 800440a:	4618      	mov	r0, r3
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800
 800441c:	00bb8000 	.word	0x00bb8000
 8004420:	007a1200 	.word	0x007a1200
 8004424:	00f42400 	.word	0x00f42400

08004428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e07b      	b.n	8004532 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d108      	bne.n	8004454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444a:	d009      	beq.n	8004460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	61da      	str	r2, [r3, #28]
 8004452:	e005      	b.n	8004460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc fb7a 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004496:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e4:	ea42 0103 	orr.w	r1, r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	f003 0104 	and.w	r1, r3, #4
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	f003 0210 	and.w	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004520:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e03f      	b.n	80045cc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d106      	bne.n	8004566 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fc fb4f 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2224      	movs	r2, #36	; 0x24
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800457c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f928 	bl	80047d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004592:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d17c      	bne.n	80046ee <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_UART_Transmit+0x2c>
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e075      	b.n	80046f0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_UART_Transmit+0x3e>
 800460e:	2302      	movs	r3, #2
 8004610:	e06e      	b.n	80046f0 <HAL_UART_Transmit+0x11c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2221      	movs	r2, #33	; 0x21
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004628:	f7fc fc40 	bl	8000eac <HAL_GetTick>
 800462c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	88fa      	ldrh	r2, [r7, #6]
 8004632:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004642:	d108      	bne.n	8004656 <HAL_UART_Transmit+0x82>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d104      	bne.n	8004656 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	e003      	b.n	800465e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004666:	e02a      	b.n	80046be <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2200      	movs	r2, #0
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f840 	bl	80046f8 <UART_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e036      	b.n	80046f0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004696:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	3302      	adds	r3, #2
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	e007      	b.n	80046b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	781a      	ldrb	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3301      	adds	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1cf      	bne.n	8004668 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2200      	movs	r2, #0
 80046d0:	2140      	movs	r1, #64	; 0x40
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f810 	bl	80046f8 <UART_WaitOnFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e006      	b.n	80046f0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b090      	sub	sp, #64	; 0x40
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004708:	e050      	b.n	80047ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d04c      	beq.n	80047ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <UART_WaitOnFlagUntilTimeout+0x30>
 8004718:	f7fc fbc8 	bl	8000eac <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004724:	429a      	cmp	r2, r3
 8004726:	d241      	bcs.n	80047ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	330c      	adds	r3, #12
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800473e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	330c      	adds	r3, #12
 8004746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004748:	637a      	str	r2, [r7, #52]	; 0x34
 800474a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800474e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e5      	bne.n	8004728 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3314      	adds	r3, #20
 8004762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	613b      	str	r3, [r7, #16]
   return(result);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	63bb      	str	r3, [r7, #56]	; 0x38
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3314      	adds	r3, #20
 800477a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800477c:	623a      	str	r2, [r7, #32]
 800477e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	69f9      	ldr	r1, [r7, #28]
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	61bb      	str	r3, [r7, #24]
   return(result);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e5      	bne.n	800475c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e00f      	b.n	80047cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4013      	ands	r3, r2
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d09f      	beq.n	800470a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3740      	adds	r7, #64	; 0x40
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b0c0      	sub	sp, #256	; 0x100
 80047da:	af00      	add	r7, sp, #0
 80047dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	68d9      	ldr	r1, [r3, #12]
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	ea40 0301 	orr.w	r3, r0, r1
 80047fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	431a      	orrs	r2, r3
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	431a      	orrs	r2, r3
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800482c:	f021 010c 	bic.w	r1, r1, #12
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800483a:	430b      	orrs	r3, r1
 800483c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484e:	6999      	ldr	r1, [r3, #24]
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	ea40 0301 	orr.w	r3, r0, r1
 800485a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b8f      	ldr	r3, [pc, #572]	; (8004aa0 <UART_SetConfig+0x2cc>)
 8004864:	429a      	cmp	r2, r3
 8004866:	d005      	beq.n	8004874 <UART_SetConfig+0xa0>
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b8d      	ldr	r3, [pc, #564]	; (8004aa4 <UART_SetConfig+0x2d0>)
 8004870:	429a      	cmp	r2, r3
 8004872:	d104      	bne.n	800487e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004874:	f7ff fc84 	bl	8004180 <HAL_RCC_GetPCLK2Freq>
 8004878:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800487c:	e003      	b.n	8004886 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800487e:	f7ff fc6b 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8004882:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004890:	f040 810c 	bne.w	8004aac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004898:	2200      	movs	r2, #0
 800489a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800489e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048a6:	4622      	mov	r2, r4
 80048a8:	462b      	mov	r3, r5
 80048aa:	1891      	adds	r1, r2, r2
 80048ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80048ae:	415b      	adcs	r3, r3
 80048b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048b6:	4621      	mov	r1, r4
 80048b8:	eb12 0801 	adds.w	r8, r2, r1
 80048bc:	4629      	mov	r1, r5
 80048be:	eb43 0901 	adc.w	r9, r3, r1
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048d6:	4690      	mov	r8, r2
 80048d8:	4699      	mov	r9, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	eb18 0303 	adds.w	r3, r8, r3
 80048e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048e4:	462b      	mov	r3, r5
 80048e6:	eb49 0303 	adc.w	r3, r9, r3
 80048ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004902:	460b      	mov	r3, r1
 8004904:	18db      	adds	r3, r3, r3
 8004906:	653b      	str	r3, [r7, #80]	; 0x50
 8004908:	4613      	mov	r3, r2
 800490a:	eb42 0303 	adc.w	r3, r2, r3
 800490e:	657b      	str	r3, [r7, #84]	; 0x54
 8004910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004918:	f7fb fc5e 	bl	80001d8 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <UART_SetConfig+0x2d4>)
 8004922:	fba3 2302 	umull	r2, r3, r3, r2
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	011c      	lsls	r4, r3, #4
 800492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800492e:	2200      	movs	r2, #0
 8004930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004934:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800493c:	4642      	mov	r2, r8
 800493e:	464b      	mov	r3, r9
 8004940:	1891      	adds	r1, r2, r2
 8004942:	64b9      	str	r1, [r7, #72]	; 0x48
 8004944:	415b      	adcs	r3, r3
 8004946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800494c:	4641      	mov	r1, r8
 800494e:	eb12 0a01 	adds.w	sl, r2, r1
 8004952:	4649      	mov	r1, r9
 8004954:	eb43 0b01 	adc.w	fp, r3, r1
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800496c:	4692      	mov	sl, r2
 800496e:	469b      	mov	fp, r3
 8004970:	4643      	mov	r3, r8
 8004972:	eb1a 0303 	adds.w	r3, sl, r3
 8004976:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800497a:	464b      	mov	r3, r9
 800497c:	eb4b 0303 	adc.w	r3, fp, r3
 8004980:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004990:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004998:	460b      	mov	r3, r1
 800499a:	18db      	adds	r3, r3, r3
 800499c:	643b      	str	r3, [r7, #64]	; 0x40
 800499e:	4613      	mov	r3, r2
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	647b      	str	r3, [r7, #68]	; 0x44
 80049a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049ae:	f7fb fc13 	bl	80001d8 <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <UART_SetConfig+0x2d4>)
 80049ba:	fba3 2301 	umull	r2, r3, r3, r1
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2264      	movs	r2, #100	; 0x64
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	1acb      	subs	r3, r1, r3
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049ce:	4b36      	ldr	r3, [pc, #216]	; (8004aa8 <UART_SetConfig+0x2d4>)
 80049d0:	fba3 2302 	umull	r2, r3, r3, r2
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049dc:	441c      	add	r4, r3
 80049de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80049f8:	415b      	adcs	r3, r3
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a00:	4641      	mov	r1, r8
 8004a02:	1851      	adds	r1, r2, r1
 8004a04:	6339      	str	r1, [r7, #48]	; 0x30
 8004a06:	4649      	mov	r1, r9
 8004a08:	414b      	adcs	r3, r1
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a18:	4659      	mov	r1, fp
 8004a1a:	00cb      	lsls	r3, r1, #3
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a22:	4651      	mov	r1, sl
 8004a24:	00ca      	lsls	r2, r1, #3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a34:	464b      	mov	r3, r9
 8004a36:	460a      	mov	r2, r1
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a54:	460b      	mov	r3, r1
 8004a56:	18db      	adds	r3, r3, r3
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a6a:	f7fb fbb5 	bl	80001d8 <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <UART_SetConfig+0x2d4>)
 8004a74:	fba3 1302 	umull	r1, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	2164      	movs	r1, #100	; 0x64
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	3332      	adds	r3, #50	; 0x32
 8004a86:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <UART_SetConfig+0x2d4>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	f003 0207 	and.w	r2, r3, #7
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4422      	add	r2, r4
 8004a9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a9c:	e106      	b.n	8004cac <UART_SetConfig+0x4d8>
 8004a9e:	bf00      	nop
 8004aa0:	40011000 	.word	0x40011000
 8004aa4:	40011400 	.word	0x40011400
 8004aa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ab6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004aba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004abe:	4642      	mov	r2, r8
 8004ac0:	464b      	mov	r3, r9
 8004ac2:	1891      	adds	r1, r2, r2
 8004ac4:	6239      	str	r1, [r7, #32]
 8004ac6:	415b      	adcs	r3, r3
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ace:	4641      	mov	r1, r8
 8004ad0:	1854      	adds	r4, r2, r1
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	eb43 0501 	adc.w	r5, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	00eb      	lsls	r3, r5, #3
 8004ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae6:	00e2      	lsls	r2, r4, #3
 8004ae8:	4614      	mov	r4, r2
 8004aea:	461d      	mov	r5, r3
 8004aec:	4643      	mov	r3, r8
 8004aee:	18e3      	adds	r3, r4, r3
 8004af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004af4:	464b      	mov	r3, r9
 8004af6:	eb45 0303 	adc.w	r3, r5, r3
 8004afa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	008b      	lsls	r3, r1, #2
 8004b1e:	4621      	mov	r1, r4
 8004b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b24:	4621      	mov	r1, r4
 8004b26:	008a      	lsls	r2, r1, #2
 8004b28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b2c:	f7fb fb54 	bl	80001d8 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4b60      	ldr	r3, [pc, #384]	; (8004cb8 <UART_SetConfig+0x4e4>)
 8004b36:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	011c      	lsls	r4, r3, #4
 8004b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b50:	4642      	mov	r2, r8
 8004b52:	464b      	mov	r3, r9
 8004b54:	1891      	adds	r1, r2, r2
 8004b56:	61b9      	str	r1, [r7, #24]
 8004b58:	415b      	adcs	r3, r3
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b60:	4641      	mov	r1, r8
 8004b62:	1851      	adds	r1, r2, r1
 8004b64:	6139      	str	r1, [r7, #16]
 8004b66:	4649      	mov	r1, r9
 8004b68:	414b      	adcs	r3, r1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b78:	4659      	mov	r1, fp
 8004b7a:	00cb      	lsls	r3, r1, #3
 8004b7c:	4651      	mov	r1, sl
 8004b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b82:	4651      	mov	r1, sl
 8004b84:	00ca      	lsls	r2, r1, #3
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b94:	464b      	mov	r3, r9
 8004b96:	460a      	mov	r2, r1
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004baa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004bb8:	4649      	mov	r1, r9
 8004bba:	008b      	lsls	r3, r1, #2
 8004bbc:	4641      	mov	r1, r8
 8004bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc2:	4641      	mov	r1, r8
 8004bc4:	008a      	lsls	r2, r1, #2
 8004bc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bca:	f7fb fb05 	bl	80001d8 <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4b38      	ldr	r3, [pc, #224]	; (8004cb8 <UART_SetConfig+0x4e4>)
 8004bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2264      	movs	r2, #100	; 0x64
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	1acb      	subs	r3, r1, r3
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	3332      	adds	r3, #50	; 0x32
 8004be8:	4a33      	ldr	r2, [pc, #204]	; (8004cb8 <UART_SetConfig+0x4e4>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf4:	441c      	add	r4, r3
 8004bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	673b      	str	r3, [r7, #112]	; 0x70
 8004bfe:	677a      	str	r2, [r7, #116]	; 0x74
 8004c00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	1891      	adds	r1, r2, r2
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c14:	4641      	mov	r1, r8
 8004c16:	1851      	adds	r1, r2, r1
 8004c18:	6039      	str	r1, [r7, #0]
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	414b      	adcs	r3, r1
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	00cb      	lsls	r3, r1, #3
 8004c30:	4651      	mov	r1, sl
 8004c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c36:	4651      	mov	r1, sl
 8004c38:	00ca      	lsls	r2, r1, #3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4642      	mov	r2, r8
 8004c42:	189b      	adds	r3, r3, r2
 8004c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c46:	464b      	mov	r3, r9
 8004c48:	460a      	mov	r2, r1
 8004c4a:	eb42 0303 	adc.w	r3, r2, r3
 8004c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	663b      	str	r3, [r7, #96]	; 0x60
 8004c5a:	667a      	str	r2, [r7, #100]	; 0x64
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c68:	4649      	mov	r1, r9
 8004c6a:	008b      	lsls	r3, r1, #2
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c72:	4641      	mov	r1, r8
 8004c74:	008a      	lsls	r2, r1, #2
 8004c76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c7a:	f7fb faad 	bl	80001d8 <__aeabi_uldivmod>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <UART_SetConfig+0x4e4>)
 8004c84:	fba3 1302 	umull	r1, r3, r3, r2
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	2164      	movs	r1, #100	; 0x64
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	3332      	adds	r3, #50	; 0x32
 8004c96:	4a08      	ldr	r2, [pc, #32]	; (8004cb8 <UART_SetConfig+0x4e4>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	f003 020f 	and.w	r2, r3, #15
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4422      	add	r2, r4
 8004caa:	609a      	str	r2, [r3, #8]
}
 8004cac:	bf00      	nop
 8004cae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb8:	51eb851f 	.word	0x51eb851f

08004cbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	f107 001c 	add.w	r0, r7, #28
 8004cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d122      	bne.n	8004d1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d105      	bne.n	8004d0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f9c0 	bl	8005094 <USB_CoreReset>
 8004d14:	4603      	mov	r3, r0
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	e01a      	b.n	8004d50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f9b4 	bl	8005094 <USB_CoreReset>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
 8004d42:	e005      	b.n	8004d50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d10b      	bne.n	8004d6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f043 0206 	orr.w	r2, r3, #6
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f043 0220 	orr.w	r2, r3, #32
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d7a:	b004      	add	sp, #16
 8004d7c:	4770      	bx	lr

08004d7e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f043 0201 	orr.w	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f023 0201 	bic.w	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	460b      	mov	r3, r1
 8004dcc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d115      	bne.n	8004e10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004df0:	2001      	movs	r0, #1
 8004df2:	f7fc f867 	bl	8000ec4 <HAL_Delay>
      ms++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f93a 	bl	8005076 <USB_GetMode>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d01e      	beq.n	8004e46 <USB_SetCurrentMode+0x84>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b31      	cmp	r3, #49	; 0x31
 8004e0c:	d9f0      	bls.n	8004df0 <USB_SetCurrentMode+0x2e>
 8004e0e:	e01a      	b.n	8004e46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d115      	bne.n	8004e42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e22:	2001      	movs	r0, #1
 8004e24:	f7fc f84e 	bl	8000ec4 <HAL_Delay>
      ms++;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f921 	bl	8005076 <USB_GetMode>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <USB_SetCurrentMode+0x84>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b31      	cmp	r3, #49	; 0x31
 8004e3e:	d9f0      	bls.n	8004e22 <USB_SetCurrentMode+0x60>
 8004e40:	e001      	b.n	8004e46 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e005      	b.n	8004e52 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b32      	cmp	r3, #50	; 0x32
 8004e4a:	d101      	bne.n	8004e50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <USB_FlushTxFifo+0x64>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e01b      	b.n	8004eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	daf2      	bge.n	8004e6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	019b      	lsls	r3, r3, #6
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <USB_FlushTxFifo+0x64>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e006      	b.n	8004eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d0f0      	beq.n	8004e94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	00030d40 	.word	0x00030d40

08004ec4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <USB_FlushRxFifo+0x5c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e018      	b.n	8004f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	daf2      	bge.n	8004ed0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <USB_FlushRxFifo+0x5c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e006      	b.n	8004f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d0f0      	beq.n	8004ef4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	00030d40 	.word	0x00030d40

08004f24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b089      	sub	sp, #36	; 0x24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4611      	mov	r1, r2
 8004f30:	461a      	mov	r2, r3
 8004f32:	460b      	mov	r3, r1
 8004f34:	71fb      	strb	r3, [r7, #7]
 8004f36:	4613      	mov	r3, r2
 8004f38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d123      	bne.n	8004f92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f4a:	88bb      	ldrh	r3, [r7, #4]
 8004f4c:	3303      	adds	r3, #3
 8004f4e:	089b      	lsrs	r3, r3, #2
 8004f50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	e018      	b.n	8004f8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	031a      	lsls	r2, r3, #12
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f64:	461a      	mov	r2, r3
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	3301      	adds	r3, #1
 8004f76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3301      	adds	r3, #1
 8004f82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	3301      	adds	r3, #1
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d3e2      	bcc.n	8004f58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3724      	adds	r7, #36	; 0x24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b08b      	sub	sp, #44	; 0x2c
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fb6:	88fb      	ldrh	r3, [r7, #6]
 8004fb8:	089b      	lsrs	r3, r3, #2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	623b      	str	r3, [r7, #32]
 8004fca:	e014      	b.n	8004ff6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	3301      	adds	r3, #1
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	3301      	adds	r3, #1
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	6a3a      	ldr	r2, [r7, #32]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d3e6      	bcc.n	8004fcc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ffe:	8bfb      	ldrh	r3, [r7, #30]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01e      	beq.n	8005042 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800500e:	461a      	mov	r2, r3
 8005010:	f107 0310 	add.w	r3, r7, #16
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
 8005024:	b2da      	uxtb	r2, r3
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	701a      	strb	r2, [r3, #0]
      i++;
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	3301      	adds	r3, #1
 800502e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	3301      	adds	r3, #1
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005036:	8bfb      	ldrh	r3, [r7, #30]
 8005038:	3b01      	subs	r3, #1
 800503a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800503c:	8bfb      	ldrh	r3, [r7, #30]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1ea      	bne.n	8005018 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005044:	4618      	mov	r0, r3
 8005046:	372c      	adds	r7, #44	; 0x2c
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4013      	ands	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005068:	68fb      	ldr	r3, [r7, #12]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f003 0301 	and.w	r3, r3, #1
}
 8005086:	4618      	mov	r0, r3
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <USB_CoreReset+0x64>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e01b      	b.n	80050ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	daf2      	bge.n	80050a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f043 0201 	orr.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3301      	adds	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <USB_CoreReset+0x64>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e006      	b.n	80050ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d0f0      	beq.n	80050ca <USB_CoreReset+0x36>

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	00030d40 	.word	0x00030d40

080050fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050fc:	b084      	sub	sp, #16
 80050fe:	b580      	push	{r7, lr}
 8005100:	b086      	sub	sp, #24
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800510a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800511c:	461a      	mov	r2, r3
 800511e:	2300      	movs	r3, #0
 8005120:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514e:	2b00      	cmp	r3, #0
 8005150:	d018      	beq.n	8005184 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	2b01      	cmp	r3, #1
 8005156:	d10a      	bne.n	800516e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005166:	f043 0304 	orr.w	r3, r3, #4
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	e014      	b.n	8005198 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800517c:	f023 0304 	bic.w	r3, r3, #4
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e009      	b.n	8005198 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005192:	f023 0304 	bic.w	r3, r3, #4
 8005196:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005198:	2110      	movs	r1, #16
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fe5e 	bl	8004e5c <USB_FlushTxFifo>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff fe8a 	bl	8004ec4 <USB_FlushRxFifo>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	e015      	b.n	80051ec <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051cc:	461a      	mov	r2, r3
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295
 80051d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e0:	461a      	mov	r2, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	3301      	adds	r3, #1
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d3e5      	bcc.n	80051c0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005200:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005214:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a13      	ldr	r2, [pc, #76]	; (8005268 <USB_HostInit+0x16c>)
 800521a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a13      	ldr	r2, [pc, #76]	; (800526c <USB_HostInit+0x170>)
 8005220:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005224:	e009      	b.n	800523a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2280      	movs	r2, #128	; 0x80
 800522a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a10      	ldr	r2, [pc, #64]	; (8005270 <USB_HostInit+0x174>)
 8005230:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a0f      	ldr	r2, [pc, #60]	; (8005274 <USB_HostInit+0x178>)
 8005236:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	2b00      	cmp	r3, #0
 800523e:	d105      	bne.n	800524c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f043 0210 	orr.w	r2, r3, #16
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	4b09      	ldr	r3, [pc, #36]	; (8005278 <USB_HostInit+0x17c>)
 8005252:	4313      	orrs	r3, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005258:	7dfb      	ldrb	r3, [r7, #23]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005264:	b004      	add	sp, #16
 8005266:	4770      	bx	lr
 8005268:	01000200 	.word	0x01000200
 800526c:	00e00300 	.word	0x00e00300
 8005270:	00600080 	.word	0x00600080
 8005274:	004000e0 	.word	0x004000e0
 8005278:	a3200008 	.word	0xa3200008

0800527c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	68f9      	ldr	r1, [r7, #12]
 80052b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d107      	bne.n	80052ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052c4:	461a      	mov	r2, r3
 80052c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80052ca:	6053      	str	r3, [r2, #4]
 80052cc:	e009      	b.n	80052e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d106      	bne.n	80052e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052da:	461a      	mov	r2, r3
 80052dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80052e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005310:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800531a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005320:	2064      	movs	r0, #100	; 0x64
 8005322:	f7fb fdcf 	bl	8000ec4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800532e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005332:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005334:	200a      	movs	r0, #10
 8005336:	f7fb fdc5 	bl	8000ec4 <HAL_Delay>

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005368:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d109      	bne.n	8005388 <USB_DriveVbus+0x44>
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d106      	bne.n	8005388 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005386:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005392:	d109      	bne.n	80053a8 <USB_DriveVbus+0x64>
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	0c5b      	lsrs	r3, r3, #17
 80053d4:	f003 0303 	and.w	r3, r3, #3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	b29b      	uxth	r3, r3
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	4608      	mov	r0, r1
 8005412:	4611      	mov	r1, r2
 8005414:	461a      	mov	r2, r3
 8005416:	4603      	mov	r3, r0
 8005418:	70fb      	strb	r3, [r7, #3]
 800541a:	460b      	mov	r3, r1
 800541c:	70bb      	strb	r3, [r7, #2]
 800541e:	4613      	mov	r3, r2
 8005420:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005436:	461a      	mov	r2, r3
 8005438:	f04f 33ff 	mov.w	r3, #4294967295
 800543c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800543e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005442:	2b03      	cmp	r3, #3
 8005444:	d87e      	bhi.n	8005544 <USB_HC_Init+0x13c>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <USB_HC_Init+0x44>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	0800545d 	.word	0x0800545d
 8005450:	08005507 	.word	0x08005507
 8005454:	0800545d 	.word	0x0800545d
 8005458:	080054c9 	.word	0x080054c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	461a      	mov	r2, r3
 800546a:	f240 439d 	movw	r3, #1181	; 0x49d
 800546e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005470:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005474:	2b00      	cmp	r3, #0
 8005476:	da10      	bge.n	800549a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	78fa      	ldrb	r2, [r7, #3]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	440a      	add	r2, r1
 800548e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005496:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005498:	e057      	b.n	800554a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d051      	beq.n	800554a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054c4:	60d3      	str	r3, [r2, #12]
      break;
 80054c6:	e040      	b.n	800554a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d4:	461a      	mov	r2, r3
 80054d6:	f240 639d 	movw	r3, #1693	; 0x69d
 80054da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	da34      	bge.n	800554e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005502:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005504:	e023      	b.n	800554e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4413      	add	r3, r2
 800550e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005512:	461a      	mov	r2, r3
 8005514:	f240 2325 	movw	r3, #549	; 0x225
 8005518:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800551a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800551e:	2b00      	cmp	r3, #0
 8005520:	da17      	bge.n	8005552 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	4413      	add	r3, r2
 800552a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	440a      	add	r2, r1
 8005538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800553c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005540:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005542:	e006      	b.n	8005552 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	77fb      	strb	r3, [r7, #31]
      break;
 8005548:	e004      	b.n	8005554 <USB_HC_Init+0x14c>
      break;
 800554a:	bf00      	nop
 800554c:	e002      	b.n	8005554 <USB_HC_Init+0x14c>
      break;
 800554e:	bf00      	nop
 8005550:	e000      	b.n	8005554 <USB_HC_Init+0x14c>
      break;
 8005552:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4413      	add	r3, r2
 800555c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	78fa      	ldrb	r2, [r7, #3]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	440a      	add	r2, r1
 800556a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800556e:	f043 0302 	orr.w	r3, r3, #2
 8005572:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800557a:	699a      	ldr	r2, [r3, #24]
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	2101      	movs	r1, #1
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	6939      	ldr	r1, [r7, #16]
 800558a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800558e:	4313      	orrs	r3, r2
 8005590:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800559e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da03      	bge.n	80055ae <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80055a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	e001      	b.n	80055b2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff feff 	bl	80053b6 <USB_GetHostSpeed>
 80055b8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80055ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d106      	bne.n	80055d0 <USB_HC_Init+0x1c8>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d003      	beq.n	80055d0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80055c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e001      	b.n	80055d4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055d4:	787b      	ldrb	r3, [r7, #1]
 80055d6:	059b      	lsls	r3, r3, #22
 80055d8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055dc:	78bb      	ldrb	r3, [r7, #2]
 80055de:	02db      	lsls	r3, r3, #11
 80055e0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055e4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055ea:	049b      	lsls	r3, r3, #18
 80055ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80055f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	0159      	lsls	r1, r3, #5
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	440b      	add	r3, r1
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005610:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005612:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005616:	2b03      	cmp	r3, #3
 8005618:	d003      	beq.n	8005622 <USB_HC_Init+0x21a>
 800561a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800561e:	2b01      	cmp	r3, #1
 8005620:	d10f      	bne.n	8005642 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	440a      	add	r2, r1
 8005638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800563c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005640:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005642:	7ffb      	ldrb	r3, [r7, #31]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3720      	adds	r7, #32
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08c      	sub	sp, #48	; 0x30
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	4613      	mov	r3, r2
 8005658:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	785b      	ldrb	r3, [r3, #1]
 8005662:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005668:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d02d      	beq.n	80056d2 <USB_HC_StartXfer+0x86>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	791b      	ldrb	r3, [r3, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d129      	bne.n	80056d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d117      	bne.n	80056b4 <USB_HC_StartXfer+0x68>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	79db      	ldrb	r3, [r3, #7]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <USB_HC_StartXfer+0x48>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	79db      	ldrb	r3, [r3, #7]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d10f      	bne.n	80056b4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	4413      	add	r3, r2
 800569c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	0151      	lsls	r1, r2, #5
 80056a6:	6a3a      	ldr	r2, [r7, #32]
 80056a8:	440a      	add	r2, r1
 80056aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <USB_HC_StartXfer+0x86>
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	795b      	ldrb	r3, [r3, #5]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d107      	bne.n	80056d2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	785b      	ldrb	r3, [r3, #1]
 80056c6:	4619      	mov	r1, r3
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fa0f 	bl	8005aec <USB_DoPing>
      return HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e0f8      	b.n	80058c4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d018      	beq.n	800570c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	8912      	ldrh	r2, [r2, #8]
 80056e2:	4413      	add	r3, r2
 80056e4:	3b01      	subs	r3, #1
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	8912      	ldrh	r2, [r2, #8]
 80056ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80056f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056f2:	8b7b      	ldrh	r3, [r7, #26]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d90b      	bls.n	8005710 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80056f8:	8b7b      	ldrh	r3, [r7, #26]
 80056fa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	8912      	ldrh	r2, [r2, #8]
 8005702:	fb03 f202 	mul.w	r2, r3, r2
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	611a      	str	r2, [r3, #16]
 800570a:	e001      	b.n	8005710 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800570c:	2301      	movs	r3, #1
 800570e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	78db      	ldrb	r3, [r3, #3]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d007      	beq.n	8005728 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005718:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	8912      	ldrh	r2, [r2, #8]
 800571e:	fb03 f202 	mul.w	r2, r3, r2
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	611a      	str	r2, [r3, #16]
 8005726:	e003      	b.n	8005730 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	695a      	ldr	r2, [r3, #20]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005738:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800573a:	04d9      	lsls	r1, r3, #19
 800573c:	4b63      	ldr	r3, [pc, #396]	; (80058cc <USB_HC_StartXfer+0x280>)
 800573e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005740:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	7a9b      	ldrb	r3, [r3, #10]
 8005746:	075b      	lsls	r3, r3, #29
 8005748:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800574c:	69f9      	ldr	r1, [r7, #28]
 800574e:	0148      	lsls	r0, r1, #5
 8005750:	6a39      	ldr	r1, [r7, #32]
 8005752:	4401      	add	r1, r0
 8005754:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005758:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800575a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	68d9      	ldr	r1, [r3, #12]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	4413      	add	r3, r2
 800576e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005772:	460a      	mov	r2, r1
 8005774:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	bf0c      	ite	eq
 8005786:	2301      	moveq	r3, #1
 8005788:	2300      	movne	r3, #0
 800578a:	b2db      	uxtb	r3, r3
 800578c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	7e7b      	ldrb	r3, [r7, #25]
 80057be:	075b      	lsls	r3, r3, #29
 80057c0:	69f9      	ldr	r1, [r7, #28]
 80057c2:	0148      	lsls	r0, r1, #5
 80057c4:	6a39      	ldr	r1, [r7, #32]
 80057c6:	4401      	add	r1, r0
 80057c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80057cc:	4313      	orrs	r3, r2
 80057ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057e6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	78db      	ldrb	r3, [r3, #3]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	e003      	b.n	8005802 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005800:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005808:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	461a      	mov	r2, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e04e      	b.n	80058c4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	78db      	ldrb	r3, [r3, #3]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d149      	bne.n	80058c2 <USB_HC_StartXfer+0x276>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d045      	beq.n	80058c2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	79db      	ldrb	r3, [r3, #7]
 800583a:	2b03      	cmp	r3, #3
 800583c:	d830      	bhi.n	80058a0 <USB_HC_StartXfer+0x254>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <USB_HC_StartXfer+0x1f8>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005855 	.word	0x08005855
 8005848:	08005879 	.word	0x08005879
 800584c:	08005855 	.word	0x08005855
 8005850:	08005879 	.word	0x08005879
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	3303      	adds	r3, #3
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800585e:	8afa      	ldrh	r2, [r7, #22]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	b29b      	uxth	r3, r3
 8005866:	429a      	cmp	r2, r3
 8005868:	d91c      	bls.n	80058a4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f043 0220 	orr.w	r2, r3, #32
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	619a      	str	r2, [r3, #24]
        }
        break;
 8005876:	e015      	b.n	80058a4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	3303      	adds	r3, #3
 800587e:	089b      	lsrs	r3, r3, #2
 8005880:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005882:	8afa      	ldrh	r2, [r7, #22]
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	b29b      	uxth	r3, r3
 800588e:	429a      	cmp	r2, r3
 8005890:	d90a      	bls.n	80058a8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	619a      	str	r2, [r3, #24]
        }
        break;
 800589e:	e003      	b.n	80058a8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80058a0:	bf00      	nop
 80058a2:	e002      	b.n	80058aa <USB_HC_StartXfer+0x25e>
        break;
 80058a4:	bf00      	nop
 80058a6:	e000      	b.n	80058aa <USB_HC_StartXfer+0x25e>
        break;
 80058a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	68d9      	ldr	r1, [r3, #12]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	785a      	ldrb	r2, [r3, #1]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2000      	movs	r0, #0
 80058ba:	9000      	str	r0, [sp, #0]
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff fb31 	bl	8004f24 <USB_WritePacket>
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3728      	adds	r7, #40	; 0x28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	1ff80000 	.word	0x1ff80000

080058d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	b29b      	uxth	r3, r3
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b089      	sub	sp, #36	; 0x24
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	0c9b      	lsrs	r3, r3, #18
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	4413      	add	r3, r2
 8005928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	0fdb      	lsrs	r3, r3, #31
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b20      	cmp	r3, #32
 8005940:	d104      	bne.n	800594c <USB_HC_Halt+0x5a>
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	e0c8      	b.n	8005ade <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <USB_HC_Halt+0x66>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d163      	bne.n	8005a20 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	440a      	add	r2, r1
 800596e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005972:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005976:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	f040 80ab 	bne.w	8005adc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d133      	bne.n	80059fa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	0151      	lsls	r1, r2, #5
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	440a      	add	r2, r1
 80059c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059d0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059de:	d81d      	bhi.n	8005a1c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059f6:	d0ec      	beq.n	80059d2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059f8:	e070      	b.n	8005adc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a18:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a1a:	e05f      	b.n	8005adc <USB_HC_Halt+0x1ea>
            break;
 8005a1c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a1e:	e05d      	b.n	8005adc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a3e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d133      	bne.n	8005ab8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a8e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a9c:	d81d      	bhi.n	8005ada <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab4:	d0ec      	beq.n	8005a90 <USB_HC_Halt+0x19e>
 8005ab6:	e011      	b.n	8005adc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	e000      	b.n	8005adc <USB_HC_Halt+0x1ea>
          break;
 8005ada:	bf00      	nop
    }
  }

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3724      	adds	r7, #36	; 0x24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005b00:	2301      	movs	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	04da      	lsls	r2, r3, #19
 8005b08:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <USB_DoPing+0x74>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	1ff80000 	.word	0x1ff80000

08005b64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff f911 	bl	8004da0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b7e:	2110      	movs	r1, #16
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff f96b 	bl	8004e5c <USB_FlushTxFifo>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff f997 	bl	8004ec4 <USB_FlushRxFifo>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	e01f      	b.n	8005be6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bcc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bda:	461a      	mov	r2, r3
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	3301      	adds	r3, #1
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2b0f      	cmp	r3, #15
 8005bea:	d9dc      	bls.n	8005ba6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005bec:	2300      	movs	r3, #0
 8005bee:	61bb      	str	r3, [r7, #24]
 8005bf0:	e034      	b.n	8005c5c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c08:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c18:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c26:	461a      	mov	r2, r3
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c38:	d80c      	bhi.n	8005c54 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c50:	d0ec      	beq.n	8005c2c <USB_StopHost+0xc8>
 8005c52:	e000      	b.n	8005c56 <USB_StopHost+0xf2>
        break;
 8005c54:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	2b0f      	cmp	r3, #15
 8005c60:	d9c7      	bls.n	8005bf2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f04f 32ff 	mov.w	r2, #4294967295
 8005c76:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff f880 	bl	8004d7e <USB_EnableGlobalInt>

  return ret;
 8005c7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c88:	b590      	push	{r4, r7, lr}
 8005c8a:	b089      	sub	sp, #36	; 0x24
 8005c8c:	af04      	add	r7, sp, #16
 8005c8e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005c90:	2301      	movs	r3, #1
 8005c92:	2202      	movs	r2, #2
 8005c94:	2102      	movs	r1, #2
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fc66 	bl	8006568 <USBH_FindInterface>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	2bff      	cmp	r3, #255	; 0xff
 8005ca4:	d002      	beq.n	8005cac <USBH_CDC_InterfaceInit+0x24>
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d901      	bls.n	8005cb0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005cac:	2302      	movs	r3, #2
 8005cae:	e13d      	b.n	8005f2c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fc3b 	bl	8006530 <USBH_SelectInterface>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e131      	b.n	8005f2c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005cce:	2050      	movs	r0, #80	; 0x50
 8005cd0:	f002 fad2 	bl	8008278 <malloc>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e11f      	b.n	8005f2c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005cec:	2250      	movs	r2, #80	; 0x50
 8005cee:	2100      	movs	r1, #0
 8005cf0:	68b8      	ldr	r0, [r7, #8]
 8005cf2:	f002 fb7d 	bl	80083f0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	211a      	movs	r1, #26
 8005cfc:	fb01 f303 	mul.w	r3, r1, r3
 8005d00:	4413      	add	r3, r2
 8005d02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b25b      	sxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	da15      	bge.n	8005d3a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	211a      	movs	r1, #26
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	4413      	add	r3, r2
 8005d1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	211a      	movs	r1, #26
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d34:	881a      	ldrh	r2, [r3, #0]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f001 ff2e 	bl	8007ba2 <USBH_AllocPipe>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	7819      	ldrb	r1, [r3, #0]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	7858      	ldrb	r0, [r3, #1]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	8952      	ldrh	r2, [r2, #10]
 8005d66:	9202      	str	r2, [sp, #8]
 8005d68:	2203      	movs	r2, #3
 8005d6a:	9201      	str	r2, [sp, #4]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	4623      	mov	r3, r4
 8005d70:	4602      	mov	r2, r0
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 fee6 	bl	8007b44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f002 f9f5 	bl	8008170 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005d86:	2300      	movs	r3, #0
 8005d88:	2200      	movs	r2, #0
 8005d8a:	210a      	movs	r1, #10
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fbeb 	bl	8006568 <USBH_FindInterface>
 8005d92:	4603      	mov	r3, r0
 8005d94:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2bff      	cmp	r3, #255	; 0xff
 8005d9a:	d002      	beq.n	8005da2 <USBH_CDC_InterfaceInit+0x11a>
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d901      	bls.n	8005da6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005da2:	2302      	movs	r3, #2
 8005da4:	e0c2      	b.n	8005f2c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	211a      	movs	r1, #26
 8005dac:	fb01 f303 	mul.w	r3, r1, r3
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	b25b      	sxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	da16      	bge.n	8005dec <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	211a      	movs	r1, #26
 8005dc4:	fb01 f303 	mul.w	r3, r1, r3
 8005dc8:	4413      	add	r3, r2
 8005dca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dce:	781a      	ldrb	r2, [r3, #0]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	211a      	movs	r1, #26
 8005dda:	fb01 f303 	mul.w	r3, r1, r3
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005de4:	881a      	ldrh	r2, [r3, #0]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	835a      	strh	r2, [r3, #26]
 8005dea:	e015      	b.n	8005e18 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	211a      	movs	r1, #26
 8005df2:	fb01 f303 	mul.w	r3, r1, r3
 8005df6:	4413      	add	r3, r2
 8005df8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dfc:	781a      	ldrb	r2, [r3, #0]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	211a      	movs	r1, #26
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e12:	881a      	ldrh	r2, [r3, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	211a      	movs	r1, #26
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	4413      	add	r3, r2
 8005e24:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	b25b      	sxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da16      	bge.n	8005e5e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	211a      	movs	r1, #26
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e40:	781a      	ldrb	r2, [r3, #0]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	211a      	movs	r1, #26
 8005e4c:	fb01 f303 	mul.w	r3, r1, r3
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e56:	881a      	ldrh	r2, [r3, #0]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	835a      	strh	r2, [r3, #26]
 8005e5c:	e015      	b.n	8005e8a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	211a      	movs	r1, #26
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	4413      	add	r3, r2
 8005e6a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e6e:	781a      	ldrb	r2, [r3, #0]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	211a      	movs	r1, #26
 8005e7a:	fb01 f303 	mul.w	r3, r1, r3
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e84:	881a      	ldrh	r2, [r3, #0]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	7b9b      	ldrb	r3, [r3, #14]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 fe86 	bl	8007ba2 <USBH_AllocPipe>
 8005e96:	4603      	mov	r3, r0
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	7bdb      	ldrb	r3, [r3, #15]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f001 fe7c 	bl	8007ba2 <USBH_AllocPipe>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	461a      	mov	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	7b59      	ldrb	r1, [r3, #13]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	7b98      	ldrb	r0, [r3, #14]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	8b12      	ldrh	r2, [r2, #24]
 8005eca:	9202      	str	r2, [sp, #8]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	9201      	str	r2, [sp, #4]
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f001 fe34 	bl	8007b44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	7b19      	ldrb	r1, [r3, #12]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	7bd8      	ldrb	r0, [r3, #15]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	8b52      	ldrh	r2, [r2, #26]
 8005ef4:	9202      	str	r2, [sp, #8]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	9201      	str	r2, [sp, #4]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	4623      	mov	r3, r4
 8005efe:	4602      	mov	r2, r0
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f001 fe1f 	bl	8007b44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	7b5b      	ldrb	r3, [r3, #13]
 8005f12:	2200      	movs	r2, #0
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f002 f92a 	bl	8008170 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	7b1b      	ldrb	r3, [r3, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f002 f923 	bl	8008170 <USBH_LL_SetToggle>

  return USBH_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd90      	pop	{r4, r7, pc}

08005f34 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00e      	beq.n	8005f6c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 fe14 	bl	8007b82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f001 fe3f 	bl	8007be4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	7b1b      	ldrb	r3, [r3, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00e      	beq.n	8005f92 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	7b1b      	ldrb	r3, [r3, #12]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 fe01 	bl	8007b82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	7b1b      	ldrb	r3, [r3, #12]
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f001 fe2c 	bl	8007be4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	7b5b      	ldrb	r3, [r3, #13]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00e      	beq.n	8005fb8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	7b5b      	ldrb	r3, [r3, #13]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f001 fdee 	bl	8007b82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	7b5b      	ldrb	r3, [r3, #13]
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f001 fe19 	bl	8007be4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00b      	beq.n	8005fdc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f002 f95b 	bl	8008288 <free>
    phost->pActiveClass->pData = 0U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fd8:	2200      	movs	r2, #0
 8005fda:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3340      	adds	r3, #64	; 0x40
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f8b1 	bl	8006166 <GetLineCoding>
 8006004:	4603      	mov	r3, r0
 8006006:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006008:	7afb      	ldrb	r3, [r7, #11]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006014:	2102      	movs	r1, #2
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800601a:	7afb      	ldrb	r3, [r7, #11]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006044:	2b04      	cmp	r3, #4
 8006046:	d877      	bhi.n	8006138 <USBH_CDC_Process+0x114>
 8006048:	a201      	add	r2, pc, #4	; (adr r2, 8006050 <USBH_CDC_Process+0x2c>)
 800604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604e:	bf00      	nop
 8006050:	08006065 	.word	0x08006065
 8006054:	0800606b 	.word	0x0800606b
 8006058:	0800609b 	.word	0x0800609b
 800605c:	0800610f 	.word	0x0800610f
 8006060:	0800611d 	.word	0x0800611d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	73fb      	strb	r3, [r7, #15]
      break;
 8006068:	e06d      	b.n	8006146 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f897 	bl	80061a4 <SetLineCoding>
 8006076:	4603      	mov	r3, r0
 8006078:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006088:	e058      	b.n	800613c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d055      	beq.n	800613c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2204      	movs	r2, #4
 8006094:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006098:	e050      	b.n	800613c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	3340      	adds	r3, #64	; 0x40
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f860 	bl	8006166 <GetLineCoding>
 80060a6:	4603      	mov	r3, r0
 80060a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d126      	bne.n	80060fe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c2:	791b      	ldrb	r3, [r3, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d13b      	bne.n	8006140 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d133      	bne.n	8006140 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d12b      	bne.n	8006140 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d124      	bne.n	8006140 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f958 	bl	80063ac <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80060fc:	e020      	b.n	8006140 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80060fe:	7bbb      	ldrb	r3, [r7, #14]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d01d      	beq.n	8006140 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2204      	movs	r2, #4
 8006108:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800610c:	e018      	b.n	8006140 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f867 	bl	80061e2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f8da 	bl	80062ce <CDC_ProcessReception>
      break;
 800611a:	e014      	b.n	8006146 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800611c:	2100      	movs	r1, #0
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 ffef 	bl	8007102 <USBH_ClrFeature>
 8006124:	4603      	mov	r3, r0
 8006126:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006136:	e005      	b.n	8006144 <USBH_CDC_Process+0x120>

    default:
      break;
 8006138:	bf00      	nop
 800613a:	e004      	b.n	8006146 <USBH_CDC_Process+0x122>
      break;
 800613c:	bf00      	nop
 800613e:	e002      	b.n	8006146 <USBH_CDC_Process+0x122>
      break;
 8006140:	bf00      	nop
 8006142:	e000      	b.n	8006146 <USBH_CDC_Process+0x122>
      break;
 8006144:	bf00      	nop

  }

  return status;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	22a1      	movs	r2, #161	; 0xa1
 8006174:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2221      	movs	r2, #33	; 0x21
 800617a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2207      	movs	r2, #7
 800618c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2207      	movs	r2, #7
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f001 fa83 	bl	80076a0 <USBH_CtlReq>
 800619a:	4603      	mov	r3, r0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2221      	movs	r2, #33	; 0x21
 80061b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2207      	movs	r2, #7
 80061ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2207      	movs	r2, #7
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fa64 	bl	80076a0 <USBH_CtlReq>
 80061d8:	4603      	mov	r3, r0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b086      	sub	sp, #24
 80061e6:	af02      	add	r7, sp, #8
 80061e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061f4:	2300      	movs	r3, #0
 80061f6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d002      	beq.n	8006208 <CDC_ProcessTransmission+0x26>
 8006202:	2b02      	cmp	r3, #2
 8006204:	d023      	beq.n	800624e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006206:	e05e      	b.n	80062c6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	8b12      	ldrh	r2, [r2, #24]
 8006210:	4293      	cmp	r3, r2
 8006212:	d90b      	bls.n	800622c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	69d9      	ldr	r1, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8b1a      	ldrh	r2, [r3, #24]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	7b5b      	ldrb	r3, [r3, #13]
 8006220:	2001      	movs	r0, #1
 8006222:	9000      	str	r0, [sp, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f001 fc4a 	bl	8007abe <USBH_BulkSendData>
 800622a:	e00b      	b.n	8006244 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	7b5b      	ldrb	r3, [r3, #13]
 800623a:	2001      	movs	r0, #1
 800623c:	9000      	str	r0, [sp, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fc3d 	bl	8007abe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800624c:	e03b      	b.n	80062c6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	7b5b      	ldrb	r3, [r3, #13]
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 ff61 	bl	800811c <USBH_LL_GetURBState>
 800625a:	4603      	mov	r3, r0
 800625c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800625e:	7afb      	ldrb	r3, [r7, #11]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d128      	bne.n	80062b6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	8b12      	ldrh	r2, [r2, #24]
 800626c:	4293      	cmp	r3, r2
 800626e:	d90e      	bls.n	800628e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	8b12      	ldrh	r2, [r2, #24]
 8006278:	1a9a      	subs	r2, r3, r2
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	8b12      	ldrh	r2, [r2, #24]
 8006286:	441a      	add	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	61da      	str	r2, [r3, #28]
 800628c:	e002      	b.n	8006294 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	d004      	beq.n	80062a6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062a4:	e00e      	b.n	80062c4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f868 	bl	8006384 <USBH_CDC_TransmitCallback>
      break;
 80062b4:	e006      	b.n	80062c4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80062b6:	7afb      	ldrb	r3, [r7, #11]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d103      	bne.n	80062c4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062c4:	bf00      	nop
  }
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d002      	beq.n	80062f4 <CDC_ProcessReception+0x26>
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d00e      	beq.n	8006310 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80062f2:	e043      	b.n	800637c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	6a19      	ldr	r1, [r3, #32]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	8b5a      	ldrh	r2, [r3, #26]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	7b1b      	ldrb	r3, [r3, #12]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 fc01 	bl	8007b08 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2204      	movs	r2, #4
 800630a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800630e:	e035      	b.n	800637c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	7b1b      	ldrb	r3, [r3, #12]
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 ff00 	bl	800811c <USBH_LL_GetURBState>
 800631c:	4603      	mov	r3, r0
 800631e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006320:	7cfb      	ldrb	r3, [r7, #19]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d129      	bne.n	800637a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	7b1b      	ldrb	r3, [r3, #12]
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 fe63 	bl	8007ff8 <USBH_LL_GetLastXferSize>
 8006332:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	429a      	cmp	r2, r3
 800633c:	d016      	beq.n	800636c <CDC_ProcessReception+0x9e>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	8b5b      	ldrh	r3, [r3, #26]
 8006342:	461a      	mov	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4293      	cmp	r3, r2
 8006348:	d910      	bls.n	800636c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	1ad2      	subs	r2, r2, r3
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	6a1a      	ldr	r2, [r3, #32]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	441a      	add	r2, r3
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2203      	movs	r2, #3
 8006366:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800636a:	e006      	b.n	800637a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f80f 	bl	8006398 <USBH_CDC_ReceiveCallback>
      break;
 800637a:	bf00      	nop
  }
}
 800637c:	bf00      	nop
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80063d4:	2302      	movs	r3, #2
 80063d6:	e029      	b.n	800642c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	79fa      	ldrb	r2, [r7, #7]
 80063dc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f81f 	bl	8006434 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f001 fd33 	bl	8007e90 <USBH_LL_Init>

  return USBH_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e009      	b.n	800645a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	33e0      	adds	r3, #224	; 0xe0
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	2200      	movs	r2, #0
 8006452:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3301      	adds	r3, #1
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b0f      	cmp	r3, #15
 800645e:	d9f2      	bls.n	8006446 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e009      	b.n	800647a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006480:	d3f1      	bcc.n	8006466 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2240      	movs	r2, #64	; 0x40
 80064a6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d016      	beq.n	800651e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10e      	bne.n	8006518 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006500:	1c59      	adds	r1, r3, #1
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	33de      	adds	r3, #222	; 0xde
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	73fb      	strb	r3, [r7, #15]
 8006516:	e004      	b.n	8006522 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006518:	2302      	movs	r3, #2
 800651a:	73fb      	strb	r3, [r7, #15]
 800651c:	e001      	b.n	8006522 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800651e:	2302      	movs	r3, #2
 8006520:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006546:	78fa      	ldrb	r2, [r7, #3]
 8006548:	429a      	cmp	r2, r3
 800654a:	d204      	bcs.n	8006556 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006554:	e001      	b.n	800655a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006556:	2302      	movs	r3, #2
 8006558:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800655a:	7bfb      	ldrb	r3, [r7, #15]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	4608      	mov	r0, r1
 8006572:	4611      	mov	r1, r2
 8006574:	461a      	mov	r2, r3
 8006576:	4603      	mov	r3, r0
 8006578:	70fb      	strb	r3, [r7, #3]
 800657a:	460b      	mov	r3, r1
 800657c:	70bb      	strb	r3, [r7, #2]
 800657e:	4613      	mov	r3, r2
 8006580:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006590:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006592:	e025      	b.n	80065e0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	221a      	movs	r2, #26
 8006598:	fb02 f303 	mul.w	r3, r2, r3
 800659c:	3308      	adds	r3, #8
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	3302      	adds	r3, #2
 80065a4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	795b      	ldrb	r3, [r3, #5]
 80065aa:	78fa      	ldrb	r2, [r7, #3]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d002      	beq.n	80065b6 <USBH_FindInterface+0x4e>
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	2bff      	cmp	r3, #255	; 0xff
 80065b4:	d111      	bne.n	80065da <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065ba:	78ba      	ldrb	r2, [r7, #2]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d002      	beq.n	80065c6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065c0:	78bb      	ldrb	r3, [r7, #2]
 80065c2:	2bff      	cmp	r3, #255	; 0xff
 80065c4:	d109      	bne.n	80065da <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065ca:	787a      	ldrb	r2, [r7, #1]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d002      	beq.n	80065d6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065d0:	787b      	ldrb	r3, [r7, #1]
 80065d2:	2bff      	cmp	r3, #255	; 0xff
 80065d4:	d101      	bne.n	80065da <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	e006      	b.n	80065e8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	3301      	adds	r3, #1
 80065de:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d9d6      	bls.n	8006594 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80065e6:	23ff      	movs	r3, #255	; 0xff
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 fc83 	bl	8007f08 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006602:	2101      	movs	r1, #1
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fd9c 	bl	8008142 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af04      	add	r7, sp, #16
 800661a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800661c:	2302      	movs	r3, #2
 800661e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	d102      	bne.n	8006636 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2203      	movs	r2, #3
 8006634:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b0b      	cmp	r3, #11
 800663e:	f200 81be 	bhi.w	80069be <USBH_Process+0x3aa>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <USBH_Process+0x34>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	08006679 	.word	0x08006679
 800664c:	080066ab 	.word	0x080066ab
 8006650:	08006713 	.word	0x08006713
 8006654:	08006959 	.word	0x08006959
 8006658:	080069bf 	.word	0x080069bf
 800665c:	080067b7 	.word	0x080067b7
 8006660:	080068ff 	.word	0x080068ff
 8006664:	080067ed 	.word	0x080067ed
 8006668:	0800680d 	.word	0x0800680d
 800666c:	0800682d 	.word	0x0800682d
 8006670:	08006871 	.word	0x08006871
 8006674:	08006941 	.word	0x08006941
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 819e 	beq.w	80069c2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800668c:	20c8      	movs	r0, #200	; 0xc8
 800668e:	f001 fd9f 	bl	80081d0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fc95 	bl	8007fc2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80066a8:	e18b      	b.n	80069c2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d107      	bne.n	80066c4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80066c2:	e18d      	b.n	80069e0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ce:	d914      	bls.n	80066fa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80066d6:	3301      	adds	r3, #1
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d903      	bls.n	80066f2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	220d      	movs	r2, #13
 80066ee:	701a      	strb	r2, [r3, #0]
      break;
 80066f0:	e176      	b.n	80069e0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
      break;
 80066f8:	e172      	b.n	80069e0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006700:	f103 020a 	add.w	r2, r3, #10
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800670a:	200a      	movs	r0, #10
 800670c:	f001 fd60 	bl	80081d0 <USBH_Delay>
      break;
 8006710:	e166      	b.n	80069e0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006722:	2104      	movs	r1, #4
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006728:	2064      	movs	r0, #100	; 0x64
 800672a:	f001 fd51 	bl	80081d0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f001 fc20 	bl	8007f74 <USBH_LL_GetSpeed>
 8006734:	4603      	mov	r3, r0
 8006736:	461a      	mov	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2205      	movs	r2, #5
 8006742:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006744:	2100      	movs	r1, #0
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 fa2b 	bl	8007ba2 <USBH_AllocPipe>
 800674c:	4603      	mov	r3, r0
 800674e:	461a      	mov	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006754:	2180      	movs	r1, #128	; 0x80
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 fa23 	bl	8007ba2 <USBH_AllocPipe>
 800675c:	4603      	mov	r3, r0
 800675e:	461a      	mov	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	7919      	ldrb	r1, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006778:	b292      	uxth	r2, r2
 800677a:	9202      	str	r2, [sp, #8]
 800677c:	2200      	movs	r2, #0
 800677e:	9201      	str	r2, [sp, #4]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	4603      	mov	r3, r0
 8006784:	2280      	movs	r2, #128	; 0x80
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 f9dc 	bl	8007b44 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	7959      	ldrb	r1, [r3, #5]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80067a0:	b292      	uxth	r2, r2
 80067a2:	9202      	str	r2, [sp, #8]
 80067a4:	2200      	movs	r2, #0
 80067a6:	9201      	str	r2, [sp, #4]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	4603      	mov	r3, r0
 80067ac:	2200      	movs	r2, #0
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 f9c8 	bl	8007b44 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067b4:	e114      	b.n	80069e0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f918 	bl	80069ec <USBH_HandleEnum>
 80067bc:	4603      	mov	r3, r0
 80067be:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f040 80fe 	bne.w	80069c6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d103      	bne.n	80067e4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2208      	movs	r2, #8
 80067e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067e2:	e0f0      	b.n	80069c6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2207      	movs	r2, #7
 80067e8:	701a      	strb	r2, [r3, #0]
      break;
 80067ea:	e0ec      	b.n	80069c6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 80e9 	beq.w	80069ca <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067fe:	2101      	movs	r1, #1
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2208      	movs	r2, #8
 8006808:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800680a:	e0de      	b.n	80069ca <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006812:	b29b      	uxth	r3, r3
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fc2c 	bl	8007074 <USBH_SetCfg>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 80d5 	bne.w	80069ce <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2209      	movs	r2, #9
 8006828:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800682a:	e0d0      	b.n	80069ce <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d016      	beq.n	8006868 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800683a:	2101      	movs	r1, #1
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fc3c 	bl	80070ba <USBH_SetFeature>
 8006842:	4603      	mov	r3, r0
 8006844:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d103      	bne.n	8006856 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	220a      	movs	r2, #10
 8006852:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006854:	e0bd      	b.n	80069d2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b03      	cmp	r3, #3
 800685c:	f040 80b9 	bne.w	80069d2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	220a      	movs	r2, #10
 8006864:	701a      	strb	r2, [r3, #0]
      break;
 8006866:	e0b4      	b.n	80069d2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	220a      	movs	r2, #10
 800686c:	701a      	strb	r2, [r3, #0]
      break;
 800686e:	e0b0      	b.n	80069d2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 80ad 	beq.w	80069d6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]
 8006888:	e016      	b.n	80068b8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800688a:	7bfa      	ldrb	r2, [r7, #15]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	32de      	adds	r2, #222	; 0xde
 8006890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006894:	791a      	ldrb	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800689c:	429a      	cmp	r2, r3
 800689e:	d108      	bne.n	80068b2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80068a0:	7bfa      	ldrb	r2, [r7, #15]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	32de      	adds	r2, #222	; 0xde
 80068a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80068b0:	e005      	b.n	80068be <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	3301      	adds	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0e5      	beq.n	800688a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d016      	beq.n	80068f6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	4798      	blx	r3
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2206      	movs	r2, #6
 80068de:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068e6:	2103      	movs	r1, #3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068ec:	e073      	b.n	80069d6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	220d      	movs	r2, #13
 80068f2:	701a      	strb	r2, [r3, #0]
      break;
 80068f4:	e06f      	b.n	80069d6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	220d      	movs	r2, #13
 80068fa:	701a      	strb	r2, [r3, #0]
      break;
 80068fc:	e06b      	b.n	80069d6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d017      	beq.n	8006938 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	4798      	blx	r3
 8006914:	4603      	mov	r3, r0
 8006916:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d103      	bne.n	8006928 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	220b      	movs	r2, #11
 8006924:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006926:	e058      	b.n	80069da <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d154      	bne.n	80069da <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	220d      	movs	r2, #13
 8006934:	701a      	strb	r2, [r3, #0]
      break;
 8006936:	e050      	b.n	80069da <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	220d      	movs	r2, #13
 800693c:	701a      	strb	r2, [r3, #0]
      break;
 800693e:	e04c      	b.n	80069da <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d049      	beq.n	80069de <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	4798      	blx	r3
      }
      break;
 8006956:	e042      	b.n	80069de <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff fd67 	bl	8006434 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d009      	beq.n	8006984 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d005      	beq.n	800699a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006994:	2105      	movs	r1, #5
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d107      	bne.n	80069b6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff fe20 	bl	80065f4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069b4:	e014      	b.n	80069e0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 faa6 	bl	8007f08 <USBH_LL_Start>
      break;
 80069bc:	e010      	b.n	80069e0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80069be:	bf00      	nop
 80069c0:	e00e      	b.n	80069e0 <USBH_Process+0x3cc>
      break;
 80069c2:	bf00      	nop
 80069c4:	e00c      	b.n	80069e0 <USBH_Process+0x3cc>
      break;
 80069c6:	bf00      	nop
 80069c8:	e00a      	b.n	80069e0 <USBH_Process+0x3cc>
    break;
 80069ca:	bf00      	nop
 80069cc:	e008      	b.n	80069e0 <USBH_Process+0x3cc>
      break;
 80069ce:	bf00      	nop
 80069d0:	e006      	b.n	80069e0 <USBH_Process+0x3cc>
      break;
 80069d2:	bf00      	nop
 80069d4:	e004      	b.n	80069e0 <USBH_Process+0x3cc>
      break;
 80069d6:	bf00      	nop
 80069d8:	e002      	b.n	80069e0 <USBH_Process+0x3cc>
      break;
 80069da:	bf00      	nop
 80069dc:	e000      	b.n	80069e0 <USBH_Process+0x3cc>
      break;
 80069de:	bf00      	nop
  }
  return USBH_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop

080069ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af04      	add	r7, sp, #16
 80069f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80069f4:	2301      	movs	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80069f8:	2301      	movs	r3, #1
 80069fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	2b07      	cmp	r3, #7
 8006a02:	f200 81c1 	bhi.w	8006d88 <USBH_HandleEnum+0x39c>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <USBH_HandleEnum+0x20>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a2d 	.word	0x08006a2d
 8006a10:	08006aeb 	.word	0x08006aeb
 8006a14:	08006b55 	.word	0x08006b55
 8006a18:	08006be3 	.word	0x08006be3
 8006a1c:	08006c4d 	.word	0x08006c4d
 8006a20:	08006cbd 	.word	0x08006cbd
 8006a24:	08006d03 	.word	0x08006d03
 8006a28:	08006d49 	.word	0x08006d49
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006a2c:	2108      	movs	r1, #8
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa50 	bl	8006ed4 <USBH_Get_DevDesc>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d130      	bne.n	8006aa0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	7919      	ldrb	r1, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a62:	b292      	uxth	r2, r2
 8006a64:	9202      	str	r2, [sp, #8]
 8006a66:	2200      	movs	r2, #0
 8006a68:	9201      	str	r2, [sp, #4]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2280      	movs	r2, #128	; 0x80
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 f867 	bl	8007b44 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	7959      	ldrb	r1, [r3, #5]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a8a:	b292      	uxth	r2, r2
 8006a8c:	9202      	str	r2, [sp, #8]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	9201      	str	r2, [sp, #4]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4603      	mov	r3, r0
 8006a96:	2200      	movs	r2, #0
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 f853 	bl	8007b44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006a9e:	e175      	b.n	8006d8c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	f040 8172 	bne.w	8006d8c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006aae:	3301      	adds	r3, #1
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d903      	bls.n	8006aca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	220d      	movs	r2, #13
 8006ac6:	701a      	strb	r2, [r3, #0]
      break;
 8006ac8:	e160      	b.n	8006d8c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	795b      	ldrb	r3, [r3, #5]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 f887 	bl	8007be4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	791b      	ldrb	r3, [r3, #4]
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 f881 	bl	8007be4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	701a      	strb	r2, [r3, #0]
      break;
 8006ae8:	e150      	b.n	8006d8c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006aea:	2112      	movs	r1, #18
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f9f1 	bl	8006ed4 <USBH_Get_DevDesc>
 8006af2:	4603      	mov	r3, r0
 8006af4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d103      	bne.n	8006b04 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006b02:	e145      	b.n	8006d90 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	f040 8142 	bne.w	8006d90 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b12:	3301      	adds	r3, #1
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d903      	bls.n	8006b2e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	220d      	movs	r2, #13
 8006b2a:	701a      	strb	r2, [r3, #0]
      break;
 8006b2c:	e130      	b.n	8006d90 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	795b      	ldrb	r3, [r3, #5]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 f855 	bl	8007be4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	791b      	ldrb	r3, [r3, #4]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 f84f 	bl	8007be4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	701a      	strb	r2, [r3, #0]
      break;
 8006b52:	e11d      	b.n	8006d90 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006b54:	2101      	movs	r1, #1
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa68 	bl	800702c <USBH_SetAddress>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b60:	7bbb      	ldrb	r3, [r7, #14]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d132      	bne.n	8006bcc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006b66:	2002      	movs	r0, #2
 8006b68:	f001 fb32 	bl	80081d0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2203      	movs	r2, #3
 8006b78:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	7919      	ldrb	r1, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b8e:	b292      	uxth	r2, r2
 8006b90:	9202      	str	r2, [sp, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	9201      	str	r2, [sp, #4]
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2280      	movs	r2, #128	; 0x80
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 ffd1 	bl	8007b44 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	7959      	ldrb	r1, [r3, #5]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bb6:	b292      	uxth	r2, r2
 8006bb8:	9202      	str	r2, [sp, #8]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	9201      	str	r2, [sp, #4]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 ffbd 	bl	8007b44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006bca:	e0e3      	b.n	8006d94 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	f040 80e0 	bne.w	8006d94 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	220d      	movs	r2, #13
 8006bd8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	705a      	strb	r2, [r3, #1]
      break;
 8006be0:	e0d8      	b.n	8006d94 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006be2:	2109      	movs	r1, #9
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f99d 	bl	8006f24 <USBH_Get_CfgDesc>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2204      	movs	r2, #4
 8006bf8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006bfa:	e0cd      	b.n	8006d98 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	f040 80ca 	bne.w	8006d98 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d903      	bls.n	8006c26 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	220d      	movs	r2, #13
 8006c22:	701a      	strb	r2, [r3, #0]
      break;
 8006c24:	e0b8      	b.n	8006d98 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	795b      	ldrb	r3, [r3, #5]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 ffd9 	bl	8007be4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	791b      	ldrb	r3, [r3, #4]
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 ffd3 	bl	8007be4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]
      break;
 8006c4a:	e0a5      	b.n	8006d98 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f965 	bl	8006f24 <USBH_Get_CfgDesc>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d103      	bne.n	8006c6c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2205      	movs	r2, #5
 8006c68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c6a:	e097      	b.n	8006d9c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	f040 8094 	bne.w	8006d9c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d903      	bls.n	8006c96 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	220d      	movs	r2, #13
 8006c92:	701a      	strb	r2, [r3, #0]
      break;
 8006c94:	e082      	b.n	8006d9c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	795b      	ldrb	r3, [r3, #5]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 ffa1 	bl	8007be4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	791b      	ldrb	r3, [r3, #4]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 ff9b 	bl	8007be4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
      break;
 8006cba:	e06f      	b.n	8006d9c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d019      	beq.n	8006cfa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006cd2:	23ff      	movs	r3, #255	; 0xff
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f949 	bl	8006f6c <USBH_Get_StringDesc>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2206      	movs	r2, #6
 8006ce8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006cea:	e059      	b.n	8006da0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d156      	bne.n	8006da0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2206      	movs	r2, #6
 8006cf6:	705a      	strb	r2, [r3, #1]
      break;
 8006cf8:	e052      	b.n	8006da0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2206      	movs	r2, #6
 8006cfe:	705a      	strb	r2, [r3, #1]
      break;
 8006d00:	e04e      	b.n	8006da0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d019      	beq.n	8006d40 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006d18:	23ff      	movs	r3, #255	; 0xff
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f926 	bl	8006f6c <USBH_Get_StringDesc>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d103      	bne.n	8006d32 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2207      	movs	r2, #7
 8006d2e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d30:	e038      	b.n	8006da4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d135      	bne.n	8006da4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2207      	movs	r2, #7
 8006d3c:	705a      	strb	r2, [r3, #1]
      break;
 8006d3e:	e031      	b.n	8006da4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2207      	movs	r2, #7
 8006d44:	705a      	strb	r2, [r3, #1]
      break;
 8006d46:	e02d      	b.n	8006da4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d017      	beq.n	8006d82 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d5e:	23ff      	movs	r3, #255	; 0xff
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f903 	bl	8006f6c <USBH_Get_StringDesc>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d102      	bne.n	8006d76 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006d74:	e018      	b.n	8006da8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d115      	bne.n	8006da8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d80:	e012      	b.n	8006da8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]
      break;
 8006d86:	e00f      	b.n	8006da8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006d88:	bf00      	nop
 8006d8a:	e00e      	b.n	8006daa <USBH_HandleEnum+0x3be>
      break;
 8006d8c:	bf00      	nop
 8006d8e:	e00c      	b.n	8006daa <USBH_HandleEnum+0x3be>
      break;
 8006d90:	bf00      	nop
 8006d92:	e00a      	b.n	8006daa <USBH_HandleEnum+0x3be>
      break;
 8006d94:	bf00      	nop
 8006d96:	e008      	b.n	8006daa <USBH_HandleEnum+0x3be>
      break;
 8006d98:	bf00      	nop
 8006d9a:	e006      	b.n	8006daa <USBH_HandleEnum+0x3be>
      break;
 8006d9c:	bf00      	nop
 8006d9e:	e004      	b.n	8006daa <USBH_HandleEnum+0x3be>
      break;
 8006da0:	bf00      	nop
 8006da2:	e002      	b.n	8006daa <USBH_HandleEnum+0x3be>
      break;
 8006da4:	bf00      	nop
 8006da6:	e000      	b.n	8006daa <USBH_HandleEnum+0x3be>
      break;
 8006da8:	bf00      	nop
  }
  return Status;
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f804 	bl	8006df6 <USBH_HandleSof>
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b0b      	cmp	r3, #11
 8006e06:	d10a      	bne.n	8006e1e <USBH_HandleSof+0x28>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
  }
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006e36:	bf00      	nop
}
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006e52:	bf00      	nop
}
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 f846 	bl	8007f3e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	791b      	ldrb	r3, [r3, #4]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fe93 	bl	8007be4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	795b      	ldrb	r3, [r3, #5]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fe8d 	bl	8007be4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af02      	add	r7, sp, #8
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006ee6:	78fb      	ldrb	r3, [r7, #3]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	4613      	mov	r3, r2
 8006eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f864 	bl	8006fc2 <USBH_GetDescriptor>
 8006efa:	4603      	mov	r3, r0
 8006efc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f10:	78fa      	ldrb	r2, [r7, #3]
 8006f12:	b292      	uxth	r2, r2
 8006f14:	4619      	mov	r1, r3
 8006f16:	f000 f919 	bl	800714c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	331c      	adds	r3, #28
 8006f34:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006f36:	887b      	ldrh	r3, [r7, #2]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f40:	2100      	movs	r1, #0
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f83d 	bl	8006fc2 <USBH_GetDescriptor>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d107      	bne.n	8006f62 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006f52:	887b      	ldrh	r3, [r7, #2]
 8006f54:	461a      	mov	r2, r3
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f989 	bl	8007270 <USBH_ParseCfgDesc>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b088      	sub	sp, #32
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	607a      	str	r2, [r7, #4]
 8006f76:	461a      	mov	r2, r3
 8006f78:	460b      	mov	r3, r1
 8006f7a:	72fb      	strb	r3, [r7, #11]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006f88:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006f90:	893b      	ldrh	r3, [r7, #8]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	460b      	mov	r3, r1
 8006f96:	2100      	movs	r1, #0
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 f812 	bl	8006fc2 <USBH_GetDescriptor>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d107      	bne.n	8006fb8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fae:	893a      	ldrh	r2, [r7, #8]
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fb26 	bl	8007604 <USBH_ParseStringDesc>
  }

  return status;
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	607b      	str	r3, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	72fb      	strb	r3, [r7, #11]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	789b      	ldrb	r3, [r3, #2]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d11c      	bne.n	8007016 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006fdc:	7afb      	ldrb	r3, [r7, #11]
 8006fde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2206      	movs	r2, #6
 8006fec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	893a      	ldrh	r2, [r7, #8]
 8006ff2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006ff4:	893b      	ldrh	r3, [r7, #8]
 8006ff6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ffe:	d104      	bne.n	800700a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f240 4209 	movw	r2, #1033	; 0x409
 8007006:	829a      	strh	r2, [r3, #20]
 8007008:	e002      	b.n	8007010 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8b3a      	ldrh	r2, [r7, #24]
 8007014:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007016:	8b3b      	ldrh	r3, [r7, #24]
 8007018:	461a      	mov	r2, r3
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fb3f 	bl	80076a0 <USBH_CtlReq>
 8007022:	4603      	mov	r3, r0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	789b      	ldrb	r3, [r3, #2]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d10f      	bne.n	8007060 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2205      	movs	r2, #5
 800704a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800704c:	78fb      	ldrb	r3, [r7, #3]
 800704e:	b29a      	uxth	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007060:	2200      	movs	r2, #0
 8007062:	2100      	movs	r1, #0
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fb1b 	bl	80076a0 <USBH_CtlReq>
 800706a:	4603      	mov	r3, r0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	789b      	ldrb	r3, [r3, #2]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d10e      	bne.n	80070a6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2209      	movs	r2, #9
 8007092:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	887a      	ldrh	r2, [r7, #2]
 8007098:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80070a6:	2200      	movs	r2, #0
 80070a8:	2100      	movs	r1, #0
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 faf8 	bl	80076a0 <USBH_CtlReq>
 80070b0:	4603      	mov	r3, r0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	789b      	ldrb	r3, [r3, #2]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d10f      	bne.n	80070ee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2203      	movs	r2, #3
 80070d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	b29a      	uxth	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80070ee:	2200      	movs	r2, #0
 80070f0:	2100      	movs	r1, #0
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fad4 	bl	80076a0 <USBH_CtlReq>
 80070f8:	4603      	mov	r3, r0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	460b      	mov	r3, r1
 800710c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	789b      	ldrb	r3, [r3, #2]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d10f      	bne.n	8007136 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2202      	movs	r2, #2
 800711a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	b29a      	uxth	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007136:	2200      	movs	r2, #0
 8007138:	2100      	movs	r1, #0
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fab0 	bl	80076a0 <USBH_CtlReq>
 8007140:	4603      	mov	r3, r0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	781a      	ldrb	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	785a      	ldrb	r2, [r3, #1]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	3302      	adds	r3, #2
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	b29a      	uxth	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	3303      	adds	r3, #3
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	021b      	lsls	r3, r3, #8
 800717c:	b29b      	uxth	r3, r3
 800717e:	4313      	orrs	r3, r2
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	791a      	ldrb	r2, [r3, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	795a      	ldrb	r2, [r3, #5]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	799a      	ldrb	r2, [r3, #6]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	79da      	ldrb	r2, [r3, #7]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	79db      	ldrb	r3, [r3, #7]
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	dc0f      	bgt.n	80071ce <USBH_ParseDevDesc+0x82>
 80071ae:	2b08      	cmp	r3, #8
 80071b0:	db14      	blt.n	80071dc <USBH_ParseDevDesc+0x90>
 80071b2:	3b08      	subs	r3, #8
 80071b4:	4a2d      	ldr	r2, [pc, #180]	; (800726c <USBH_ParseDevDesc+0x120>)
 80071b6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bf14      	ite	ne
 80071c2:	2301      	movne	r3, #1
 80071c4:	2300      	moveq	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d102      	bne.n	80071d2 <USBH_ParseDevDesc+0x86>
 80071cc:	e006      	b.n	80071dc <USBH_ParseDevDesc+0x90>
 80071ce:	2b40      	cmp	r3, #64	; 0x40
 80071d0:	d104      	bne.n	80071dc <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	79da      	ldrb	r2, [r3, #7]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	71da      	strb	r2, [r3, #7]
      break;
 80071da:	e003      	b.n	80071e4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2240      	movs	r2, #64	; 0x40
 80071e0:	71da      	strb	r2, [r3, #7]
      break;
 80071e2:	bf00      	nop
  }

  if (length > 8U)
 80071e4:	88fb      	ldrh	r3, [r7, #6]
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d939      	bls.n	800725e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	3308      	adds	r3, #8
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3309      	adds	r3, #9
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	4313      	orrs	r3, r2
 8007200:	b29a      	uxth	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	330a      	adds	r3, #10
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	b29a      	uxth	r2, r3
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	330b      	adds	r3, #11
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	b29b      	uxth	r3, r3
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	b29b      	uxth	r3, r3
 800721a:	4313      	orrs	r3, r2
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	330c      	adds	r3, #12
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	b29a      	uxth	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	330d      	adds	r3, #13
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	b29b      	uxth	r3, r3
 8007232:	021b      	lsls	r3, r3, #8
 8007234:	b29b      	uxth	r3, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	7b9a      	ldrb	r2, [r3, #14]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	7bda      	ldrb	r2, [r3, #15]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	7c1a      	ldrb	r2, [r3, #16]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	7c5a      	ldrb	r2, [r3, #17]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	745a      	strb	r2, [r3, #17]
  }
}
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	01000101 	.word	0x01000101

08007270 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08c      	sub	sp, #48	; 0x30
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	4613      	mov	r3, r2
 800727c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007284:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	781a      	ldrb	r2, [r3, #0]
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	785a      	ldrb	r2, [r3, #1]
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	3302      	adds	r3, #2
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	3303      	adds	r3, #3
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	4313      	orrs	r3, r2
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072cc:	bf28      	it	cs
 80072ce:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	791a      	ldrb	r2, [r3, #4]
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	795a      	ldrb	r2, [r3, #5]
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	799a      	ldrb	r2, [r3, #6]
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	79da      	ldrb	r2, [r3, #7]
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	7a1a      	ldrb	r2, [r3, #8]
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	2b09      	cmp	r3, #9
 8007306:	d002      	beq.n	800730e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	2209      	movs	r2, #9
 800730c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800730e:	88fb      	ldrh	r3, [r7, #6]
 8007310:	2b09      	cmp	r3, #9
 8007312:	f240 809d 	bls.w	8007450 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007316:	2309      	movs	r3, #9
 8007318:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800731e:	e081      	b.n	8007424 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007320:	f107 0316 	add.w	r3, r7, #22
 8007324:	4619      	mov	r1, r3
 8007326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007328:	f000 f99f 	bl	800766a <USBH_GetNextDesc>
 800732c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	2b04      	cmp	r3, #4
 8007334:	d176      	bne.n	8007424 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b09      	cmp	r3, #9
 800733c:	d002      	beq.n	8007344 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	2209      	movs	r2, #9
 8007342:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007348:	221a      	movs	r2, #26
 800734a:	fb02 f303 	mul.w	r3, r2, r3
 800734e:	3308      	adds	r3, #8
 8007350:	6a3a      	ldr	r2, [r7, #32]
 8007352:	4413      	add	r3, r2
 8007354:	3302      	adds	r3, #2
 8007356:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800735a:	69f8      	ldr	r0, [r7, #28]
 800735c:	f000 f87e 	bl	800745c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800736a:	e043      	b.n	80073f4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800736c:	f107 0316 	add.w	r3, r7, #22
 8007370:	4619      	mov	r1, r3
 8007372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007374:	f000 f979 	bl	800766a <USBH_GetNextDesc>
 8007378:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b05      	cmp	r3, #5
 8007380:	d138      	bne.n	80073f4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	795b      	ldrb	r3, [r3, #5]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d10f      	bne.n	80073aa <USBH_ParseCfgDesc+0x13a>
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	799b      	ldrb	r3, [r3, #6]
 800738e:	2b02      	cmp	r3, #2
 8007390:	d10b      	bne.n	80073aa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	79db      	ldrb	r3, [r3, #7]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10f      	bne.n	80073ba <USBH_ParseCfgDesc+0x14a>
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b09      	cmp	r3, #9
 80073a0:	d00b      	beq.n	80073ba <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	2209      	movs	r2, #9
 80073a6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073a8:	e007      	b.n	80073ba <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b07      	cmp	r3, #7
 80073b0:	d004      	beq.n	80073bc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	2207      	movs	r2, #7
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	e000      	b.n	80073bc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80073ba:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80073bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80073c4:	3201      	adds	r2, #1
 80073c6:	00d2      	lsls	r2, r2, #3
 80073c8:	211a      	movs	r1, #26
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	4413      	add	r3, r2
 80073d0:	3308      	adds	r3, #8
 80073d2:	6a3a      	ldr	r2, [r7, #32]
 80073d4:	4413      	add	r3, r2
 80073d6:	3304      	adds	r3, #4
 80073d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80073da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073dc:	69b9      	ldr	r1, [r7, #24]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 f86b 	bl	80074ba <USBH_ParseEPDesc>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80073ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073ee:	3301      	adds	r3, #1
 80073f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	791b      	ldrb	r3, [r3, #4]
 80073f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d204      	bcs.n	800740a <USBH_ParseCfgDesc+0x19a>
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	885a      	ldrh	r2, [r3, #2]
 8007404:	8afb      	ldrh	r3, [r7, #22]
 8007406:	429a      	cmp	r2, r3
 8007408:	d8b0      	bhi.n	800736c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	791b      	ldrb	r3, [r3, #4]
 800740e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007412:	429a      	cmp	r2, r3
 8007414:	d201      	bcs.n	800741a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007416:	2303      	movs	r3, #3
 8007418:	e01c      	b.n	8007454 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800741a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800741e:	3301      	adds	r3, #1
 8007420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007428:	2b01      	cmp	r3, #1
 800742a:	d805      	bhi.n	8007438 <USBH_ParseCfgDesc+0x1c8>
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	885a      	ldrh	r2, [r3, #2]
 8007430:	8afb      	ldrh	r3, [r7, #22]
 8007432:	429a      	cmp	r2, r3
 8007434:	f63f af74 	bhi.w	8007320 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	791b      	ldrb	r3, [r3, #4]
 800743c:	2b02      	cmp	r3, #2
 800743e:	bf28      	it	cs
 8007440:	2302      	movcs	r3, #2
 8007442:	b2db      	uxtb	r3, r3
 8007444:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007448:	429a      	cmp	r2, r3
 800744a:	d201      	bcs.n	8007450 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800744c:	2303      	movs	r3, #3
 800744e:	e001      	b.n	8007454 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007454:	4618      	mov	r0, r3
 8007456:	3730      	adds	r7, #48	; 0x30
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781a      	ldrb	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	785a      	ldrb	r2, [r3, #1]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	789a      	ldrb	r2, [r3, #2]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	78da      	ldrb	r2, [r3, #3]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	791a      	ldrb	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	795a      	ldrb	r2, [r3, #5]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	799a      	ldrb	r2, [r3, #6]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	79da      	ldrb	r2, [r3, #7]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	7a1a      	ldrb	r2, [r3, #8]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	721a      	strb	r2, [r3, #8]
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b087      	sub	sp, #28
 80074be:	af00      	add	r7, sp, #0
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	781a      	ldrb	r2, [r3, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	785a      	ldrb	r2, [r3, #1]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	789a      	ldrb	r2, [r3, #2]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	78da      	ldrb	r2, [r3, #3]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3304      	adds	r3, #4
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3305      	adds	r3, #5
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	021b      	lsls	r3, r3, #8
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	4313      	orrs	r3, r2
 8007500:	b29a      	uxth	r2, r3
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	799a      	ldrb	r2, [r3, #6]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	889b      	ldrh	r3, [r3, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d102      	bne.n	800751c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007516:	2303      	movs	r3, #3
 8007518:	75fb      	strb	r3, [r7, #23]
 800751a:	e033      	b.n	8007584 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	889b      	ldrh	r3, [r3, #4]
 8007520:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007524:	f023 0307 	bic.w	r3, r3, #7
 8007528:	b29a      	uxth	r2, r3
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	889b      	ldrh	r3, [r3, #4]
 8007532:	b21a      	sxth	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3304      	adds	r3, #4
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	b299      	uxth	r1, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3305      	adds	r3, #5
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	021b      	lsls	r3, r3, #8
 8007546:	b29b      	uxth	r3, r3
 8007548:	430b      	orrs	r3, r1
 800754a:	b29b      	uxth	r3, r3
 800754c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007550:	2b00      	cmp	r3, #0
 8007552:	d110      	bne.n	8007576 <USBH_ParseEPDesc+0xbc>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3304      	adds	r3, #4
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	b299      	uxth	r1, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3305      	adds	r3, #5
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	b29b      	uxth	r3, r3
 8007564:	021b      	lsls	r3, r3, #8
 8007566:	b29b      	uxth	r3, r3
 8007568:	430b      	orrs	r3, r1
 800756a:	b29b      	uxth	r3, r3
 800756c:	b21b      	sxth	r3, r3
 800756e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007572:	b21b      	sxth	r3, r3
 8007574:	e001      	b.n	800757a <USBH_ParseEPDesc+0xc0>
 8007576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800757a:	4313      	orrs	r3, r2
 800757c:	b21b      	sxth	r3, r3
 800757e:	b29a      	uxth	r2, r3
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800758a:	2b00      	cmp	r3, #0
 800758c:	d116      	bne.n	80075bc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	78db      	ldrb	r3, [r3, #3]
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	2b01      	cmp	r3, #1
 8007598:	d005      	beq.n	80075a6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	78db      	ldrb	r3, [r3, #3]
 800759e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d127      	bne.n	80075f6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	799b      	ldrb	r3, [r3, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <USBH_ParseEPDesc+0xfc>
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	799b      	ldrb	r3, [r3, #6]
 80075b2:	2b10      	cmp	r3, #16
 80075b4:	d91f      	bls.n	80075f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80075b6:	2303      	movs	r3, #3
 80075b8:	75fb      	strb	r3, [r7, #23]
 80075ba:	e01c      	b.n	80075f6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	78db      	ldrb	r3, [r3, #3]
 80075c0:	f003 0303 	and.w	r3, r3, #3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d10a      	bne.n	80075de <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	799b      	ldrb	r3, [r3, #6]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <USBH_ParseEPDesc+0x11e>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	799b      	ldrb	r3, [r3, #6]
 80075d4:	2b10      	cmp	r3, #16
 80075d6:	d90e      	bls.n	80075f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80075d8:	2303      	movs	r3, #3
 80075da:	75fb      	strb	r3, [r7, #23]
 80075dc:	e00b      	b.n	80075f6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	78db      	ldrb	r3, [r3, #3]
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d105      	bne.n	80075f6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	799b      	ldrb	r3, [r3, #6]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80075f2:	2303      	movs	r3, #3
 80075f4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3301      	adds	r3, #1
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b03      	cmp	r3, #3
 800761a:	d120      	bne.n	800765e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	1e9a      	subs	r2, r3, #2
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	4293      	cmp	r3, r2
 8007626:	bf28      	it	cs
 8007628:	4613      	movcs	r3, r2
 800762a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3302      	adds	r3, #2
 8007630:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007632:	2300      	movs	r3, #0
 8007634:	82fb      	strh	r3, [r7, #22]
 8007636:	e00b      	b.n	8007650 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007638:	8afb      	ldrh	r3, [r7, #22]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4413      	add	r3, r2
 800763e:	781a      	ldrb	r2, [r3, #0]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	3301      	adds	r3, #1
 8007648:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800764a:	8afb      	ldrh	r3, [r7, #22]
 800764c:	3302      	adds	r3, #2
 800764e:	82fb      	strh	r3, [r7, #22]
 8007650:	8afa      	ldrh	r2, [r7, #22]
 8007652:	8abb      	ldrh	r3, [r7, #20]
 8007654:	429a      	cmp	r2, r3
 8007656:	d3ef      	bcc.n	8007638 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
  }
}
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	881a      	ldrh	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	4413      	add	r3, r2
 8007680:	b29a      	uxth	r2, r3
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4413      	add	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007692:	68fb      	ldr	r3, [r7, #12]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80076ae:	2301      	movs	r3, #1
 80076b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	789b      	ldrb	r3, [r3, #2]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d002      	beq.n	80076c0 <USBH_CtlReq+0x20>
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d00f      	beq.n	80076de <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80076be:	e027      	b.n	8007710 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2202      	movs	r2, #2
 80076d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80076d8:	2301      	movs	r3, #1
 80076da:	75fb      	strb	r3, [r7, #23]
      break;
 80076dc:	e018      	b.n	8007710 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 f81c 	bl	800771c <USBH_HandleControl>
 80076e4:	4603      	mov	r3, r0
 80076e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <USBH_CtlReq+0x54>
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d106      	bne.n	8007702 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2201      	movs	r2, #1
 80076f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	761a      	strb	r2, [r3, #24]
      break;
 8007700:	e005      	b.n	800770e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d102      	bne.n	800770e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	709a      	strb	r2, [r3, #2]
      break;
 800770e:	bf00      	nop
  }
  return status;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af02      	add	r7, sp, #8
 8007722:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007724:	2301      	movs	r3, #1
 8007726:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007728:	2300      	movs	r3, #0
 800772a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	7e1b      	ldrb	r3, [r3, #24]
 8007730:	3b01      	subs	r3, #1
 8007732:	2b0a      	cmp	r3, #10
 8007734:	f200 8156 	bhi.w	80079e4 <USBH_HandleControl+0x2c8>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <USBH_HandleControl+0x24>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	0800776d 	.word	0x0800776d
 8007744:	08007787 	.word	0x08007787
 8007748:	080077f1 	.word	0x080077f1
 800774c:	08007817 	.word	0x08007817
 8007750:	0800784f 	.word	0x0800784f
 8007754:	08007879 	.word	0x08007879
 8007758:	080078cb 	.word	0x080078cb
 800775c:	080078ed 	.word	0x080078ed
 8007760:	08007929 	.word	0x08007929
 8007764:	0800794f 	.word	0x0800794f
 8007768:	0800798d 	.word	0x0800798d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f103 0110 	add.w	r1, r3, #16
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	795b      	ldrb	r3, [r3, #5]
 8007776:	461a      	mov	r2, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f943 	bl	8007a04 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2202      	movs	r2, #2
 8007782:	761a      	strb	r2, [r3, #24]
      break;
 8007784:	e139      	b.n	80079fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	795b      	ldrb	r3, [r3, #5]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fcc5 	bl	800811c <USBH_LL_GetURBState>
 8007792:	4603      	mov	r3, r0
 8007794:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d11e      	bne.n	80077da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	7c1b      	ldrb	r3, [r3, #16]
 80077a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	8adb      	ldrh	r3, [r3, #22]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80077ae:	7b7b      	ldrb	r3, [r7, #13]
 80077b0:	2b80      	cmp	r3, #128	; 0x80
 80077b2:	d103      	bne.n	80077bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2203      	movs	r2, #3
 80077b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077ba:	e115      	b.n	80079e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2205      	movs	r2, #5
 80077c0:	761a      	strb	r2, [r3, #24]
      break;
 80077c2:	e111      	b.n	80079e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80077c4:	7b7b      	ldrb	r3, [r7, #13]
 80077c6:	2b80      	cmp	r3, #128	; 0x80
 80077c8:	d103      	bne.n	80077d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2209      	movs	r2, #9
 80077ce:	761a      	strb	r2, [r3, #24]
      break;
 80077d0:	e10a      	b.n	80079e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2207      	movs	r2, #7
 80077d6:	761a      	strb	r2, [r3, #24]
      break;
 80077d8:	e106      	b.n	80079e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d003      	beq.n	80077e8 <USBH_HandleControl+0xcc>
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	f040 8100 	bne.w	80079e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	220b      	movs	r2, #11
 80077ec:	761a      	strb	r2, [r3, #24]
      break;
 80077ee:	e0fb      	b.n	80079e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6899      	ldr	r1, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	899a      	ldrh	r2, [r3, #12]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	791b      	ldrb	r3, [r3, #4]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f93a 	bl	8007a82 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2204      	movs	r2, #4
 8007812:	761a      	strb	r2, [r3, #24]
      break;
 8007814:	e0f1      	b.n	80079fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	791b      	ldrb	r3, [r3, #4]
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fc7d 	bl	800811c <USBH_LL_GetURBState>
 8007822:	4603      	mov	r3, r0
 8007824:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d102      	bne.n	8007832 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2209      	movs	r2, #9
 8007830:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	2b05      	cmp	r3, #5
 8007836:	d102      	bne.n	800783e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007838:	2303      	movs	r3, #3
 800783a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800783c:	e0d6      	b.n	80079ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b04      	cmp	r3, #4
 8007842:	f040 80d3 	bne.w	80079ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	220b      	movs	r2, #11
 800784a:	761a      	strb	r2, [r3, #24]
      break;
 800784c:	e0ce      	b.n	80079ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6899      	ldr	r1, [r3, #8]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	899a      	ldrh	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	795b      	ldrb	r3, [r3, #5]
 800785a:	2001      	movs	r0, #1
 800785c:	9000      	str	r0, [sp, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f8ea 	bl	8007a38 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800786a:	b29a      	uxth	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2206      	movs	r2, #6
 8007874:	761a      	strb	r2, [r3, #24]
      break;
 8007876:	e0c0      	b.n	80079fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	795b      	ldrb	r3, [r3, #5]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fc4c 	bl	800811c <USBH_LL_GetURBState>
 8007884:	4603      	mov	r3, r0
 8007886:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d103      	bne.n	8007896 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2207      	movs	r2, #7
 8007892:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007894:	e0ac      	b.n	80079f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b05      	cmp	r3, #5
 800789a:	d105      	bne.n	80078a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	220c      	movs	r2, #12
 80078a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80078a2:	2303      	movs	r3, #3
 80078a4:	73fb      	strb	r3, [r7, #15]
      break;
 80078a6:	e0a3      	b.n	80079f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d103      	bne.n	80078b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2205      	movs	r2, #5
 80078b2:	761a      	strb	r2, [r3, #24]
      break;
 80078b4:	e09c      	b.n	80079f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	f040 8099 	bne.w	80079f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	220b      	movs	r2, #11
 80078c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80078c4:	2302      	movs	r3, #2
 80078c6:	73fb      	strb	r3, [r7, #15]
      break;
 80078c8:	e092      	b.n	80079f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	791b      	ldrb	r3, [r3, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	2100      	movs	r1, #0
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f8d5 	bl	8007a82 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078de:	b29a      	uxth	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2208      	movs	r2, #8
 80078e8:	761a      	strb	r2, [r3, #24]

      break;
 80078ea:	e086      	b.n	80079fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	791b      	ldrb	r3, [r3, #4]
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fc12 	bl	800811c <USBH_LL_GetURBState>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d105      	bne.n	800790e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	220d      	movs	r2, #13
 8007906:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800790c:	e072      	b.n	80079f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b04      	cmp	r3, #4
 8007912:	d103      	bne.n	800791c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	220b      	movs	r2, #11
 8007918:	761a      	strb	r2, [r3, #24]
      break;
 800791a:	e06b      	b.n	80079f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b05      	cmp	r3, #5
 8007920:	d168      	bne.n	80079f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007922:	2303      	movs	r3, #3
 8007924:	73fb      	strb	r3, [r7, #15]
      break;
 8007926:	e065      	b.n	80079f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	795b      	ldrb	r3, [r3, #5]
 800792c:	2201      	movs	r2, #1
 800792e:	9200      	str	r2, [sp, #0]
 8007930:	2200      	movs	r2, #0
 8007932:	2100      	movs	r1, #0
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f87f 	bl	8007a38 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007940:	b29a      	uxth	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	220a      	movs	r2, #10
 800794a:	761a      	strb	r2, [r3, #24]
      break;
 800794c:	e055      	b.n	80079fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	795b      	ldrb	r3, [r3, #5]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fbe1 	bl	800811c <USBH_LL_GetURBState>
 800795a:	4603      	mov	r3, r0
 800795c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d105      	bne.n	8007970 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	220d      	movs	r2, #13
 800796c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800796e:	e043      	b.n	80079f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	2b02      	cmp	r3, #2
 8007974:	d103      	bne.n	800797e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2209      	movs	r2, #9
 800797a:	761a      	strb	r2, [r3, #24]
      break;
 800797c:	e03c      	b.n	80079f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	2b04      	cmp	r3, #4
 8007982:	d139      	bne.n	80079f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	220b      	movs	r2, #11
 8007988:	761a      	strb	r2, [r3, #24]
      break;
 800798a:	e035      	b.n	80079f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	7e5b      	ldrb	r3, [r3, #25]
 8007990:	3301      	adds	r3, #1
 8007992:	b2da      	uxtb	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	765a      	strb	r2, [r3, #25]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	7e5b      	ldrb	r3, [r3, #25]
 800799c:	2b02      	cmp	r3, #2
 800799e:	d806      	bhi.n	80079ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80079ac:	e025      	b.n	80079fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079b4:	2106      	movs	r1, #6
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	795b      	ldrb	r3, [r3, #5]
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f90c 	bl	8007be4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	791b      	ldrb	r3, [r3, #4]
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f906 	bl	8007be4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80079de:	2302      	movs	r3, #2
 80079e0:	73fb      	strb	r3, [r7, #15]
      break;
 80079e2:	e00a      	b.n	80079fa <USBH_HandleControl+0x2de>

    default:
      break;
 80079e4:	bf00      	nop
 80079e6:	e008      	b.n	80079fa <USBH_HandleControl+0x2de>
      break;
 80079e8:	bf00      	nop
 80079ea:	e006      	b.n	80079fa <USBH_HandleControl+0x2de>
      break;
 80079ec:	bf00      	nop
 80079ee:	e004      	b.n	80079fa <USBH_HandleControl+0x2de>
      break;
 80079f0:	bf00      	nop
 80079f2:	e002      	b.n	80079fa <USBH_HandleControl+0x2de>
      break;
 80079f4:	bf00      	nop
 80079f6:	e000      	b.n	80079fa <USBH_HandleControl+0x2de>
      break;
 80079f8:	bf00      	nop
  }

  return status;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af04      	add	r7, sp, #16
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a12:	79f9      	ldrb	r1, [r7, #7]
 8007a14:	2300      	movs	r3, #0
 8007a16:	9303      	str	r3, [sp, #12]
 8007a18:	2308      	movs	r3, #8
 8007a1a:	9302      	str	r3, [sp, #8]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	2300      	movs	r3, #0
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	2300      	movs	r3, #0
 8007a26:	2200      	movs	r2, #0
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 fb46 	bl	80080ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af04      	add	r7, sp, #16
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4611      	mov	r1, r2
 8007a44:	461a      	mov	r2, r3
 8007a46:	460b      	mov	r3, r1
 8007a48:	80fb      	strh	r3, [r7, #6]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a5c:	7979      	ldrb	r1, [r7, #5]
 8007a5e:	7e3b      	ldrb	r3, [r7, #24]
 8007a60:	9303      	str	r3, [sp, #12]
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	9302      	str	r3, [sp, #8]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2200      	movs	r2, #0
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 fb21 	bl	80080ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b088      	sub	sp, #32
 8007a86:	af04      	add	r7, sp, #16
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	461a      	mov	r2, r3
 8007a90:	460b      	mov	r3, r1
 8007a92:	80fb      	strh	r3, [r7, #6]
 8007a94:	4613      	mov	r3, r2
 8007a96:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a98:	7979      	ldrb	r1, [r7, #5]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9303      	str	r3, [sp, #12]
 8007a9e:	88fb      	ldrh	r3, [r7, #6]
 8007aa0:	9302      	str	r3, [sp, #8]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2201      	movs	r2, #1
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fb03 	bl	80080ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ab4:	2300      	movs	r3, #0

}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b088      	sub	sp, #32
 8007ac2:	af04      	add	r7, sp, #16
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	4611      	mov	r1, r2
 8007aca:	461a      	mov	r2, r3
 8007acc:	460b      	mov	r3, r1
 8007ace:	80fb      	strh	r3, [r7, #6]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ae2:	7979      	ldrb	r1, [r7, #5]
 8007ae4:	7e3b      	ldrb	r3, [r7, #24]
 8007ae6:	9303      	str	r3, [sp, #12]
 8007ae8:	88fb      	ldrh	r3, [r7, #6]
 8007aea:	9302      	str	r3, [sp, #8]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	2301      	movs	r3, #1
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2302      	movs	r3, #2
 8007af6:	2200      	movs	r2, #0
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 fade 	bl	80080ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af04      	add	r7, sp, #16
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4611      	mov	r1, r2
 8007b14:	461a      	mov	r2, r3
 8007b16:	460b      	mov	r3, r1
 8007b18:	80fb      	strh	r3, [r7, #6]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b1e:	7979      	ldrb	r1, [r7, #5]
 8007b20:	2300      	movs	r3, #0
 8007b22:	9303      	str	r3, [sp, #12]
 8007b24:	88fb      	ldrh	r3, [r7, #6]
 8007b26:	9302      	str	r3, [sp, #8]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	2302      	movs	r3, #2
 8007b32:	2201      	movs	r2, #1
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fac0 	bl	80080ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af04      	add	r7, sp, #16
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	461a      	mov	r2, r3
 8007b52:	4603      	mov	r3, r0
 8007b54:	70fb      	strb	r3, [r7, #3]
 8007b56:	460b      	mov	r3, r1
 8007b58:	70bb      	strb	r3, [r7, #2]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007b5e:	7878      	ldrb	r0, [r7, #1]
 8007b60:	78ba      	ldrb	r2, [r7, #2]
 8007b62:	78f9      	ldrb	r1, [r7, #3]
 8007b64:	8b3b      	ldrh	r3, [r7, #24]
 8007b66:	9302      	str	r3, [sp, #8]
 8007b68:	7d3b      	ldrb	r3, [r7, #20]
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	7c3b      	ldrb	r3, [r7, #16]
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	4603      	mov	r3, r0
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa53 	bl	800801e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007b8e:	78fb      	ldrb	r3, [r7, #3]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa72 	bl	800807c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f836 	bl	8007c20 <USBH_GetFreePipe>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007bb8:	89fb      	ldrh	r3, [r7, #14]
 8007bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00a      	beq.n	8007bd8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007bc2:	78fa      	ldrb	r2, [r7, #3]
 8007bc4:	89fb      	ldrh	r3, [r7, #14]
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	33e0      	adds	r3, #224	; 0xe0
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007bd8:	89fb      	ldrh	r3, [r7, #14]
 8007bda:	b2db      	uxtb	r3, r3
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	2b0f      	cmp	r3, #15
 8007bf4:	d80d      	bhi.n	8007c12 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007bf6:	78fb      	ldrb	r3, [r7, #3]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	33e0      	adds	r3, #224	; 0xe0
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	33e0      	adds	r3, #224	; 0xe0
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]
 8007c30:	e00f      	b.n	8007c52 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	33e0      	adds	r3, #224	; 0xe0
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	e007      	b.n	8007c5c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	73fb      	strb	r3, [r7, #15]
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	2b0f      	cmp	r3, #15
 8007c56:	d9ec      	bls.n	8007c32 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	490e      	ldr	r1, [pc, #56]	; (8007ca8 <MX_USB_HOST_Init+0x40>)
 8007c70:	480e      	ldr	r0, [pc, #56]	; (8007cac <MX_USB_HOST_Init+0x44>)
 8007c72:	f7fe fba5 	bl	80063c0 <USBH_Init>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007c7c:	f7f8 fe84 	bl	8000988 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007c80:	490b      	ldr	r1, [pc, #44]	; (8007cb0 <MX_USB_HOST_Init+0x48>)
 8007c82:	480a      	ldr	r0, [pc, #40]	; (8007cac <MX_USB_HOST_Init+0x44>)
 8007c84:	f7fe fc2a 	bl	80064dc <USBH_RegisterClass>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007c8e:	f7f8 fe7b 	bl	8000988 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007c92:	4806      	ldr	r0, [pc, #24]	; (8007cac <MX_USB_HOST_Init+0x44>)
 8007c94:	f7fe fcae 	bl	80065f4 <USBH_Start>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007c9e:	f7f8 fe73 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007ca2:	bf00      	nop
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	08007cc9 	.word	0x08007cc9
 8007cac:	200001d8 	.word	0x200001d8
 8007cb0:	2000000c 	.word	0x2000000c

08007cb4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007cb8:	4802      	ldr	r0, [pc, #8]	; (8007cc4 <MX_USB_HOST_Process+0x10>)
 8007cba:	f7fe fcab 	bl	8006614 <USBH_Process>
}
 8007cbe:	bf00      	nop
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	200001d8 	.word	0x200001d8

08007cc8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d819      	bhi.n	8007d10 <USBH_UserProcess+0x48>
 8007cdc:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <USBH_UserProcess+0x1c>)
 8007cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007d11 	.word	0x08007d11
 8007ce8:	08007d01 	.word	0x08007d01
 8007cec:	08007d11 	.word	0x08007d11
 8007cf0:	08007d09 	.word	0x08007d09
 8007cf4:	08007cf9 	.word	0x08007cf9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007cf8:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <USBH_UserProcess+0x58>)
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	701a      	strb	r2, [r3, #0]
  break;
 8007cfe:	e008      	b.n	8007d12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007d00:	4b07      	ldr	r3, [pc, #28]	; (8007d20 <USBH_UserProcess+0x58>)
 8007d02:	2202      	movs	r2, #2
 8007d04:	701a      	strb	r2, [r3, #0]
  break;
 8007d06:	e004      	b.n	8007d12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007d08:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <USBH_UserProcess+0x58>)
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	701a      	strb	r2, [r3, #0]
  break;
 8007d0e:	e000      	b.n	8007d12 <USBH_UserProcess+0x4a>

  default:
  break;
 8007d10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	200005b0 	.word	0x200005b0

08007d24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	; 0x28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d2c:	f107 0314 	add.w	r3, r7, #20
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	605a      	str	r2, [r3, #4]
 8007d36:	609a      	str	r2, [r3, #8]
 8007d38:	60da      	str	r2, [r3, #12]
 8007d3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d44:	d147      	bne.n	8007dd6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d46:	2300      	movs	r3, #0
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	4b25      	ldr	r3, [pc, #148]	; (8007de0 <HAL_HCD_MspInit+0xbc>)
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4e:	4a24      	ldr	r2, [pc, #144]	; (8007de0 <HAL_HCD_MspInit+0xbc>)
 8007d50:	f043 0301 	orr.w	r3, r3, #1
 8007d54:	6313      	str	r3, [r2, #48]	; 0x30
 8007d56:	4b22      	ldr	r3, [pc, #136]	; (8007de0 <HAL_HCD_MspInit+0xbc>)
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	613b      	str	r3, [r7, #16]
 8007d60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d70:	f107 0314 	add.w	r3, r7, #20
 8007d74:	4619      	mov	r1, r3
 8007d76:	481b      	ldr	r0, [pc, #108]	; (8007de4 <HAL_HCD_MspInit+0xc0>)
 8007d78:	f7f9 f9da 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007d7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d82:	2302      	movs	r3, #2
 8007d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d8e:	230a      	movs	r3, #10
 8007d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d92:	f107 0314 	add.w	r3, r7, #20
 8007d96:	4619      	mov	r1, r3
 8007d98:	4812      	ldr	r0, [pc, #72]	; (8007de4 <HAL_HCD_MspInit+0xc0>)
 8007d9a:	f7f9 f9c9 	bl	8001130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d9e:	4b10      	ldr	r3, [pc, #64]	; (8007de0 <HAL_HCD_MspInit+0xbc>)
 8007da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da2:	4a0f      	ldr	r2, [pc, #60]	; (8007de0 <HAL_HCD_MspInit+0xbc>)
 8007da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da8:	6353      	str	r3, [r2, #52]	; 0x34
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <HAL_HCD_MspInit+0xbc>)
 8007db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db2:	4a0b      	ldr	r2, [pc, #44]	; (8007de0 <HAL_HCD_MspInit+0xbc>)
 8007db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007db8:	6453      	str	r3, [r2, #68]	; 0x44
 8007dba:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <HAL_HCD_MspInit+0xbc>)
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2100      	movs	r1, #0
 8007dca:	2043      	movs	r0, #67	; 0x43
 8007dcc:	f7f9 f979 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007dd0:	2043      	movs	r0, #67	; 0x43
 8007dd2:	f7f9 f992 	bl	80010fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007dd6:	bf00      	nop
 8007dd8:	3728      	adds	r7, #40	; 0x28
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	40023800 	.word	0x40023800
 8007de4:	40020000 	.word	0x40020000

08007de8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe ffeb 	bl	8006dd2 <USBH_LL_IncTimer>
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff f823 	bl	8006e5e <USBH_LL_Connect>
}
 8007e18:	bf00      	nop
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff f82c 	bl	8006e8c <USBH_LL_Disconnect>
}
 8007e34:	bf00      	nop
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe ffdd 	bl	8006e26 <USBH_LL_PortEnabled>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe ffdd 	bl	8006e42 <USBH_LL_PortDisabled>
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d12a      	bne.n	8007ef8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007ea2:	4a18      	ldr	r2, [pc, #96]	; (8007f04 <USBH_LL_Init+0x74>)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a15      	ldr	r2, [pc, #84]	; (8007f04 <USBH_LL_Init+0x74>)
 8007eae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007eb2:	4b14      	ldr	r3, [pc, #80]	; (8007f04 <USBH_LL_Init+0x74>)
 8007eb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007eb8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007eba:	4b12      	ldr	r3, [pc, #72]	; (8007f04 <USBH_LL_Init+0x74>)
 8007ebc:	2208      	movs	r2, #8
 8007ebe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007ec0:	4b10      	ldr	r3, [pc, #64]	; (8007f04 <USBH_LL_Init+0x74>)
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ec6:	4b0f      	ldr	r3, [pc, #60]	; (8007f04 <USBH_LL_Init+0x74>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007ecc:	4b0d      	ldr	r3, [pc, #52]	; (8007f04 <USBH_LL_Init+0x74>)
 8007ece:	2202      	movs	r2, #2
 8007ed0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ed2:	4b0c      	ldr	r3, [pc, #48]	; (8007f04 <USBH_LL_Init+0x74>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ed8:	480a      	ldr	r0, [pc, #40]	; (8007f04 <USBH_LL_Init+0x74>)
 8007eda:	f7f9 fade 	bl	800149a <HAL_HCD_Init>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007ee4:	f7f8 fd50 	bl	8000988 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007ee8:	4806      	ldr	r0, [pc, #24]	; (8007f04 <USBH_LL_Init+0x74>)
 8007eea:	f7f9 fec2 	bl	8001c72 <HAL_HCD_GetCurrentFrame>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7fe ff5e 	bl	8006db4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	200005b4 	.word	0x200005b4

08007f08 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7f9 fe31 	bl	8001b86 <HAL_HCD_Start>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f95c 	bl	80081e8 <USBH_Get_USB_Status>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7f9 fe39 	bl	8001bcc <HAL_HCD_Stop>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 f941 	bl	80081e8 <USBH_Get_USB_Status>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7f9 fe81 	bl	8001c8e <HAL_HCD_GetCurrentSpeed>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d00c      	beq.n	8007fac <USBH_LL_GetSpeed+0x38>
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d80d      	bhi.n	8007fb2 <USBH_LL_GetSpeed+0x3e>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <USBH_LL_GetSpeed+0x2c>
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d003      	beq.n	8007fa6 <USBH_LL_GetSpeed+0x32>
 8007f9e:	e008      	b.n	8007fb2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa4:	e008      	b.n	8007fb8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8007faa:	e005      	b.n	8007fb8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007fac:	2302      	movs	r3, #2
 8007fae:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb0:	e002      	b.n	8007fb8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb6:	bf00      	nop
  }
  return  speed;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7f9 fe14 	bl	8001c06 <HAL_HCD_ResetPort>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 f8ff 	bl	80081e8 <USBH_Get_USB_Status>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f7f9 fe1b 	bl	8001c4a <HAL_HCD_HC_GetXferCount>
 8008014:	4603      	mov	r3, r0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800801e:	b590      	push	{r4, r7, lr}
 8008020:	b089      	sub	sp, #36	; 0x24
 8008022:	af04      	add	r7, sp, #16
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	4608      	mov	r0, r1
 8008028:	4611      	mov	r1, r2
 800802a:	461a      	mov	r2, r3
 800802c:	4603      	mov	r3, r0
 800802e:	70fb      	strb	r3, [r7, #3]
 8008030:	460b      	mov	r3, r1
 8008032:	70bb      	strb	r3, [r7, #2]
 8008034:	4613      	mov	r3, r2
 8008036:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008046:	787c      	ldrb	r4, [r7, #1]
 8008048:	78ba      	ldrb	r2, [r7, #2]
 800804a:	78f9      	ldrb	r1, [r7, #3]
 800804c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800804e:	9302      	str	r3, [sp, #8]
 8008050:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	f897 3020 	ldrb.w	r3, [r7, #32]
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	4623      	mov	r3, r4
 800805e:	f7f9 fa7e 	bl	800155e <HAL_HCD_HC_Init>
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	4618      	mov	r0, r3
 800806a:	f000 f8bd 	bl	80081e8 <USBH_Get_USB_Status>
 800806e:	4603      	mov	r3, r0
 8008070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008072:	7bbb      	ldrb	r3, [r7, #14]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	bd90      	pop	{r4, r7, pc}

0800807c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f7f9 faee 	bl	800167c <HAL_HCD_HC_Halt>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f89e 	bl	80081e8 <USBH_Get_USB_Status>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80080ba:	b590      	push	{r4, r7, lr}
 80080bc:	b089      	sub	sp, #36	; 0x24
 80080be:	af04      	add	r7, sp, #16
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	4608      	mov	r0, r1
 80080c4:	4611      	mov	r1, r2
 80080c6:	461a      	mov	r2, r3
 80080c8:	4603      	mov	r3, r0
 80080ca:	70fb      	strb	r3, [r7, #3]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70bb      	strb	r3, [r7, #2]
 80080d0:	4613      	mov	r3, r2
 80080d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80080e2:	787c      	ldrb	r4, [r7, #1]
 80080e4:	78ba      	ldrb	r2, [r7, #2]
 80080e6:	78f9      	ldrb	r1, [r7, #3]
 80080e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080ec:	9303      	str	r3, [sp, #12]
 80080ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	4623      	mov	r3, r4
 80080fe:	f7f9 fae1 	bl	80016c4 <HAL_HCD_HC_SubmitRequest>
 8008102:	4603      	mov	r3, r0
 8008104:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	4618      	mov	r0, r3
 800810a:	f000 f86d 	bl	80081e8 <USBH_Get_USB_Status>
 800810e:	4603      	mov	r3, r0
 8008110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008112:	7bbb      	ldrb	r3, [r7, #14]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	bd90      	pop	{r4, r7, pc}

0800811c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f7f9 fd75 	bl	8001c22 <HAL_HCD_HC_GetURBState>
 8008138:	4603      	mov	r3, r0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008154:	2b01      	cmp	r3, #1
 8008156:	d103      	bne.n	8008160 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f870 	bl	8008240 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008160:	20c8      	movs	r0, #200	; 0xc8
 8008162:	f7f8 feaf 	bl	8000ec4 <HAL_Delay>
  return USBH_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
 800817c:	4613      	mov	r3, r2
 800817e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008186:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	212c      	movs	r1, #44	; 0x2c
 800818e:	fb01 f303 	mul.w	r3, r1, r3
 8008192:	4413      	add	r3, r2
 8008194:	333b      	adds	r3, #59	; 0x3b
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d009      	beq.n	80081b0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	212c      	movs	r1, #44	; 0x2c
 80081a2:	fb01 f303 	mul.w	r3, r1, r3
 80081a6:	4413      	add	r3, r2
 80081a8:	3354      	adds	r3, #84	; 0x54
 80081aa:	78ba      	ldrb	r2, [r7, #2]
 80081ac:	701a      	strb	r2, [r3, #0]
 80081ae:	e008      	b.n	80081c2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	212c      	movs	r1, #44	; 0x2c
 80081b6:	fb01 f303 	mul.w	r3, r1, r3
 80081ba:	4413      	add	r3, r2
 80081bc:	3355      	adds	r3, #85	; 0x55
 80081be:	78ba      	ldrb	r2, [r7, #2]
 80081c0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7f8 fe73 	bl	8000ec4 <HAL_Delay>
}
 80081de:	bf00      	nop
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
	...

080081e8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d817      	bhi.n	800822c <USBH_Get_USB_Status+0x44>
 80081fc:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <USBH_Get_USB_Status+0x1c>)
 80081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008202:	bf00      	nop
 8008204:	08008215 	.word	0x08008215
 8008208:	0800821b 	.word	0x0800821b
 800820c:	08008221 	.word	0x08008221
 8008210:	08008227 	.word	0x08008227
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]
    break;
 8008218:	e00b      	b.n	8008232 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800821a:	2302      	movs	r3, #2
 800821c:	73fb      	strb	r3, [r7, #15]
    break;
 800821e:	e008      	b.n	8008232 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008220:	2301      	movs	r3, #1
 8008222:	73fb      	strb	r3, [r7, #15]
    break;
 8008224:	e005      	b.n	8008232 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008226:	2302      	movs	r3, #2
 8008228:	73fb      	strb	r3, [r7, #15]
    break;
 800822a:	e002      	b.n	8008232 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800822c:	2302      	movs	r3, #2
 800822e:	73fb      	strb	r3, [r7, #15]
    break;
 8008230:	bf00      	nop
  }
  return usb_status;
 8008232:	7bfb      	ldrb	r3, [r7, #15]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]
 8008258:	e001      	b.n	800825e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800825a:	2301      	movs	r3, #1
 800825c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800825e:	7bfb      	ldrb	r3, [r7, #15]
 8008260:	461a      	mov	r2, r3
 8008262:	2101      	movs	r1, #1
 8008264:	4803      	ldr	r0, [pc, #12]	; (8008274 <MX_DriverVbusFS+0x34>)
 8008266:	f7f9 f8ff 	bl	8001468 <HAL_GPIO_WritePin>
}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	40020800 	.word	0x40020800

08008278 <malloc>:
 8008278:	4b02      	ldr	r3, [pc, #8]	; (8008284 <malloc+0xc>)
 800827a:	4601      	mov	r1, r0
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	f000 b82b 	b.w	80082d8 <_malloc_r>
 8008282:	bf00      	nop
 8008284:	20000078 	.word	0x20000078

08008288 <free>:
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <free+0xc>)
 800828a:	4601      	mov	r1, r0
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	f000 b8f3 	b.w	8008478 <_free_r>
 8008292:	bf00      	nop
 8008294:	20000078 	.word	0x20000078

08008298 <sbrk_aligned>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4e0e      	ldr	r6, [pc, #56]	; (80082d4 <sbrk_aligned+0x3c>)
 800829c:	460c      	mov	r4, r1
 800829e:	6831      	ldr	r1, [r6, #0]
 80082a0:	4605      	mov	r5, r0
 80082a2:	b911      	cbnz	r1, 80082aa <sbrk_aligned+0x12>
 80082a4:	f000 f8ac 	bl	8008400 <_sbrk_r>
 80082a8:	6030      	str	r0, [r6, #0]
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 f8a7 	bl	8008400 <_sbrk_r>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	d00a      	beq.n	80082cc <sbrk_aligned+0x34>
 80082b6:	1cc4      	adds	r4, r0, #3
 80082b8:	f024 0403 	bic.w	r4, r4, #3
 80082bc:	42a0      	cmp	r0, r4
 80082be:	d007      	beq.n	80082d0 <sbrk_aligned+0x38>
 80082c0:	1a21      	subs	r1, r4, r0
 80082c2:	4628      	mov	r0, r5
 80082c4:	f000 f89c 	bl	8008400 <_sbrk_r>
 80082c8:	3001      	adds	r0, #1
 80082ca:	d101      	bne.n	80082d0 <sbrk_aligned+0x38>
 80082cc:	f04f 34ff 	mov.w	r4, #4294967295
 80082d0:	4620      	mov	r0, r4
 80082d2:	bd70      	pop	{r4, r5, r6, pc}
 80082d4:	200008bc 	.word	0x200008bc

080082d8 <_malloc_r>:
 80082d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082dc:	1ccd      	adds	r5, r1, #3
 80082de:	f025 0503 	bic.w	r5, r5, #3
 80082e2:	3508      	adds	r5, #8
 80082e4:	2d0c      	cmp	r5, #12
 80082e6:	bf38      	it	cc
 80082e8:	250c      	movcc	r5, #12
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	4607      	mov	r7, r0
 80082ee:	db01      	blt.n	80082f4 <_malloc_r+0x1c>
 80082f0:	42a9      	cmp	r1, r5
 80082f2:	d905      	bls.n	8008300 <_malloc_r+0x28>
 80082f4:	230c      	movs	r3, #12
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	2600      	movs	r6, #0
 80082fa:	4630      	mov	r0, r6
 80082fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008300:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80083d4 <_malloc_r+0xfc>
 8008304:	f000 f868 	bl	80083d8 <__malloc_lock>
 8008308:	f8d8 3000 	ldr.w	r3, [r8]
 800830c:	461c      	mov	r4, r3
 800830e:	bb5c      	cbnz	r4, 8008368 <_malloc_r+0x90>
 8008310:	4629      	mov	r1, r5
 8008312:	4638      	mov	r0, r7
 8008314:	f7ff ffc0 	bl	8008298 <sbrk_aligned>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	4604      	mov	r4, r0
 800831c:	d155      	bne.n	80083ca <_malloc_r+0xf2>
 800831e:	f8d8 4000 	ldr.w	r4, [r8]
 8008322:	4626      	mov	r6, r4
 8008324:	2e00      	cmp	r6, #0
 8008326:	d145      	bne.n	80083b4 <_malloc_r+0xdc>
 8008328:	2c00      	cmp	r4, #0
 800832a:	d048      	beq.n	80083be <_malloc_r+0xe6>
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	4631      	mov	r1, r6
 8008330:	4638      	mov	r0, r7
 8008332:	eb04 0903 	add.w	r9, r4, r3
 8008336:	f000 f863 	bl	8008400 <_sbrk_r>
 800833a:	4581      	cmp	r9, r0
 800833c:	d13f      	bne.n	80083be <_malloc_r+0xe6>
 800833e:	6821      	ldr	r1, [r4, #0]
 8008340:	1a6d      	subs	r5, r5, r1
 8008342:	4629      	mov	r1, r5
 8008344:	4638      	mov	r0, r7
 8008346:	f7ff ffa7 	bl	8008298 <sbrk_aligned>
 800834a:	3001      	adds	r0, #1
 800834c:	d037      	beq.n	80083be <_malloc_r+0xe6>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	442b      	add	r3, r5
 8008352:	6023      	str	r3, [r4, #0]
 8008354:	f8d8 3000 	ldr.w	r3, [r8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d038      	beq.n	80083ce <_malloc_r+0xf6>
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	42a2      	cmp	r2, r4
 8008360:	d12b      	bne.n	80083ba <_malloc_r+0xe2>
 8008362:	2200      	movs	r2, #0
 8008364:	605a      	str	r2, [r3, #4]
 8008366:	e00f      	b.n	8008388 <_malloc_r+0xb0>
 8008368:	6822      	ldr	r2, [r4, #0]
 800836a:	1b52      	subs	r2, r2, r5
 800836c:	d41f      	bmi.n	80083ae <_malloc_r+0xd6>
 800836e:	2a0b      	cmp	r2, #11
 8008370:	d917      	bls.n	80083a2 <_malloc_r+0xca>
 8008372:	1961      	adds	r1, r4, r5
 8008374:	42a3      	cmp	r3, r4
 8008376:	6025      	str	r5, [r4, #0]
 8008378:	bf18      	it	ne
 800837a:	6059      	strne	r1, [r3, #4]
 800837c:	6863      	ldr	r3, [r4, #4]
 800837e:	bf08      	it	eq
 8008380:	f8c8 1000 	streq.w	r1, [r8]
 8008384:	5162      	str	r2, [r4, r5]
 8008386:	604b      	str	r3, [r1, #4]
 8008388:	4638      	mov	r0, r7
 800838a:	f104 060b 	add.w	r6, r4, #11
 800838e:	f000 f829 	bl	80083e4 <__malloc_unlock>
 8008392:	f026 0607 	bic.w	r6, r6, #7
 8008396:	1d23      	adds	r3, r4, #4
 8008398:	1af2      	subs	r2, r6, r3
 800839a:	d0ae      	beq.n	80082fa <_malloc_r+0x22>
 800839c:	1b9b      	subs	r3, r3, r6
 800839e:	50a3      	str	r3, [r4, r2]
 80083a0:	e7ab      	b.n	80082fa <_malloc_r+0x22>
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	6862      	ldr	r2, [r4, #4]
 80083a6:	d1dd      	bne.n	8008364 <_malloc_r+0x8c>
 80083a8:	f8c8 2000 	str.w	r2, [r8]
 80083ac:	e7ec      	b.n	8008388 <_malloc_r+0xb0>
 80083ae:	4623      	mov	r3, r4
 80083b0:	6864      	ldr	r4, [r4, #4]
 80083b2:	e7ac      	b.n	800830e <_malloc_r+0x36>
 80083b4:	4634      	mov	r4, r6
 80083b6:	6876      	ldr	r6, [r6, #4]
 80083b8:	e7b4      	b.n	8008324 <_malloc_r+0x4c>
 80083ba:	4613      	mov	r3, r2
 80083bc:	e7cc      	b.n	8008358 <_malloc_r+0x80>
 80083be:	230c      	movs	r3, #12
 80083c0:	603b      	str	r3, [r7, #0]
 80083c2:	4638      	mov	r0, r7
 80083c4:	f000 f80e 	bl	80083e4 <__malloc_unlock>
 80083c8:	e797      	b.n	80082fa <_malloc_r+0x22>
 80083ca:	6025      	str	r5, [r4, #0]
 80083cc:	e7dc      	b.n	8008388 <_malloc_r+0xb0>
 80083ce:	605b      	str	r3, [r3, #4]
 80083d0:	deff      	udf	#255	; 0xff
 80083d2:	bf00      	nop
 80083d4:	200008b8 	.word	0x200008b8

080083d8 <__malloc_lock>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__malloc_lock+0x8>)
 80083da:	f000 b84b 	b.w	8008474 <__retarget_lock_acquire_recursive>
 80083de:	bf00      	nop
 80083e0:	200009fc 	.word	0x200009fc

080083e4 <__malloc_unlock>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__malloc_unlock+0x8>)
 80083e6:	f000 b846 	b.w	8008476 <__retarget_lock_release_recursive>
 80083ea:	bf00      	nop
 80083ec:	200009fc 	.word	0x200009fc

080083f0 <memset>:
 80083f0:	4402      	add	r2, r0
 80083f2:	4603      	mov	r3, r0
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d100      	bne.n	80083fa <memset+0xa>
 80083f8:	4770      	bx	lr
 80083fa:	f803 1b01 	strb.w	r1, [r3], #1
 80083fe:	e7f9      	b.n	80083f4 <memset+0x4>

08008400 <_sbrk_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4d06      	ldr	r5, [pc, #24]	; (800841c <_sbrk_r+0x1c>)
 8008404:	2300      	movs	r3, #0
 8008406:	4604      	mov	r4, r0
 8008408:	4608      	mov	r0, r1
 800840a:	602b      	str	r3, [r5, #0]
 800840c:	f7f8 fc76 	bl	8000cfc <_sbrk>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d102      	bne.n	800841a <_sbrk_r+0x1a>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	b103      	cbz	r3, 800841a <_sbrk_r+0x1a>
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	200009f8 	.word	0x200009f8

08008420 <__errno>:
 8008420:	4b01      	ldr	r3, [pc, #4]	; (8008428 <__errno+0x8>)
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	20000078 	.word	0x20000078

0800842c <__libc_init_array>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	4d0d      	ldr	r5, [pc, #52]	; (8008464 <__libc_init_array+0x38>)
 8008430:	4c0d      	ldr	r4, [pc, #52]	; (8008468 <__libc_init_array+0x3c>)
 8008432:	1b64      	subs	r4, r4, r5
 8008434:	10a4      	asrs	r4, r4, #2
 8008436:	2600      	movs	r6, #0
 8008438:	42a6      	cmp	r6, r4
 800843a:	d109      	bne.n	8008450 <__libc_init_array+0x24>
 800843c:	4d0b      	ldr	r5, [pc, #44]	; (800846c <__libc_init_array+0x40>)
 800843e:	4c0c      	ldr	r4, [pc, #48]	; (8008470 <__libc_init_array+0x44>)
 8008440:	f000 f866 	bl	8008510 <_init>
 8008444:	1b64      	subs	r4, r4, r5
 8008446:	10a4      	asrs	r4, r4, #2
 8008448:	2600      	movs	r6, #0
 800844a:	42a6      	cmp	r6, r4
 800844c:	d105      	bne.n	800845a <__libc_init_array+0x2e>
 800844e:	bd70      	pop	{r4, r5, r6, pc}
 8008450:	f855 3b04 	ldr.w	r3, [r5], #4
 8008454:	4798      	blx	r3
 8008456:	3601      	adds	r6, #1
 8008458:	e7ee      	b.n	8008438 <__libc_init_array+0xc>
 800845a:	f855 3b04 	ldr.w	r3, [r5], #4
 800845e:	4798      	blx	r3
 8008460:	3601      	adds	r6, #1
 8008462:	e7f2      	b.n	800844a <__libc_init_array+0x1e>
 8008464:	08008558 	.word	0x08008558
 8008468:	08008558 	.word	0x08008558
 800846c:	08008558 	.word	0x08008558
 8008470:	0800855c 	.word	0x0800855c

08008474 <__retarget_lock_acquire_recursive>:
 8008474:	4770      	bx	lr

08008476 <__retarget_lock_release_recursive>:
 8008476:	4770      	bx	lr

08008478 <_free_r>:
 8008478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800847a:	2900      	cmp	r1, #0
 800847c:	d044      	beq.n	8008508 <_free_r+0x90>
 800847e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008482:	9001      	str	r0, [sp, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f1a1 0404 	sub.w	r4, r1, #4
 800848a:	bfb8      	it	lt
 800848c:	18e4      	addlt	r4, r4, r3
 800848e:	f7ff ffa3 	bl	80083d8 <__malloc_lock>
 8008492:	4a1e      	ldr	r2, [pc, #120]	; (800850c <_free_r+0x94>)
 8008494:	9801      	ldr	r0, [sp, #4]
 8008496:	6813      	ldr	r3, [r2, #0]
 8008498:	b933      	cbnz	r3, 80084a8 <_free_r+0x30>
 800849a:	6063      	str	r3, [r4, #4]
 800849c:	6014      	str	r4, [r2, #0]
 800849e:	b003      	add	sp, #12
 80084a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084a4:	f7ff bf9e 	b.w	80083e4 <__malloc_unlock>
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	d908      	bls.n	80084be <_free_r+0x46>
 80084ac:	6825      	ldr	r5, [r4, #0]
 80084ae:	1961      	adds	r1, r4, r5
 80084b0:	428b      	cmp	r3, r1
 80084b2:	bf01      	itttt	eq
 80084b4:	6819      	ldreq	r1, [r3, #0]
 80084b6:	685b      	ldreq	r3, [r3, #4]
 80084b8:	1949      	addeq	r1, r1, r5
 80084ba:	6021      	streq	r1, [r4, #0]
 80084bc:	e7ed      	b.n	800849a <_free_r+0x22>
 80084be:	461a      	mov	r2, r3
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	b10b      	cbz	r3, 80084c8 <_free_r+0x50>
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	d9fa      	bls.n	80084be <_free_r+0x46>
 80084c8:	6811      	ldr	r1, [r2, #0]
 80084ca:	1855      	adds	r5, r2, r1
 80084cc:	42a5      	cmp	r5, r4
 80084ce:	d10b      	bne.n	80084e8 <_free_r+0x70>
 80084d0:	6824      	ldr	r4, [r4, #0]
 80084d2:	4421      	add	r1, r4
 80084d4:	1854      	adds	r4, r2, r1
 80084d6:	42a3      	cmp	r3, r4
 80084d8:	6011      	str	r1, [r2, #0]
 80084da:	d1e0      	bne.n	800849e <_free_r+0x26>
 80084dc:	681c      	ldr	r4, [r3, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	6053      	str	r3, [r2, #4]
 80084e2:	440c      	add	r4, r1
 80084e4:	6014      	str	r4, [r2, #0]
 80084e6:	e7da      	b.n	800849e <_free_r+0x26>
 80084e8:	d902      	bls.n	80084f0 <_free_r+0x78>
 80084ea:	230c      	movs	r3, #12
 80084ec:	6003      	str	r3, [r0, #0]
 80084ee:	e7d6      	b.n	800849e <_free_r+0x26>
 80084f0:	6825      	ldr	r5, [r4, #0]
 80084f2:	1961      	adds	r1, r4, r5
 80084f4:	428b      	cmp	r3, r1
 80084f6:	bf04      	itt	eq
 80084f8:	6819      	ldreq	r1, [r3, #0]
 80084fa:	685b      	ldreq	r3, [r3, #4]
 80084fc:	6063      	str	r3, [r4, #4]
 80084fe:	bf04      	itt	eq
 8008500:	1949      	addeq	r1, r1, r5
 8008502:	6021      	streq	r1, [r4, #0]
 8008504:	6054      	str	r4, [r2, #4]
 8008506:	e7ca      	b.n	800849e <_free_r+0x26>
 8008508:	b003      	add	sp, #12
 800850a:	bd30      	pop	{r4, r5, pc}
 800850c:	200008b8 	.word	0x200008b8

08008510 <_init>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	bf00      	nop
 8008514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008516:	bc08      	pop	{r3}
 8008518:	469e      	mov	lr, r3
 800851a:	4770      	bx	lr

0800851c <_fini>:
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	bf00      	nop
 8008520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008522:	bc08      	pop	{r3}
 8008524:	469e      	mov	lr, r3
 8008526:	4770      	bx	lr
