#include "can.h"
#include "main.h"

// Экземпляры и внешние переменные
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// Функция проверки состояния кнопки
uint8_t Button_Is_Pressed(void) {
    // Проверяем, нажата ли кнопка: если кнопка активна при низком уровне, используем GPIO_PIN_RESET
    return HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) == GPIO_PIN_RESET;
}

// Функция для инициализации CAN
void CAN1_Init_Custom(void) {
    HAL_UART_Transmit(&huart2, (uint8_t *)"Starting CAN Initialization...\r\n", 31, HAL_MAX_DELAY);

    CAN_FilterTypeDef canFilter;
    canFilter.FilterActivation = ENABLE;
    canFilter.FilterBank = 0;
    canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
    canFilter.FilterIdHigh = 0x0000;  // Устанавливаем фильтр для ID устройства
    canFilter.FilterIdLow = 0x0000;
    canFilter.FilterMaskIdHigh = 0x0000;
    canFilter.FilterMaskIdLow = 0x0000;
    canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
    canFilter.FilterScale = CAN_FILTERSCALE_32BIT;

    if (HAL_CAN_ConfigFilter(&hcan1, &canFilter) != HAL_OK) {
        HAL_UART_Transmit(&huart2, (uint8_t *)"CAN Filter Config Failed!\r\n", 27, HAL_MAX_DELAY);
        Error_handler();
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t *)"CAN Filter Config Successful\r\n", 30, HAL_MAX_DELAY);
    }

    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
        HAL_UART_Transmit(&huart2, (uint8_t *)"CAN Start Failed!\r\n", 19, HAL_MAX_DELAY);
        Error_handler();
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t *)"CAN Started Successfully\r\n", 27, HAL_MAX_DELAY);
    }
}

// Функция для запроса температуры
void CAN1_RequestTemperature(uint8_t device_address) {
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t query[6] = {device_address, 0x03, 0x00, 0x00, 0x00, 0x02};  // Команда запроса температуры

    TxHeader.DLC = 6;
    TxHeader.StdId = device_address;
    TxHeader.IDE = CAN_ID_STD;
    TxHeader.RTR = CAN_RTR_DATA;

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, query, &TxMailbox) != HAL_OK) {
        HAL_UART_Transmit(&huart2, (uint8_t *)"CAN Tx Error\r\n", 14, HAL_MAX_DELAY);
        Error_handler();
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t *)"Temperature Query Sent\r\n", 24, HAL_MAX_DELAY);
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t rcvd_msg[8];
    char msg[50];

    HAL_UART_Transmit(&huart2, (uint8_t *)"Message Received in Callback\r\n", 30, HAL_MAX_DELAY);

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rcvd_msg) == HAL_OK) {
        HAL_UART_Transmit(&huart2, (uint8_t *)"CAN Message Retrieved\r\n", 24, HAL_MAX_DELAY);

        if (RxHeader.StdId == 0x01 && RxHeader.DLC == 8) {
            uint16_t raw_temp = (rcvd_msg[3] << 8) | rcvd_msg[4];
            float temperature = raw_temp / 100.0f;

            sprintf(msg, "Temperature: %.2f C\r\n", temperature);
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        } else {
            HAL_UART_Transmit(&huart2, (uint8_t *)"Unexpected Data Format\r\n", 24, HAL_MAX_DELAY);
        }
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t *)"CAN Rx Error\r\n", 14, HAL_MAX_DELAY);
        Error_handler();
    }
}


// Функция обработки ошибок
void Error_handler(void) {
    HAL_UART_Transmit(&huart2, (uint8_t *)"Entering Error Handler\r\n", 24, HAL_MAX_DELAY);
    __disable_irq();
    while (1) {
        // Индикация ошибки может быть добавлена здесь
    }
}

// Основная функция, вызывающая запрос температуры по кнопке
void CheckTemperatureOnButtonPress(void) {
    if (Button_Is_Pressed()) {  // Проверяем, нажата ли кнопка
        CAN1_RequestTemperature(0x01);  // Запрашиваем температуру у устройства с адресом 0x01
    }
}
