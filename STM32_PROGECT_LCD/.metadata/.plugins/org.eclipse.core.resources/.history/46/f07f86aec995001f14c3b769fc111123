#include "can.h"
#include "stm32f1xx_hal_uart.h"
#include <stdio.h>
#include <string.h>

#define LEFT_WHEEL_ID 3
#define RAW_CAN_BOOTLOADER_HEARTBEAT_ARBITRATION_CODE 0x700
#define RAW_CAN_RESPONSE_ARBITRATION_CODE 0x580

const uint8_t RAW_CAN_BOOTLOADER_HEARTBEAT_DATA[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const uint8_t CANOPEN_CONFIRMATION_DATA[1] = {0x7F};

extern CAN_HandleTypeDef hcan;
extern UART_HandleTypeDef huart2;


ActivationState currentState = STATE_INIT;
uint32_t stateTimer = 0;
volatile uint8_t heartbeat_received = 0;
volatile uint8_t canopen_confirmation_received = 0;

static void CAN_ConfigFilter(void);
static uint8_t wait_for_heartbeat(uint32_t timeout_ms);
static uint8_t send_command(uint8_t *data, uint8_t len);
void CAN_Init(void);
void LogMessage(const char *message);
void LogError(const char *message);

void CAN_Init(void) {
    CAN_ConfigFilter();
    if (HAL_CAN_Start(&hcan) != HAL_OK) {
        LogError("CAN_Init: Error starting CAN");
    } else {
        LogMessage("CAN_Init: CAN started successfully");
    }
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
        LogError("CAN_Init: Error activating CAN notifications");
    } else {
        LogMessage("CAN_Init: Notifications activated");
    }
}

void StartActivationProcess(void) {
    currentState = STATE_WAIT_BOOTLOADER_HEARTBEAT;
    stateTimer = HAL_GetTick();
    LogMessage("Starting activation process...");
}

void CAN_ProcessStateMachine(void) {
    uint8_t activation_data[2] = {0x10, 0x10};

    switch (currentState) {
        case STATE_WAIT_BOOTLOADER_HEARTBEAT:
            LogMessage("STATE_WAIT_BOOTLOADER_HEARTBEAT");
            if (wait_for_heartbeat(6000)) {
                LogMessage("Bootloader heartbeat received.");
                currentState = STATE_GET_BOOTLOADER_VERSION;
                stateTimer = HAL_GetTick();
            } else if (HAL_GetTick() - stateTimer > 5000) {
                LogError("Failed to receive bootloader heartbeat.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;

        case STATE_GET_BOOTLOADER_VERSION:
            LogMessage("STATE_GET_BOOTLOADER_VERSION");
            if (send_command((uint8_t*) "\x20\x20", 2)) {
                if (wait_for_heartbeat(6000)) {
                    LogMessage("Bootloader version received.");
                    currentState = STATE_SEND_ACTIVATION;
                    stateTimer = HAL_GetTick();
                }
            } else {
                LogError("Failed to send bootloader version request.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;

        case STATE_SEND_ACTIVATION:
            LogMessage("STATE_SEND_ACTIVATION");
            if (send_command(activation_data, 2)) {
                if (wait_for_heartbeat(6000)) {
                    LogMessage("Activation command acknowledged.");
                    currentState = STATE_CONFIRM_CANOPEN_MODE;
                    stateTimer = HAL_GetTick();
                }
            } else {
                LogError("Failed to send activation command.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;

        case STATE_CONFIRM_CANOPEN_MODE:
            LogMessage("STATE_CONFIRM_CANOPEN_MODE");
            if (wait_for_heartbeat(5000)) {
                LogMessage("CANopen mode confirmed.");
                currentState = STATE_ROTATE_WHEEL;  // Переход к состоянию вращения колеса
            } else if (HAL_GetTick() - stateTimer > 5000) {
                LogError("Failed to confirm CANopen mode.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;

        case STATE_ROTATE_WHEEL: {
            LogMessage("STATE_ROTATE_WHEEL: Rotating wheel by 1 meter");

            // Команды для установки в Speed Mode или Position Mode и вращения на один метр
            uint8_t set_speed_mode[] = {0x2F, 0x60, 0x60, 0x00, 0x03};  // Speed Mode
            uint8_t set_target_speed[] = {0x23, 0xFF, 0x60, 0x00, 0xE8, 0x03, 0x00, 0x00};  // Target speed
            uint8_t emergency_stop[] = {0x2B, 0x40, 0x60, 0x00, 0x02};  // Остановка

            // Отправка команд
            if (send_command(set_speed_mode, sizeof(set_speed_mode))) {
                HAL_Delay(100);
                send_command(set_target_speed, sizeof(set_target_speed));
                LogMessage("Wheel rotated by 1 meter.");

                HAL_Delay(1000);  // Ожидание завершения движения

                send_command(emergency_stop, sizeof(emergency_stop));
                LogMessage("Emergency stop executed.");
                currentState = STATE_ACTIVATION_COMPLETE;  // Переход к завершению активации
            } else {
                LogError("Failed to rotate wheel.");
                currentState = STATE_ACTIVATION_FAILED;
            }
            break;
        }

        case STATE_ACTIVATION_FAILED:
            LogError("Activation failed.");
            currentState = STATE_INIT;
            break;

        case STATE_ACTIVATION_COMPLETE:
            LogMessage("Activation process completed successfully.");
            currentState = STATE_INIT;  // Завершение процесса и возврат в начальное состояние
            break;

        default:
            break;
    }
}

void process_CAN_message(uint16_t received_ID, uint8_t *data, uint8_t DLC) {
    char logBuffer[200];
    snprintf(logBuffer, sizeof(logBuffer),
             "Received CAN message: ID=0x%X, DLC=%d, Data=[%02X, %02X, %02X, %02X, %02X, %02X, %02X, %02X]",
             received_ID, DLC, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
    LogMessage(logBuffer);

    if (received_ID == (LEFT_WHEEL_ID | RAW_CAN_BOOTLOADER_HEARTBEAT_ARBITRATION_CODE) &&
        memcmp(data, RAW_CAN_BOOTLOADER_HEARTBEAT_DATA, 8) == 0) {
        LogMessage("Bootloader heartbeat message received.");
        heartbeat_received = 1;
    }
    else if (received_ID == (LEFT_WHEEL_ID | RAW_CAN_BOOTLOADER_HEARTBEAT_ARBITRATION_CODE) &&
             data[0] == CANOPEN_CONFIRMATION_DATA[0]) {
        LogMessage("CANopen confirmation message received.");
        canopen_confirmation_received = 1;
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    while (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
        process_CAN_message(RxHeader.StdId, RxData, RxHeader.DLC);
    }
}

// Остальные вспомогательные функции остаются без изменений
