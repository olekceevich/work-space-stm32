#include "can.h"
#include "main.h"

// Экземпляры и внешние переменные
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// Переменные для отправки и получения данных
uint8_t queryTempCommand[8] = {0x01, 0x03, 0x00, 0x00, 0x00, 0x02};  // Команда запроса температуры
CAN_TxHeaderTypeDef TxHeader;
CAN_RxHeaderTypeDef RxHeader;
uint32_t TxMailbox;

// Функция инициализации CAN с настройкой фильтра
void CAN1_Init(void) {
    CAN_FilterTypeDef canFilter;
    canFilter.FilterActivation = ENABLE;
    canFilter.FilterBank = 0;
    canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
    canFilter.FilterIdHigh = 0x0000;
    canFilter.FilterIdLow = 0x0000;
    canFilter.FilterMaskIdHigh = 0x0000;
    canFilter.FilterMaskIdLow = 0x0000;
    canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
    canFilter.FilterScale = CAN_FILTERSCALE_32BIT;

    if (HAL_CAN_ConfigFilter(&hcan1, &canFilter) != HAL_OK || HAL_CAN_Start(&hcan1) != HAL_OK) {
        HAL_UART_Transmit(&huart2, (uint8_t *)"CAN Init Error\r\n", 16, HAL_MAX_DELAY);
        Error_handler();
    }
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
}

// Функция отправки запроса температуры
void Request_Temperature(void) {
    TxHeader.DLC = 6;
    TxHeader.StdId = 0x01;  // ID устройства
    TxHeader.IDE = CAN_ID_STD;
    TxHeader.RTR = CAN_RTR_DATA;

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, queryTempCommand, &TxMailbox) != HAL_OK) {
        HAL_UART_Transmit(&huart2, (uint8_t *)"CAN Tx Error\r\n", 14, HAL_MAX_DELAY);
        Error_handler();
    }
}

// Обработчик прерываний для приема сообщений по CAN (FIFO0)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
    uint8_t rcvd_msg[8];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, rcvd_msg) == HAL_OK) {
        if (RxHeader.StdId == 0x01 && rcvd_msg[1] == 0x03) {  // Проверка ID и кода функции
            uint16_t tempRaw = (rcvd_msg[3] << 8) | rcvd_msg[4];
            float temperature = tempRaw / 100.0f;
            char msg[50];
            sprintf(msg, "Temperature: %.2f°C\r\n", temperature);
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        }
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t *)"CAN Rx Error\r\n", 14, HAL_MAX_DELAY);
    }
}

// Основной цикл для обработки нажатия кнопки
void Process_CAN_Temperature(void) {
    // Прямое указание порта и пина для кнопки
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) {
        Request_Temperature();
        HAL_Delay(300);  // Задержка для предотвращения повторных срабатываний
    }
}

// Функция обработки ошибок
void Error_handler(void) {
    HAL_UART_Transmit(&huart2, (uint8_t *)"Entering Error Handler\r\n", 24, HAL_MAX_DELAY);
    __disable_irq();
    while (1) {
        // Индикация ошибки
    }
}
