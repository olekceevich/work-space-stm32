#include "SM1810C.h"
#include "stm32f4xx_hal_uart.h"
#include <stdio.h>
#include <string.h>

extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

static CAN_TxHeaderTypeDef TxHeader;
static CAN_RxHeaderTypeDef RxHeader;
static uint8_t TxData[8];
static uint8_t RxData[8];
static uint32_t TxMailbox;

void SM1810C_Init(void) {
    // CAN initialization (modify if specific settings are needed)
    TxHeader.StdId = 0x01;       // Device ID for SM1810C
    TxHeader.RTR = CAN_RTR_DATA; // Data frame
    TxHeader.IDE = CAN_ID_STD;   // Standard frame
    TxHeader.DLC = 6;            // Data length for query command
}

void SM1810C_RequestData(void) {
    // Query command for SM1810C to request temperature and humidity data
    TxData[0] = 0x01; // Frame type
    TxData[1] = 0x03; // Function code for reading data
    TxData[2] = 0x00; // Starting address high byte
    TxData[3] = 0x00; // Starting address low byte
    TxData[4] = 0x00; // Data length high byte
    TxData[5] = 0x02; // Data length low byte (requesting two data points)

    // Send the CAN message
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
        char error_msg[] = "Error sending CAN message\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
    } else {
        char success_msg[] = "Query sent successfully\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)success_msg, strlen(success_msg), HAL_MAX_DELAY);
    }
}

void SM1810C_ProcessResponse(void) {
    // Wait for response in Rx FIFO0
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
        if (RxHeader.StdId == 0x01 && RxHeader.DLC == 7) {
            // Decode temperature and humidity
            uint16_t temperature_raw = (RxData[3] << 8) | RxData[4];
            float temperature = temperature_raw / 100.0f;

            uint16_t humidity_raw = (RxData[5] << 8) | RxData[6];
            float humidity = humidity_raw / 100.0f;

            // Print results via UART
            char buffer[64];
            snprintf(buffer, sizeof(buffer), "Temperature: %.2fÂ°C, Humidity: %.2f%%RH\r\n", temperature, humidity);
            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
        } else {
            char error_msg[] = "Invalid CAN response\r\n";
            HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
        }
    } else {
        char error_msg[] = "Error receiving CAN message\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
    }
}
