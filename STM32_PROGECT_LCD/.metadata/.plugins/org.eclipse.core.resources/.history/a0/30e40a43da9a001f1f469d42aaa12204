#include "can.h"
#include "main.h"

// Экземпляры и внешние переменные
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

// Функция инициализации CAN
void CAN1_Init(void) {
    HAL_UART_Transmit(&huart2, (uint8_t *)"Initializing CAN...\r\n", 21, HAL_MAX_DELAY);
    if (HAL_CAN_Init(&hcan1) != HAL_OK) {
        LogError("CAN Init Failed!");
        Error_handler();
    }
    LogInfo("CAN Initialized Successfully");

    // Настройка фильтра
    CAN_FilterTypeDef canFilter;
    canFilter.FilterActivation = ENABLE;
    canFilter.FilterBank = 0;
    canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
    canFilter.FilterIdHigh = 0x0000;  // Установите нужные идентификаторы
    canFilter.FilterIdLow = 0x0000;
    canFilter.FilterMaskIdHigh = 0x0000;
    canFilter.FilterMaskIdLow = 0x0000;
    canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
    canFilter.FilterScale = CAN_FILTERSCALE_32BIT;

    if (HAL_CAN_ConfigFilter(&hcan1, &canFilter) != HAL_OK) {
        LogError("CAN Filter Config Failed!");
        Error_handler();
    }
    LogInfo("CAN Filter Configured Successfully");

    // Включение уведомлений
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
        LogError("CAN Notification Activation Failed!");
        Error_handler();
    }
    LogInfo("CAN Notifications Activated");

    // Запуск CAN
    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
        LogError("CAN Start Failed!");
        Error_handler();
    }
    LogInfo("CAN Started Successfully");

    // Запрос данных о температуре
    RequestTemperatureData();
}

// Функция отправки команды на запрос температуры
void RequestTemperatureData(void) {
    uint8_t requestData[6] = {0x01, 0x03, 0x00, 0x00, 0x00, 0x02}; // Команда для запроса
    CAN1_Send(0x01, requestData, sizeof(requestData)); // ID устройства и данные запроса
}

// Функция отправки сообщения по CAN
void CAN1_Send(uint32_t stdId, uint8_t *data, uint8_t length) {
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;

    TxHeader.DLC = length;
    TxHeader.StdId = stdId;
    TxHeader.IDE = CAN_ID_STD;
    TxHeader.RTR = CAN_RTR_DATA;

    // Проверка занятости линии
    if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0) {
        if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data, &TxMailbox) != HAL_OK) {
            LogError("CAN Tx Error");
            Error_handler();
        } else {
            LogInfo("CAN Message Sent Successfully");
        }
    } else {
        LogError("CAN Line Busy, Try Again Later");
    }
}

// Функция для получения и обработки сообщения
void CAN1_Receive(void) {
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t receivedData[8];

    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, receivedData) == HAL_OK) {
        // Обработка полученного сообщения
        ProcessReceivedMessage(&RxHeader, receivedData);
    } else {
        LogError("CAN Rx Error");
        Error_handler();
    }
}

// Обработка полученного сообщения
void ProcessReceivedMessage(CAN_RxHeaderTypeDef *RxHeader, uint8_t *data) {
    char msg[50];

    if (RxHeader->StdId == 0x01) { // ID ответа
        uint16_t temperatureRaw = (data[3] << 8) | data[4]; // Получаем данные температуры
        float temperature = temperatureRaw / 100.0; // Преобразование в °C
        sprintf(msg, "Temperature: %.2f °C\r\n", temperature);
        LogInfo(msg);
    } else {
        sprintf(msg, "Unknown ID: 0x%x\r\n", RxHeader->StdId);
        LogInfo(msg);
    }
}

// Логирование сообщений
void LogInfo(const char *message) {
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
}

void LogError(const char *message) {
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
}

// Функция обработки ошибок
void Error_handler(void) {
    LogError("Entering Error Handler");
    __disable_irq();  // Отключаем прерывания
    while (1) {
        // Индикатор ошибки (например, мигание светодиодом)
    }
}
