#include "SM1810C.h"
#include "stm32f4xx_hal_uart.h"
#include <stdio.h>
#include <string.h>

extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart2;

static CAN_TxHeaderTypeDef TxHeader;
static CAN_RxHeaderTypeDef RxHeader;
static uint8_t TxData[8];
static uint8_t RxData[8];
static uint32_t TxMailbox;

// Стейт-машина для запроса и обработки данных
typedef enum {
    STATE_IDLE,
    STATE_SEND_QUERY,
    STATE_WAIT_FOR_RESPONSE,
    STATE_PROCESS_RESPONSE
} SM1810C_State;

static SM1810C_State currentState = STATE_IDLE;
static uint32_t lastTick = 0;

void SM1810C_Init(void) {
    // Настройка заголовка CAN
    TxHeader.StdId = 0x01;       // ID устройства SM1810C
    TxHeader.RTR = CAN_RTR_DATA; // Data frame
    TxHeader.IDE = CAN_ID_STD;   // Standard frame
    TxHeader.DLC = 6;            // Data length for query command

    // Настройка фильтра для приёма всех сообщений
    CAN_FilterTypeDef sFilterConfig;
    sFilterConfig.FilterBank = 0;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
    sFilterConfig.FilterIdHigh = 0x0000;
    sFilterConfig.FilterIdLow = 0x0000;
    sFilterConfig.FilterMaskIdHigh = 0x0000;
    sFilterConfig.FilterMaskIdLow = 0x0000;
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
        HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR: CAN filter configuration failed\r\n", 39, HAL_MAX_DELAY);
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"CAN filter configured successfully\r\n", 36, HAL_MAX_DELAY);
    }

    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
        HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR: CAN start failed\r\n", 25, HAL_MAX_DELAY);
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"CAN started successfully\r\n", 26, HAL_MAX_DELAY);
    }

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
        HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR: CAN notification activation failed\r\n", 43, HAL_MAX_DELAY);
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"CAN notifications activated\r\n", 30, HAL_MAX_DELAY);
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"SM1810C initialized and ready\r\n", 31, HAL_MAX_DELAY);
}

void SM1810C_RequestData(void) {
    TxData[0] = 0x01; // Frame type
    TxData[1] = 0x03; // Function code for reading data
    TxData[2] = 0x00; // Starting address high byte
    TxData[3] = 0x00; // Starting address low byte
    TxData[4] = 0x00; // Data length high byte
    TxData[5] = 0x02; // Data length low byte (requesting two data points)

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
        HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR: Failed to send CAN message\r\n", 35, HAL_MAX_DELAY);
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"Query sent successfully\r\n", 25, HAL_MAX_DELAY);
    }
}

void SM1810C_ProcessResponse(void) {
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
        if (RxHeader.StdId == 0x01 && RxHeader.DLC == 7) {
            uint16_t temperature_raw = (RxData[3] << 8) | RxData[4];
            float temperature = temperature_raw / 100.0f;

            uint16_t humidity_raw = (RxData[5] << 8) | RxData[6];
            float humidity = humidity_raw / 100.0f;

            char buffer[64];
            snprintf(buffer, sizeof(buffer), "Data received - Temp: %.2f°C, Humidity: %.2f%%RH\r\n", temperature, humidity);
            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
        } else {
            HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR: Invalid CAN response ID or DLC\r\n", 39, HAL_MAX_DELAY);
        }
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR: No response in CAN FIFO0\r\n", 34, HAL_MAX_DELAY);
    }
}

// Функция стейт-машины
void SM1810C_StateMachine(void) {
    switch (currentState) {
        case STATE_IDLE:
            if (HAL_GetTick() - lastTick > 1000) { // Задержка перед новым запросом
                currentState = STATE_SEND_QUERY;
            }
            break;

        case STATE_SEND_QUERY:
            SM1810C_RequestData();
            lastTick = HAL_GetTick(); // Фиксируем время отправки
            currentState = STATE_WAIT_FOR_RESPONSE;
            break;

        case STATE_WAIT_FOR_RESPONSE:
            if (HAL_GetTick() - lastTick > 200) { // Ожидание ответа 200 мс
                if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
                    currentState = STATE_PROCESS_RESPONSE;
                } else {
                    currentState = STATE_IDLE; // Нет ответа, возвращаемся в IDLE
                }
            }
            break;

        case STATE_PROCESS_RESPONSE:
            SM1810C_ProcessResponse();
            currentState = STATE_IDLE;
            break;
    }
}
