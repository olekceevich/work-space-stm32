#include "main.h"
#include <stdio.h>
#include <string.h>

#define TX_EN_Pin GPIO_PIN_8
#define TX_EN_GPIO_Port GPIOA
#define BEEP_Pin GPIO_PIN_4
#define BEEP_GPIO_Port GPIOA

#define MODBUS_ADDR 0x03

uint8_t calibration_command[11] = {MODBUS_ADDR, 0x10, 0x00, 0x13, 0x00, 0x01, 0x02, 0x00, 0xAA, 0x3D, 0xEC};
uint8_t beep_command_on[8] = {MODBUS_ADDR, 0x06, 0x00, 0x08, 0x00, 0x01, 0x00, 0x00};
uint8_t beep_command_off[8] = {MODBUS_ADDR, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00};

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
TIM_HandleTypeDef htim14;

typedef enum {
    STATE_INIT,
    STATE_CALIBRATION,
    STATE_READ_VOLTAGE,
    STATE_READ_CURRENT,
    STATE_BEEP_ON,
    STATE_BEEP_OFF,
    STATE_DONE
} State;

State current_state = STATE_INIT;
uint8_t calibration_successful = 0;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM14_Init(void);
void send_command(uint8_t *command, uint8_t length);
uint16_t crc_chk(uint8_t *data, uint8_t length);
void log_message(const char *message);
void read_register(uint16_t reg_addr, uint8_t *response, uint8_t length);

uint16_t crc_chk(uint8_t *data, uint8_t length) {
    uint16_t crc = 0xFFFF;
    for (int pos = 0; pos < length; pos++) {
        crc ^= (uint16_t)data[pos];
        for (int i = 8; i != 0; i--) {
            if ((crc & 0x0001) != 0) {
                crc >>= 1;
                crc ^= 0xA001;
            } else {
                crc >>= 1;
            }
        }
    }
    return crc;
}

void send_command(uint8_t *command, uint8_t length) {
    HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
    HAL_Delay(1); // Добавляем задержку для установки линии TX EN

    HAL_UART_Transmit(&huart1, command, length, HAL_MAX_DELAY);
    while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY) {}

    HAL_Delay(1); // Добавляем задержку перед отключением линии TX EN
    HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
}

void log_message(const char *message) {
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
}

uint8_t check_calibration_response(uint8_t *response) {
    uint8_t expected_response[8] = {0x03, 0x10, 0x00, 0x13, 0x00, 0x01, 0xF1, 0xEE};
    for (int i = 0; i < 8; i++) {
        if (response[i] != expected_response[i]) {
            return 0;
        }
    }
    return 1;
}

void send_calibration_command(void) {
    log_message("Sending manually formed calibration command\n");
    send_command(calibration_command, 11);

    // Получение ответа на команду калибровки
    uint8_t response[8];
    HAL_UART_Receive(&huart1, response, 8, HAL_MAX_DELAY);

    char response_message[100];
    snprintf(response_message, sizeof(response_message), "Calibration response: ");
    for (int i = 0; i < 8; i++) {
        snprintf(response_message + strlen(response_message), sizeof(response_message) - strlen(response_message), "%02X ", response[i]);
    }
    log_message(response_message);

    calibration_successful = check_calibration_response(response);
}

void beep(uint8_t state) {
    uint8_t *command = state ? beep_command_on : beep_command_off;
    uint16_t crc = crc_chk(command, 6);
    command[6] = crc & 0xFF;
    command[7] = (crc >> 8) & 0xFF;

    log_message(state ? "Turning beep ON\n" : "Turning beep OFF\n");
    send_command(command, 8);
}

void read_register(uint16_t reg_addr, uint8_t *response, uint8_t length) {
    uint8_t read_command[8] = {MODBUS_ADDR, 0x03, (reg_addr >> 8) & 0xFF, reg_addr & 0xFF, 0x00, 0x01, 0x00, 0x00};
    uint16_t crc = crc_chk(read_command, 6);
    read_command[6] = crc & 0xFF;
    read_command[7] = (crc >> 8) & 0xFF;

    log_message("Sending read register command\n");
    send_command(read_command, 8);

    HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET); // Убедитесь, что передатчик отключен
    HAL_UART_Receive(&huart1, response, length, HAL_MAX_DELAY);
}

void process_state_machine(void) {
    uint8_t response[7];

    switch (current_state) {
        case STATE_INIT:
            log_message("Initialization complete\n");
            current_state = STATE_CALIBRATION;
            break;

        case STATE_CALIBRATION:
            send_calibration_command();
            if (calibration_successful) {
                current_state = STATE_READ_VOLTAGE;
            } else {
                log_message("Calibration failed\n");
                current_state = STATE_DONE;
            }
            break;

        case STATE_READ_VOLTAGE:
            log_message("Reading voltage\n");
            read_register(0x0000, response, 7);
            HAL_Delay(1000);

            char voltage_message[50];
            snprintf(voltage_message, sizeof(voltage_message), "Voltage response: ");
            for (int i = 0; i < 7; i++) {
                snprintf(voltage_message + strlen(voltage_message), sizeof(voltage_message) - strlen(voltage_message), "%02X ", response[i]);
            }
            log_message(voltage_message);

            current_state = STATE_READ_CURRENT;
            break;

        case STATE_READ_CURRENT:
            log_message("Reading current\n");
            read_register(0x0001, response, 7);
            HAL_Delay(1000);

            char current_message[50];
            snprintf(current_message, sizeof(current_message), "Current response: ");
            for (int i = 0; i < 7; i++) {
                snprintf(current_message + strlen(current_message), sizeof(current_message) - strlen(current_message), "%02X ", response[i]);
            }
            log_message(current_message);

            current_state = STATE_BEEP_ON;
            break;

        case STATE_BEEP_ON:
            beep(1);
            HAL_Delay(1000);
            current_state = STATE_BEEP_OFF;
            break;

        case STATE_BEEP_OFF:
            beep(0);
            current_state = STATE_DONE;
            break;

        case STATE_DONE:
            log_message("Process completed\n");
            while (1) {} // Бесконечный цикл, чтобы остановить выполнение
            break;
    }
}

int main(void) {
    HAL_Init();
    SystemClock_Config();

    MX_GPIO_Init();
    MX_USART1_UART_Init();
    MX_USART2_UART_Init();
    MX_TIM14_Init();

    while (1) {
        process_state_machine();
    }
}

void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 168;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
        Error_Handler();
    }
}

static void MX_USART1_UART_Init(void) {
    huart1.Instance = USART1;
    huart1.Init.BaudRate = 115200;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart1) != HAL_OK) {
        Error_Handler();
    }
}

static void MX_USART2_UART_Init(void) {
    huart2.Instance = USART2;
    huart2.Init.BaudRate = 115200;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart2) != HAL_OK) {
        Error_Handler();
    }
}

static void MX_TIM14_Init(void) {
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    TIM_MasterConfigTypeDef sMasterConfig = {0};

    htim14.Instance = TIM14;
    htim14.Init.Prescaler = 8399;
    htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim14.Init.Period = 9999;
    htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    if (HAL_TIM_ConfigClockSource(&htim14, &sClockSourceConfig) != HAL_OK) {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig) != HAL_OK) {
        Error_Handler();
    }
}

static void MX_GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOH_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();

    HAL_GPIO_WritePin(GPIOA, TX_EN_Pin | BEEP_Pin, GPIO_PIN_RESET);

    GPIO_InitStruct.Pin = TX_EN_Pin | BEEP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void Error_Handler(void) {
    __disable_irq();
    while (1) {
    }
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line) {
}
#endif /* USE_FULL_ASSERT */
